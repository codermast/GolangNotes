const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":609,\"nextId\":609,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"3\",\"3\":\"4\",\"4\":\"5\",\"5\":\"6\",\"6\":\"7\",\"7\":\"7#拷贝远程仓库\",\"8\":\"7#创建本地仓库\",\"9\":\"8\",\"10\":\"8#创建分支\",\"11\":\"8#切换分支\",\"12\":\"8#删除分支\",\"13\":\"8#查看分支\",\"14\":\"8#合并分支\",\"15\":\"8#合并冲突\",\"16\":\"8#冲突发生\",\"17\":\"8#冲突查看\",\"18\":\"8#冲突解决\",\"19\":\"9\",\"20\":\"9#添加文件到暂存区\",\"21\":\"9#查看仓库状态\",\"22\":\"9#比较文件的不同\",\"23\":\"9#提交暂存区到本地仓库\",\"24\":\"9#回退版本\",\"25\":\"9#删除暂存区和工作区文件\",\"26\":\"9#移动或重命名工作区文件\",\"27\":\"9#恢复或撤销文件的更改\",\"28\":\"10\",\"29\":\"10#git介绍\",\"30\":\"10#git安装\",\"31\":\"10#macos\",\"32\":\"10#linux\",\"33\":\"10#windows安装\",\"34\":\"11\",\"35\":\"11#远程仓库操作\",\"36\":\"11#从远程获取代码库\",\"37\":\"11#下载远程代码并合并\",\"38\":\"11#上传远程代码并合并\",\"39\":\"12\",\"40\":\"13\",\"41\":\"13#目录\",\"42\":\"14\",\"43\":\"14#docker架构\",\"44\":\"14#docker镜像加速\",\"45\":\"14#样例剖析\",\"46\":\"15\",\"47\":\"15#compose简介\",\"48\":\"15#compose安装\",\"49\":\"15#compose样例\",\"50\":\"15#compose基本命令\",\"51\":\"15#compose文件结构\",\"52\":\"15#compose高级应用\",\"53\":\"16\",\"54\":\"16#容器命名\",\"55\":\"16#创建网络\",\"56\":\"16#连接容器\",\"57\":\"17\",\"58\":\"17#什么是dockerfile\",\"59\":\"17#示例说明\",\"60\":\"17#镜像结构\",\"61\":\"17#编写规则\",\"62\":\"17#指令汇总\",\"63\":\"17#docker-build\",\"64\":\"17#基本语法\",\"65\":\"17#常用选项\",\"66\":\"17#示例用法\",\"67\":\"17#构建步骤详解\",\"68\":\"17#注意事项\",\"69\":\"18\",\"70\":\"18#docker是什么\",\"71\":\"18#docker能干什么\",\"72\":\"18#docker和普通虚拟机的区别\",\"73\":\"18#学习docker之前-需要什么基础\",\"74\":\"18#安装\",\"75\":\"18#docker官方安装教程\",\"76\":\"18#第三方安装教程\",\"77\":\"19\",\"78\":\"19#什么是docker镜像、容器、仓库\",\"79\":\"19#镜像、容器、仓库之间的关系\",\"80\":\"19#docker镜像\",\"81\":\"19#镜像列表\",\"82\":\"19#查找镜像\",\"83\":\"19#拉取镜像\",\"84\":\"19#删除镜像\",\"85\":\"19#更新镜像\",\"86\":\"19#生成镜像\",\"87\":\"19#镜像标签\",\"88\":\"19#镜像导入和导出\",\"89\":\"19#docker容器\",\"90\":\"19#容器启动\",\"91\":\"19#容器查看\",\"92\":\"19#容器再启动\",\"93\":\"19#容器停止和重启\",\"94\":\"19#后台模式与进入\",\"95\":\"19#容器导出和导入\",\"96\":\"19#强制删除容器\",\"97\":\"19#清理停止的容器\",\"98\":\"19#容器别名及操作\",\"99\":\"19#容器错误日志\",\"100\":\"19#docker仓库\",\"101\":\"20\",\"102\":\"20#hello-world容器样例\",\"103\":\"20#centos容器样例\",\"104\":\"21\",\"105\":\"21#docker-数据卷的特点和优势\",\"106\":\"21#创建和使用数据卷\",\"107\":\"21#_1-创建数据卷\",\"108\":\"21#_2-挂载数据卷到容器\",\"109\":\"21#_3-查看数据卷\",\"110\":\"21#_4-删除数据卷\",\"111\":\"21#数据卷的常见应用场景\",\"112\":\"21#使用-docker-compose-管理数据卷\",\"113\":\"21#总结\",\"114\":\"22\",\"115\":\"22#登录和退出\",\"116\":\"22#推送镜像\",\"117\":\"23\",\"118\":\"23#运行一个web应用\",\"119\":\"23#查看web应用容器\",\"120\":\"23#自定义网络端口映射\",\"121\":\"23#查看端口映射信息\",\"122\":\"23#停止web应用容器\",\"123\":\"23#重启web应用容器\",\"124\":\"23#删除web应用容器\",\"125\":\"24\",\"126\":\"25\",\"127\":\"26\",\"128\":\"26#简介\",\"129\":\"26#安装\",\"130\":\"26#基本用法\",\"131\":\"26#客户端\",\"132\":\"26#服务器\",\"133\":\"26#主要功能\",\"134\":\"26#参考资料\",\"135\":\"27\",\"136\":\"27#基础模块\",\"137\":\"27#数据结构和算法\",\"138\":\"27#并发编程\",\"139\":\"27#网络和io\",\"140\":\"27#数据序列化和编码\",\"141\":\"27#其他常用模块\",\"142\":\"27#总结\",\"143\":\"28\",\"144\":\"28#_1-读取操作\",\"145\":\"28#bufio-newreader\",\"146\":\"28#readstring\",\"147\":\"28#readbytes\",\"148\":\"28#readline\",\"149\":\"28#_2-写入操作\",\"150\":\"28#bufio-newwriter\",\"151\":\"28#writestring\",\"152\":\"28#write\",\"153\":\"28#_3-scanner\",\"154\":\"28#bufio-newscanner\",\"155\":\"28#自定义分隔符\",\"156\":\"28#_4-readwriter\",\"157\":\"28#bufio-newreadwriter\",\"158\":\"29\",\"159\":\"29#_1-切片-slice\",\"160\":\"29#_2-队列-queue\",\"161\":\"29#_3-堆-heap\",\"162\":\"29#_4-链表-list\",\"163\":\"29#解释示例代码\",\"164\":\"29#_5-环形链表-ring\",\"165\":\"29#解释示例代码-1\",\"166\":\"30\",\"167\":\"30#_1-crypto-md5\",\"168\":\"30#md5-sum\",\"169\":\"30#md5-new\",\"170\":\"30#_2-crypto-sha1\",\"171\":\"30#sha1-sum\",\"172\":\"30#sha1-new\",\"173\":\"30#_3-crypto-sha256\",\"174\":\"30#sha256-sum256\",\"175\":\"30#sha256-new\",\"176\":\"30#_4-crypto-aes\",\"177\":\"30#aes-newcipher\",\"178\":\"30#_5-crypto-rsa\",\"179\":\"30#生成-rsa-密钥对\",\"180\":\"30#加密和解密\",\"181\":\"30#_6-crypto-hmac\",\"182\":\"30#hmac-new-和-hmac-sum\",\"183\":\"30#_7-crypto-ecdsa\",\"184\":\"30#生成-ecdsa-密钥对\",\"185\":\"30#签名和验证\",\"186\":\"31\",\"187\":\"31#_1-读取-csv-文件\",\"188\":\"31#csv-newreader\",\"189\":\"31#read\",\"190\":\"31#_2-写入-csv-文件\",\"191\":\"31#csv-newwriter\",\"192\":\"31#writeall\",\"193\":\"31#_3-自定义分隔符\",\"194\":\"31#comma\",\"195\":\"31#_4-处理大文件\",\"196\":\"31#逐行读取和处理\",\"197\":\"31#_5-处理错误\",\"198\":\"31#自定义错误处理\",\"199\":\"31#_6-csv-数据解析到结构体\",\"200\":\"31#使用结构体标签\",\"201\":\"32\",\"202\":\"32#_1-json-编码\",\"203\":\"32#json-marshal\",\"204\":\"32#json-marshalindent\",\"205\":\"32#_2-json-解码\",\"206\":\"32#json-unmarshal\",\"207\":\"32#_3-使用-json-decoder-和-json-encoder\",\"208\":\"32#json-newdecoder\",\"209\":\"32#json-newencoder\",\"210\":\"32#_4-自定义-json-编码和解码\",\"211\":\"32#实现-json-marshaler-接口\",\"212\":\"32#实现-json-unmarshaler-接口\",\"213\":\"32#_5-处理嵌套和复杂结构\",\"214\":\"32#嵌套结构的编码和解码\",\"215\":\"33\",\"216\":\"33#_1-xml-编码\",\"217\":\"33#xml-marshal\",\"218\":\"33#xml-marshalindent\",\"219\":\"33#_2-xml-解码\",\"220\":\"33#xml-unmarshal\",\"221\":\"33#_3-使用-xml-decoder-和-xml-encoder\",\"222\":\"33#xml-newdecoder\",\"223\":\"33#xml-newencoder\",\"224\":\"33#_4-自定义-xml-编码和解码\",\"225\":\"33#自定义标签名称\",\"226\":\"33#嵌套结构的编码和解码\",\"227\":\"33#_5-处理复杂结构\",\"228\":\"33#使用-xml-rawtoken\",\"229\":\"33#使用-xml-startelement-和-xml-endelement\",\"230\":\"34\",\"231\":\"34#_1-解析命令行参数\",\"232\":\"34#_2-默认值和帮助信息\",\"233\":\"34#_3-非命令行参数\",\"234\":\"34#_4-自定义使用说明\",\"235\":\"34#总结\",\"236\":\"35\",\"237\":\"35#_1-格式化输出\",\"238\":\"35#_2-格式化占位符\",\"239\":\"35#_3-输入\",\"240\":\"35#_4-自定义格式化输出\",\"241\":\"35#_5-错误输出\",\"242\":\"35#_6-更多高级用法\",\"243\":\"35#总结\",\"244\":\"36\",\"245\":\"36#_1-http-服务器\",\"246\":\"36#创建一个简单的-http-服务器\",\"247\":\"36#使用路由器\",\"248\":\"36#_2-http-客户端\",\"249\":\"36#发起-get-请求\",\"250\":\"36#发起-post-请求\",\"251\":\"36#_3-自定义-http-客户端\",\"252\":\"36#使用自定义配置\",\"253\":\"36#_4-处理表单数据\",\"254\":\"36#解析表单数据\",\"255\":\"36#_5-中间件\",\"256\":\"36#创建简单的中间件\",\"257\":\"36#_6-处理静态文件\",\"258\":\"36#提供静态文件服务\",\"259\":\"36#_7-错误处理\",\"260\":\"36#返回自定义错误\",\"261\":\"37\",\"262\":\"37#_1-读取数据\",\"263\":\"37#io-reader\",\"264\":\"37#io-readfull\",\"265\":\"37#io-copy\",\"266\":\"37#_2-写入数据\",\"267\":\"37#io-writer\",\"268\":\"37#io-writestring\",\"269\":\"37#_3-缓冲读写\",\"270\":\"37#io-bufferedreader\",\"271\":\"37#io-bufferedwriter\",\"272\":\"37#_4-管道\",\"273\":\"37#io-pipe\",\"274\":\"37#_5-多路复用\",\"275\":\"37#io-multireader\",\"276\":\"37#io-multiwriter\",\"277\":\"37#_6-限制读取\",\"278\":\"37#io-limitreader\",\"279\":\"37#_7-计数读取\",\"280\":\"37#io-teereader\",\"281\":\"38\",\"282\":\"38#_1-基本日志记录\",\"283\":\"38#log-print\",\"284\":\"38#log-println\",\"285\":\"38#log-printf\",\"286\":\"38#_2-日志级别\",\"287\":\"38#log-fatal\",\"288\":\"38#log-fatalf\",\"289\":\"38#log-panic\",\"290\":\"38#log-panicf\",\"291\":\"38#_3-自定义日志记录器\",\"292\":\"38#log-new\",\"293\":\"38#_4-日志格式和标志\",\"294\":\"38#log-setflags\",\"295\":\"38#log-setprefix\",\"296\":\"38#_5-输出到不同的目标\",\"297\":\"38#log-setoutput\",\"298\":\"38#_6-日志记录器方法\",\"299\":\"38#logger-output\",\"300\":\"39\",\"301\":\"39#_1-常量\",\"302\":\"39#_2-基本数学函数\",\"303\":\"39#_3-三角函数\",\"304\":\"39#_4-指数和对数函数\",\"305\":\"39#_5-最大值和最小值\",\"306\":\"39#_6-随机数\",\"307\":\"40\",\"308\":\"40#_1-网络地址解析\",\"309\":\"40#_2-tcp-连接\",\"310\":\"40#_3-udp-连接\",\"311\":\"40#_4-网络接口\",\"312\":\"40#_5-ip-地址处理\",\"313\":\"40#_6-域名解析\",\"314\":\"40#_7-自定义-dialer\",\"315\":\"40#_8-错误处理\",\"316\":\"41\",\"317\":\"41#文件和目录操作\",\"318\":\"41#环境变量\",\"319\":\"41#进程操作\",\"320\":\"41#其他常用功能\",\"321\":\"42\",\"322\":\"42#_1-排序函数\",\"323\":\"42#_2-自定义排序\",\"324\":\"42#_3-排序稳定性\",\"325\":\"42#_4-其他排序函数\",\"326\":\"43\",\"327\":\"43#_1-将字符串转换为基本数据类型\",\"328\":\"43#_2-将基本数据类型转换为字符串\",\"329\":\"43#_3-其他常用功能\",\"330\":\"43#总结\",\"331\":\"44\",\"332\":\"44#_1-获取当前时间\",\"333\":\"44#time-now\",\"334\":\"44#_2-格式化和解析时间\",\"335\":\"44#format\",\"336\":\"44#parse\",\"337\":\"44#_3-时间操作\",\"338\":\"44#add\",\"339\":\"44#sub\",\"340\":\"44#adddate\",\"341\":\"44#_4-时间比较\",\"342\":\"44#before-after-equal\",\"343\":\"44#_5-定时器和计时器\",\"344\":\"44#time-sleep\",\"345\":\"44#time-newtimer\",\"346\":\"44#time-newticker\",\"347\":\"44#_6-时间戳\",\"348\":\"44#unix-unixnano\",\"349\":\"44#time-unix\",\"350\":\"44#_7-时间区和本地化\",\"351\":\"44#time-fixedzone\",\"352\":\"44#time-loadlocation\",\"353\":\"45\",\"354\":\"45#数组\",\"355\":\"45#声明数组\",\"356\":\"45#初始化数组\",\"357\":\"45#访问数组\",\"358\":\"45#作为参数\",\"359\":\"45#切片\",\"360\":\"45#声明切片\",\"361\":\"45#初始化切片\",\"362\":\"45#访问切片\",\"363\":\"45#作为参数-1\",\"364\":\"45#区别\",\"365\":\"45#数组-arr\",\"366\":\"45#切片-slice\",\"367\":\"45#示例比较\",\"368\":\"45#结论\",\"369\":\"46\",\"370\":\"46#背景\",\"371\":\"46#介绍\",\"372\":\"46#应用\",\"373\":\"46#结论\",\"374\":\"47\",\"375\":\"47#golang环境\",\"376\":\"47#开发工具\",\"377\":\"47#vscode\",\"378\":\"47#goland\",\"379\":\"48\",\"380\":\"48#错误接口\",\"381\":\"48#标准库中的错误处理\",\"382\":\"48#创建自定义错误\",\"383\":\"48#处理错误\",\"384\":\"48#错误链\",\"385\":\"49\",\"386\":\"49#函数\",\"387\":\"49#_1-函数定义与调用\",\"388\":\"49#_2-参数与返回值\",\"389\":\"49#_3-可变参数函数\",\"390\":\"49#_4-匿名函数\",\"391\":\"49#_5-闭包\",\"392\":\"49#_6-递归函数\",\"393\":\"49#_7-函数作为参数和返回值\",\"394\":\"49#_8-延迟执行-defer\",\"395\":\"49#_9-错误处理\",\"396\":\"49#方法\",\"397\":\"49#访问控制\",\"398\":\"50\",\"399\":\"50#开始之前\",\"400\":\"50#泛型函数\",\"401\":\"50#泛型类型\",\"402\":\"50#类型约束\",\"403\":\"50#多个类型参数\",\"404\":\"50#使用约束定义接口\",\"405\":\"50#泛型的优势\",\"406\":\"51\",\"407\":\"51#接口定义\",\"408\":\"51#接口实现\",\"409\":\"51#接口变量\",\"410\":\"51#空接口\",\"411\":\"51#接口断言\",\"412\":\"51#接口组合\",\"413\":\"52\",\"414\":\"52#if-语句\",\"415\":\"52#switch-语句\",\"416\":\"52#for-语句\",\"417\":\"52#range-关键字\",\"418\":\"52#select-语句\",\"419\":\"53\",\"420\":\"53#声明和初始化\",\"421\":\"53#操作map\",\"422\":\"53#并发安全\",\"423\":\"53#特殊情况nan\",\"424\":\"54\",\"425\":\"54#算术运算符\",\"426\":\"54#关系运算符\",\"427\":\"54#逻辑运算符\",\"428\":\"54#位运算符\",\"429\":\"54#赋值运算符\",\"430\":\"54#其他运算符\",\"431\":\"54#运算符的优先级\",\"432\":\"55\",\"433\":\"55#声明指针\",\"434\":\"55#获取变量地址\",\"435\":\"55#访问指针的值\",\"436\":\"55#作为参数\",\"437\":\"55#指针运算\",\"438\":\"55#空指针\",\"439\":\"55#指针的指针\",\"440\":\"55#指针数组\",\"441\":\"56\",\"442\":\"57\",\"443\":\"57#声明结构体\",\"444\":\"57#创建结构体实例\",\"445\":\"57#访问结构体成员\",\"446\":\"57#结构体作为参数\",\"447\":\"57#结构体标签\",\"448\":\"57#结构体标签解释\",\"449\":\"57#其他常见标签\",\"450\":\"57#空结构体\",\"451\":\"57#结构体的存储\",\"452\":\"58\",\"453\":\"58#数据类型\",\"454\":\"58#基本数据类型\",\"455\":\"58#复合数据类型\",\"456\":\"58#变量\",\"457\":\"58#常量\",\"458\":\"58#iota\",\"459\":\"59\",\"460\":\"59#并发安全-concurrency-safety\",\"461\":\"59#常见的并发安全技术\",\"462\":\"59#竞态条件-race-condition\",\"463\":\"59#解决竞态条件\",\"464\":\"59#使用原子操作\",\"465\":\"59#使用通道\",\"466\":\"59#总结\",\"467\":\"60\",\"468\":\"60#特性和概念\",\"469\":\"60#通道的创建\",\"470\":\"60#发送和接收数据\",\"471\":\"60#无缓冲通道-vs-带缓冲通道\",\"472\":\"60#无缓冲通道\",\"473\":\"60#带缓冲通道\",\"474\":\"60#关闭通道\",\"475\":\"60#使用通道的示例\",\"476\":\"60#select-语句\",\"477\":\"60#通道的使用场景\",\"478\":\"61\",\"479\":\"61#_1-工作池-worker-pool\",\"480\":\"61#_2-扇入-fan-in\",\"481\":\"61#_3-扇出-fan-out\",\"482\":\"61#_4-管道-pipeline\",\"483\":\"61#_5-多路复用-multiplexing\",\"484\":\"61#_6-生产者-消费者-producer-consumer\",\"485\":\"62\",\"486\":\"62#基本用法\",\"487\":\"62#创建上下文\",\"488\":\"62#传递上下文\",\"489\":\"62#取消上下文\",\"490\":\"62#超时上下文\",\"491\":\"62#截止时间上下文\",\"492\":\"62#带值上下文\",\"493\":\"62#总结\",\"494\":\"63\",\"495\":\"63#启动-goroutine\",\"496\":\"63#goroutine-的特性\",\"497\":\"63#同步和通信\",\"498\":\"63#创建通道\",\"499\":\"63#发送和接收\",\"500\":\"63#带缓冲的通道\",\"501\":\"63#示例代码\",\"502\":\"63#goroutines-和主程序\",\"503\":\"63#协程、线程、进程\",\"504\":\"63#进程-process\",\"505\":\"63#线程-thread\",\"506\":\"63#协程-coroutine\",\"507\":\"63#总结\",\"508\":\"64\",\"509\":\"64#go-内存模型概述\",\"510\":\"64#关键概念\",\"511\":\"64#happens-before\",\"512\":\"64#内存屏障\",\"513\":\"64#同步原语\",\"514\":\"64#互斥锁-mutex\",\"515\":\"64#读写锁-rwmutex\",\"516\":\"64#原子操作\",\"517\":\"64#通道-channels\",\"518\":\"64#内存模型规则\",\"519\":\"64#总结\",\"520\":\"65\",\"521\":\"66\",\"522\":\"66#select-语句的基本用法\",\"523\":\"66#示例代码\",\"524\":\"66#示例-1-从多个通道接收数据\",\"525\":\"66#示例-2-实现超时机制\",\"526\":\"66#示例-3-非阻塞的通道操作\",\"527\":\"66#select-语句的注意事项\",\"528\":\"66#高级用法\",\"529\":\"67\",\"530\":\"67#_1-锁-locks\",\"531\":\"67#_2-条件变量-condition-variables\",\"532\":\"67#_3-信号量-semaphores\",\"533\":\"67#_4-事件-events\",\"534\":\"67#_5-栅栏-barriers\",\"535\":\"67#_6-原子操作-atomic-operations\",\"536\":\"68\",\"537\":\"69\",\"538\":\"69#_1-什么是gin框架\",\"539\":\"69#_2-安装gin框架\",\"540\":\"69#_3-创建第一个gin项目\",\"541\":\"69#总结\",\"542\":\"70\",\"543\":\"70#_1-自定义中间件\",\"544\":\"70#_2-路由组中应用中间件\",\"545\":\"70#_3-处理跨域请求-cors\",\"546\":\"70#总结\",\"547\":\"71\",\"548\":\"72\",\"549\":\"72#get-参数\",\"550\":\"72#_1-普通参数\",\"551\":\"72#_2-数组参数\",\"552\":\"72#_3-map-参数\",\"553\":\"72#_4-结构体参数\",\"554\":\"72#post-参数\",\"555\":\"72#_1-json-数据\",\"556\":\"72#_2-表单数据\",\"557\":\"72#路径参数\",\"558\":\"72#文件上传\",\"559\":\"72#单文件\",\"560\":\"72#多文件\",\"561\":\"73\",\"562\":\"73#json\",\"563\":\"73#xml\",\"564\":\"73#html\",\"565\":\"73#纯文本\",\"566\":\"73#文件\",\"567\":\"73#自定义响应头\",\"568\":\"73#重定向\",\"569\":\"73#_1-临时重定向\",\"570\":\"73#_2-永久重定向\",\"571\":\"73#_3-内部重定向\",\"572\":\"73#响应类型列表\",\"573\":\"74\",\"574\":\"74#restful-api\",\"575\":\"74#基本路由\",\"576\":\"74#路由组-router-group\",\"577\":\"74#总结\",\"578\":\"75\",\"579\":\"75#http-会话的基本工作原理\",\"580\":\"75#gin-中的会话管理\",\"581\":\"75#cookie\",\"582\":\"75#_1-什么是-cookie\",\"583\":\"75#_2-cookie-的特性\",\"584\":\"75#_3-在-gin-中使用-cookie\",\"585\":\"75#session\",\"586\":\"75#_1-什么是-session\",\"587\":\"75#_2-session-的特性\",\"588\":\"75#_3-在-gin-中使用-session\",\"589\":\"75#cookie-和-session-的比较\",\"590\":\"75#使用第三方库管理会话示例\",\"591\":\"75#使用-gin-实现-jwt-会话控制示例\",\"592\":\"75#jwt-的结构\",\"593\":\"75#jwt-的工作流程\",\"594\":\"75#jwt-的优势\",\"595\":\"75#使用场景\",\"596\":\"75#总结\",\"597\":\"75#_1-安装依赖库\",\"598\":\"75#_2-示例代码\",\"599\":\"75#_3-示例说明\",\"600\":\"75#_4-使用示例\",\"601\":\"76\",\"602\":\"76#_1-加载模板文件\",\"603\":\"76#_2-定义路由和处理函数\",\"604\":\"76#_3-编写-html-模板文件\",\"605\":\"76#_4-渲染模板并传递数据\",\"606\":\"76#注意事项\",\"607\":\"77\",\"608\":\"78\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1],\"3\":[1],\"4\":[1],\"5\":[2],\"6\":[2,7],\"7\":[1,29],\"8\":[1,47],\"9\":[2,19],\"10\":[1,20],\"11\":[1,33],\"12\":[1,8],\"13\":[1,10],\"14\":[1,21],\"15\":[1,12],\"16\":[1,35],\"17\":[1,48],\"18\":[1,28],\"19\":[2],\"20\":[1,16],\"21\":[1,21],\"22\":[1,20],\"23\":[1,20],\"24\":[1,40],\"25\":[1,37],\"26\":[1,12],\"27\":[1,56],\"28\":[2],\"29\":[1,82],\"30\":[1],\"31\":[1,22],\"32\":[1,12],\"33\":[1,18],\"34\":[2],\"35\":[1,34],\"36\":[1,22],\"37\":[1,20],\"38\":[1,17],\"39\":[2,29],\"40\":[1],\"41\":[1],\"42\":[2],\"43\":[1,60],\"44\":[1,71],\"45\":[1,37],\"46\":[2,7],\"47\":[1,24],\"48\":[1,38],\"49\":[1,59],\"50\":[1,19],\"51\":[1,72],\"52\":[1,69],\"53\":[2,10],\"54\":[1,27],\"55\":[1,14],\"56\":[1,39],\"57\":[2],\"58\":[2,20],\"59\":[1,51],\"60\":[1,11],\"61\":[1,6],\"62\":[1,83],\"63\":[2,13],\"64\":[1,15],\"65\":[1,36],\"66\":[1,60],\"67\":[1,15],\"68\":[1,29],\"69\":[2],\"70\":[2,36],\"71\":[2,55],\"72\":[1,23],\"73\":[2,16],\"74\":[1],\"75\":[1,16],\"76\":[1,4],\"77\":[4,7],\"78\":[4,33],\"79\":[3,26],\"80\":[1,13],\"81\":[1,15],\"82\":[1,45],\"83\":[1,19],\"84\":[1,31],\"85\":[1,52],\"86\":[1],\"87\":[1,23],\"88\":[1,28],\"89\":[1,6],\"90\":[1,17],\"91\":[1,6],\"92\":[1,15],\"93\":[1,6],\"94\":[1,22],\"95\":[1,24],\"96\":[1,20],\"97\":[1,7],\"98\":[1,19],\"99\":[1,36],\"100\":[1,24],\"101\":[2,30],\"102\":[2,13],\"103\":[1,21],\"104\":[2,11],\"105\":[3,18],\"106\":[1],\"107\":[2,12],\"108\":[2,18],\"109\":[2,5],\"110\":[2,6],\"111\":[2,11],\"112\":[4,22],\"113\":[1,8],\"114\":[2,19],\"115\":[1,10],\"116\":[1,15],\"117\":[2,8],\"118\":[1,38],\"119\":[1,19],\"120\":[1,46],\"121\":[1,11],\"122\":[1,16],\"123\":[1,12],\"124\":[1,9],\"125\":[1],\"126\":[1],\"127\":[5],\"128\":[1,16],\"129\":[1,10],\"130\":[1],\"131\":[1,54],\"132\":[1,103],\"133\":[1,15],\"134\":[1,14],\"135\":[1,8],\"136\":[1,18],\"137\":[1,15],\"138\":[1,20],\"139\":[1,31],\"140\":[1,10],\"141\":[1,24],\"142\":[1,9],\"143\":[1,14],\"144\":[2],\"145\":[1,24],\"146\":[1,28],\"147\":[1,29],\"148\":[1,28],\"149\":[2],\"150\":[1,17],\"151\":[1,25],\"152\":[1,26],\"153\":[2],\"154\":[1,28],\"155\":[1,34],\"156\":[2],\"157\":[1,50],\"158\":[1,7],\"159\":[4,10],\"160\":[4,35],\"161\":[4,69],\"162\":[4,47],\"163\":[2,44],\"164\":[4,47],\"165\":[2,45],\"166\":[1,10],\"167\":[2],\"168\":[1,22],\"169\":[1,23],\"170\":[2],\"171\":[1,22],\"172\":[1,24],\"173\":[2],\"174\":[1,22],\"175\":[1,24],\"176\":[2],\"177\":[1,49],\"178\":[2],\"179\":[3,60],\"180\":[1,67],\"181\":[2],\"182\":[1,29],\"183\":[2],\"184\":[3,62],\"185\":[1,79],\"186\":[2,14],\"187\":[4],\"188\":[1,33],\"189\":[1,34],\"190\":[4],\"191\":[1,46],\"192\":[1,42],\"193\":[2],\"194\":[1,37],\"195\":[2],\"196\":[1,35],\"197\":[2],\"198\":[1,36],\"199\":[3],\"200\":[1,67],\"201\":[2,13],\"202\":[3],\"203\":[1,37],\"204\":[1,37],\"205\":[3],\"206\":[1,42],\"207\":[3],\"208\":[1,49],\"209\":[1,41],\"210\":[4],\"211\":[2,38],\"212\":[2,43],\"213\":[2],\"214\":[1,60],\"215\":[2,13],\"216\":[3],\"217\":[1,39],\"218\":[1,39],\"219\":[3],\"220\":[1,46],\"221\":[3],\"222\":[1,53],\"223\":[1,43],\"224\":[4],\"225\":[1,38],\"226\":[1,51],\"227\":[2],\"228\":[1,39],\"229\":[2,75],\"230\":[1,7],\"231\":[2,43],\"232\":[2,18],\"233\":[2,25],\"234\":[2,32],\"235\":[1,10],\"236\":[1,9],\"237\":[2,24],\"238\":[2,33],\"239\":[2,15],\"240\":[2,25],\"241\":[2,20],\"242\":[2,12],\"243\":[1,7],\"244\":[2,13],\"245\":[3],\"246\":[3,30],\"247\":[1,36],\"248\":[3],\"249\":[3,30],\"250\":[3,39],\"251\":[4],\"252\":[1,38],\"253\":[2],\"254\":[1,64],\"255\":[2],\"256\":[1,38],\"257\":[2],\"258\":[1,27],\"259\":[2],\"260\":[1,40],\"261\":[1,10],\"262\":[2],\"263\":[1,15],\"264\":[1,34],\"265\":[1,31],\"266\":[2],\"267\":[1,15],\"268\":[1,21],\"269\":[2],\"270\":[1,22],\"271\":[1,23],\"272\":[2],\"273\":[1,29],\"274\":[2],\"275\":[1,29],\"276\":[1,30],\"277\":[2],\"278\":[1,30],\"279\":[2],\"280\":[1,44],\"281\":[1,10],\"282\":[2],\"283\":[1,12],\"284\":[1,15],\"285\":[1,17],\"286\":[2],\"287\":[1,17],\"288\":[1,22],\"289\":[1,13],\"290\":[1,19],\"291\":[2],\"292\":[1,33],\"293\":[2],\"294\":[1,23],\"295\":[1,16],\"296\":[2],\"297\":[1,29],\"298\":[2],\"299\":[1,36],\"300\":[1,10],\"301\":[2,16],\"302\":[2,31],\"303\":[2,27],\"304\":[2,28],\"305\":[2,14],\"306\":[2,43],\"307\":[1],\"308\":[2,22],\"309\":[3,52],\"310\":[3,41],\"311\":[2,18],\"312\":[3,31],\"313\":[2,30],\"314\":[3,34],\"315\":[2,32],\"316\":[1,10],\"317\":[1,51],\"318\":[1,31],\"319\":[1,23],\"320\":[1,33],\"321\":[1,15],\"322\":[2,24],\"323\":[2,52],\"324\":[2,4],\"325\":[2,65],\"326\":[1,13],\"327\":[2,33],\"328\":[2,26],\"329\":[2,40],\"330\":[1,9],\"331\":[1,10],\"332\":[2],\"333\":[1,13],\"334\":[2],\"335\":[1,28],\"336\":[1,32],\"337\":[2],\"338\":[1,19],\"339\":[1,22],\"340\":[1,21],\"341\":[2],\"342\":[1,27],\"343\":[2],\"344\":[1,18],\"345\":[1,21],\"346\":[1,27],\"347\":[2],\"348\":[1,17],\"349\":[1,19],\"350\":[2],\"351\":[1,24],\"352\":[1,38],\"353\":[2,16],\"354\":[1,5],\"355\":[1,6],\"356\":[1,52],\"357\":[1,25],\"358\":[1,9],\"359\":[1,5],\"360\":[1,3],\"361\":[1,52],\"362\":[1,78],\"363\":[1,76],\"364\":[1,10],\"365\":[1,23],\"366\":[1,26],\"367\":[1,27],\"368\":[1,8],\"369\":[3],\"370\":[1,24],\"371\":[1,32],\"372\":[1,29],\"373\":[1,15],\"374\":[2,7],\"375\":[1,16],\"376\":[1,10],\"377\":[1,13],\"378\":[1,51],\"379\":[2,10],\"380\":[1,13],\"381\":[1,27],\"382\":[1,17],\"383\":[1,23],\"384\":[1,39],\"385\":[2,20],\"386\":[1],\"387\":[2,21],\"388\":[2,34],\"389\":[2,20],\"390\":[2,16],\"391\":[2,30],\"392\":[2,18],\"393\":[2,25],\"394\":[3,15],\"395\":[2,26],\"396\":[1,130],\"397\":[1,54],\"398\":[2,7],\"399\":[1,41],\"400\":[1,28],\"401\":[1,32],\"402\":[1,26],\"403\":[1,32],\"404\":[1,38],\"405\":[1,16],\"406\":[2,14],\"407\":[1,16],\"408\":[1,30],\"409\":[1,13],\"410\":[1,23],\"411\":[1,25],\"412\":[1,18],\"413\":[2],\"414\":[2,17],\"415\":[2,100],\"416\":[2,107],\"417\":[2,74],\"418\":[2,113],\"419\":[3,16],\"420\":[1,24],\"421\":[1,91],\"422\":[1,55],\"423\":[1,82],\"424\":[2],\"425\":[1,21],\"426\":[1,22],\"427\":[1,13],\"428\":[1,32],\"429\":[1,23],\"430\":[1,26],\"431\":[1,80],\"432\":[2,20],\"433\":[1,10],\"434\":[1,11],\"435\":[1,11],\"436\":[1,24],\"437\":[1,71],\"438\":[1,14],\"439\":[1,16],\"440\":[1,4],\"441\":[1],\"442\":[2,8],\"443\":[1,25],\"444\":[1,56],\"445\":[1,38],\"446\":[1,38],\"447\":[1,72],\"448\":[1,15],\"449\":[1,40],\"450\":[1,100],\"451\":[1,113],\"452\":[2],\"453\":[1,18],\"454\":[1,29],\"455\":[1,132],\"456\":[1,61],\"457\":[1,27],\"458\":[1,26],\"459\":[2,10],\"460\":[4,6],\"461\":[1,21],\"462\":[4,45],\"463\":[1,43],\"464\":[1,33],\"465\":[1,47],\"466\":[1,15],\"467\":[3,15],\"468\":[1,29],\"469\":[1,10],\"470\":[1,9],\"471\":[3],\"472\":[1,15],\"473\":[1,14],\"474\":[1,19],\"475\":[1,35],\"476\":[2,36],\"477\":[1,14],\"478\":[2,7],\"479\":[5,68],\"480\":[5,54],\"481\":[5,54],\"482\":[4,44],\"483\":[4,43],\"484\":[6,65],\"485\":[3,16],\"486\":[1],\"487\":[1,13],\"488\":[1,11],\"489\":[1,38],\"490\":[1,39],\"491\":[1,43],\"492\":[1,72],\"493\":[1,13],\"494\":[3,27],\"495\":[2,10],\"496\":[2,20],\"497\":[1,9],\"498\":[1,8],\"499\":[1,9],\"500\":[1,11],\"501\":[1,35],\"502\":[2,56],\"503\":[3,5],\"504\":[3,22],\"505\":[3,21],\"506\":[3,28],\"507\":[1,20],\"508\":[2,9],\"509\":[2,27],\"510\":[1],\"511\":[2,10],\"512\":[1,8],\"513\":[1,3],\"514\":[3,36],\"515\":[3,41],\"516\":[1,32],\"517\":[3,24],\"518\":[1,52],\"519\":[1,14],\"520\":[1],\"521\":[3,17],\"522\":[1,21],\"523\":[1,5],\"524\":[3,36],\"525\":[3,30],\"526\":[3,27],\"527\":[1,16],\"528\":[1,13],\"529\":[2,7],\"530\":[4,66],\"531\":[5,57],\"532\":[4,58],\"533\":[4,32],\"534\":[4,58],\"535\":[5,48],\"536\":[1],\"537\":[3],\"538\":[3,16],\"539\":[2,16],\"540\":[2,118],\"541\":[1,18],\"542\":[2,12],\"543\":[2,51],\"544\":[2,54],\"545\":[4,34],\"546\":[1,13],\"547\":[2],\"548\":[2],\"549\":[2,23],\"550\":[2,94],\"551\":[2,79],\"552\":[3,68],\"553\":[2,77],\"554\":[2,11],\"555\":[3,41],\"556\":[2,43],\"557\":[1,42],\"558\":[1,8],\"559\":[1,37],\"560\":[1,34],\"561\":[2,12],\"562\":[1,30],\"563\":[1,31],\"564\":[1,43],\"565\":[1,27],\"566\":[1,27],\"567\":[1,31],\"568\":[1,13],\"569\":[2,45],\"570\":[2,45],\"571\":[2,47],\"572\":[1,69],\"573\":[2],\"574\":[2,48],\"575\":[1,115],\"576\":[4,49],\"577\":[1,15],\"578\":[2,12],\"579\":[2,36],\"580\":[2,33],\"581\":[1],\"582\":[4,8],\"583\":[3,34],\"584\":[5,45],\"585\":[1],\"586\":[4,14],\"587\":[3,20],\"588\":[5,58],\"589\":[4,40],\"590\":[1,85],\"591\":[5,31],\"592\":[2,51],\"593\":[2,29],\"594\":[2,12],\"595\":[1,10],\"596\":[1,10],\"597\":[2,10],\"598\":[2,110],\"599\":[2,47],\"600\":[2,13],\"601\":[2,13],\"602\":[2,28],\"603\":[2,39],\"604\":[4,21],\"605\":[2,13],\"606\":[1,32],\"607\":[1,3],\"608\":[2]},\"averageFieldLength\":[1.6256157635467987,29.323328621219336],\"storedFields\":{\"0\":{\"h\":\"后端技术\"},\"1\":{\"h\":\"Golang\"},\"2\":{\"h\":\"常用工具\"},\"3\":{\"h\":\"社区生态\"},\"4\":{\"h\":\"语法核心\"},\"5\":{\"h\":\"Web 框架\"},\"6\":{\"h\":\"Git 创建版本库\",\"t\":[\"在 Git 上创建版本库有两种方式，一种是直接拷贝远程 Git 仓库到本地，另外一种是我们自己创建本地的版本库。\"]},\"7\":{\"h\":\"拷贝远程仓库\",\"t\":[\"拷贝远程仓库时我们需要知道远程仓库的URL地址，直接使用如下命令即可，默认是拷贝到当前目录下。\",\"git clone [远程仓库 URL] [名称]\",\"执行完上述步骤后，Git 会克隆远程仓库到本地，并在当前目录下创建一个与远程仓库同名的文件夹。\",\"git clone 命令会自动将远程仓库的所有分支和历史记录复制到本地，你可以使用其他 Git 命令（如 git checkout、git pull 等）在本地仓库进行操作。\",\"默认情况下，Git 会按照你提供的 URL 所指向的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。\"]},\"8\":{\"h\":\"创建本地仓库\",\"t\":[\"在当前执行目录下初始化仓库，即创建一个新的代码仓库，既可以在空目录下初始化，也可以在已有内容的目录下初始化。\",\"git init\",\"下面我们来创建一个 CoderMast-Git 的工作目录。\",\"创建 CoderMast-Git 文件夹\",\"mkdir CoderMast-Git\",\"可以使用ls -a 来查看该目录是否创建成功。\",\"进入该目录\",\"cd CoderMast-Git\",\"初始化仓库\",\"git init\",\"初始化完成后提示 Initialized empty Git repository in /Users/codermast/DevProjects/CoderMast-Git/.git/ ，会帮我们在当前目录下创建一个 .git 的文件夹，这个目录是隐藏的，我们可以使用 ls -a 来查看。\",\".git 这个子目录就是你的 Git 仓库了，所有有关你的此项目的所有内容和元数据都存放在这里。\",\"经过以上步骤，就创建好了一个本地工作仓库。\",\"注意\",\"如果你使用 Windows 系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。\"]},\"9\":{\"h\":\"Git 分支管理\",\"t\":[\"在 Git 中，分支是指向提交对象（commits）的可变指针。它们是一系列提交的引用，其中的每个提交都包含了一组文件的状态以及指向其父提交的指针。主要的分支通常是 master 或 main，其他分支可以基于主分支或其他分支创建。\",\"几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\",\"Git 分支实际上是指向更改快照的指针。\"]},\"10\":{\"h\":\"创建分支\",\"t\":[\"使用该指令可创建一个名为 branchname 的分支\",\"git branch <branchname>\",\"相关信息\",\"创建分支时，一定要先有一个分支，这个分支一般在 git init 时已经帮我们创建好了，一般名称为 main 或 master，创建的分支内容和当前所在的分支内容相同，因为是基于当前分支的分支，故一定和当前分支一致。\"]},\"11\":{\"h\":\"切换分支\",\"t\":[\"切换到已有分支\",\"git checkout <branchname>\",\"创建并切换分支\",\"一般情况下切换分支时需要先创建分支，然后再切换，但是为了提高效率，可以使用如下指令，一步增加并切换分支。\",\"git checkout -b <new-branch-name>\",\"切换到前一个分支\",\"git checkout -\",\"当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容，所以多个分支不需要多个目录。\",\"注意\",\"但是，需要注意的是，如果在切换分支之前对当前分支的工作目录做了一些修改，但没有提交这些更改，那么这些更改将会被暂存或者丢弃，而不会被应用到切换后的目标分支。只有在提交后，这些更改才会成为该分支的一部分，然后在切换到其他分支时，Git 才会自动更新工作目录以匹配目标分支的状态。\",\"总而言之，就是只会恢复到最后一次提交时候的工作目录状态。\"]},\"12\":{\"h\":\"删除分支\",\"t\":[\"git branch -b <branchname>\",\"该指令的功能是删除名为 branchname 的分支。\"]},\"13\":{\"h\":\"查看分支\",\"t\":[\"查看本地分支\",\"git branch\",\"查看所有分支\",\"git branch -a\",\"在未加任何参数的时候，默认查看所有的分支。 带 * 的分支是当前分支。\"]},\"14\":{\"h\":\"合并分支\",\"t\":[\"git merge\",\"可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。\",\"分支合并说明\",\"对于分支合并，举一个简单的例子。目前一个项目内有 main 和 dev 两个分支，现在需要将 dev 分支合并到 main 分支，即将 dev 中修改和添加的功能加入到 main 分支，这时需要先切换到 main 分支，然后执行 git merge dev 指令。\"]},\"15\":{\"h\":\"合并冲突\",\"t\":[\"为什么会发生冲突？\",\"当两个分支对同一个文件进行操作，当这两个分支合并的时候，Git 陷入了两难境地，并不知道以哪个分支为准，于是就发生了冲突。\",\"分支的合并并不是简单的文件添加、移除等操作，其 Git 也会合并修改。\"]},\"16\":{\"h\":\"冲突发生\",\"t\":[\"当在合并分支时，提示如下信息，即发生了合并冲突\",\"Auto-merging hello.txt CONFLICT (content): Merge conflict in hello.txt Automatic merge failed; fix conflicts and then commit the result.\",\"此时信息告诉我们在合并 hello.txt 文件时发生了冲突，处理冲突以后提交结果，这时处于合并的中间态。\",\"合并中间态\",\"即能够成功合并的文件全部合并，发生冲突的文件产生冲突。\",\"与事务有所区别，事务是一旦发生错误，则全部回滚。而合并中间态是尽可能的进行合并，合并不了的抛出。\"]},\"17\":{\"h\":\"冲突查看\",\"t\":[\"当冲突发生后可以使用 git status 来查看冲突信息\",\"“You have unmerged paths”：我们现在正处于合并的中间状态，有一些没有合并的文件；\",\"“Changes to be committed deleted: test.txt”：要提交的更改已经被删除\",\"“Unmerged paths”：未合并的路径，可以看到 hello.txt 没有被合并，因为两个分支都修改了它\",\"现在我们查看冲突，用编辑器打开没有被合并的文件，查看其内容会发现（可以使用vim查看，也可以使用 cat <filename>）\",\"里面多了三行我们看不懂的记号：\",\"<<<<<<< HEAD ======= >>>>>>> dev\",\"<<<<<<< HEAD和=======之间的内容：是 main 分支修改的内容（准确来说是HEAD指针指向的分支修改的内容，一般是指当前使用的分支）；\",\"=======和>>>>>>> dev 之间的内容：是 dev 分支修改的内容；\",\"分割线之外的内容：是两个分支都没有改动的内容。\"]},\"18\":{\"h\":\"冲突解决\",\"t\":[\"解决冲突的本质其实就是 Git 把这个两难问题的决定权交给我们，需要我们对冲突文件进行操作，主要有以下步骤：\",\"编辑冲突文件，决定要保留的内容。\",\"git add 将冲突文件添加到暂存区\",\"git commit 提交\",\"这里我们编辑后的内容，Git 会原封不动的提交，因为 Git 认为我们已经成功的解决了冲突。一般情况下都会删除这三条线，保留我们所需要的文本即可。\",\"另外，常常遇到当冲突发生后，其实是我们自己没有做好控制，这时需要撤回合并，即冲突发生后退出合并的中间状态。\",\"git merge --abort\",\"该指令会回到分支合并之前的状态，即成功合并的部分文件也会进行回退。\"]},\"19\":{\"h\":\"Git 仓库内容操作\"},\"20\":{\"h\":\"添加文件到暂存区\",\"t\":[\"使用如下指令将工作区的文件添加到暂存区，告诉 Git 在下次 commit 时哪些文件做出了修改。\",\"commit 指令详看后续\",\"添加一个或多个文件到暂存区：\",\"git add [file1] [file2] ...\",\"添加指定目录到暂存区\",\"git add [dir]\",\"添加当前目录下的所有文件到暂存区\",\"git add .\"]},\"21\":{\"h\":\"查看仓库状态\",\"t\":[\"在使用添加指令向暂存区添加文件后，可以使用如下指令来查看仓库当前状态，可以查看在上次提交之后是否对文件有修改。\",\"git status\",\"该命令显示如下信息：\",\"当前分支的名称。\",\"当前分支与远程分支的关系（例如，是否是最新的）。\",\"未暂存的修改：显示已修改但尚未使用 git add 添加到暂存区的文件列表。\",\"未跟踪的文件：显示尚未纳入版本控制的新文件列表。\",\"根据该指令通常可以判断当前工作目录中的文件状态，并采取适当的操作。\",\"可以加上 -s 参数来获取简短的输出信息\",\"git status -s\"]},\"22\":{\"h\":\"比较文件的不同\",\"t\":[\"当工作区的内容提交到暂存区后，对工作区文件做出了修改，这时我们如果想对比具体修改了哪些部分，可以使用如下指令\",\"查看文件 file 工作区和暂存区的差别\",\"git diff [file]\",\"显示暂存区和上一次提交 commit 的差别\",\"# 两种写法均可 git diff --cached [file] git diff --staged [file]\",\"显示两次提交之间的差异\",\"git diff [first-branch]...[second-branch]\"]},\"23\":{\"h\":\"提交暂存区到本地仓库\",\"t\":[\"前面使用 git add 指令将工作区文件添加到暂存区，但并没有实质的将文件添加到本地仓库，可以使用如下指令将文件从暂存区添加到本地仓库。\",\"提交暂存区中所有文件到本地仓库\",\"git commit -m [message]\",\"其中 message 是本次提交的一些备注信息。\",\"提交暂存区的指定文件到本地仓库\",\"git commit [file1] [file2] ... -m [-a] [message]\",\"这里如果使用了 -a 参数，就代表直接将工作区文件提交到本地仓库。\"]},\"24\":{\"h\":\"回退版本\",\"t\":[\"常常在项目版本控制的过程中，我们无意的提交了一些还尚未完成的版本，这时就需要使用到版本回退，使用如下指令可以指定退回某一次提交的版本，语法如下所示\",\"git reset [--soft | --mixed | --hard] [HEAD]\",\"--mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。\",\"`git reset [HEAD]`\",\"--soft 参数用于回退到某个版本：\",\"git reset --soft HEAD\",\"--hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\",\"git reset --hard HEAD\",\"警告\",\"谨慎使用 –-hard 参数，它会删除回退点之前的所有信息。\",\"HEAD 说明\",\"HEAD 表示当前版本\",\"HEAD^ 上一个版本\",\"HEAD^^ 上上一个版本\",\"HEAD^^^ 上上上一个版本\",\"HEAD~0 表示当前版本\",\"HEAD~1 上一个版本\",\"HEAD^2 上上一个版本\",\"HEAD^3 上上上一个版本\"]},\"25\":{\"h\":\"删除暂存区和工作区文件\",\"t\":[\"git rm 命令用于删除文件。\",\"如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。\",\"将文件从暂存区和工作区中删除\",\"git rm [-f] <file>\",\"如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f。\",\"仅将文件从暂存区删除，而保留工作区\",\"git rm --cached <file>\",\"该指令把文件从暂存区域移除，但仍然保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可\",\"递归删除【与Linux中类似】\",\"可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件\",\"git rm –r [dir]\",\"该语句会删除 dir 目录下的所有文件和子目录。\"]},\"26\":{\"h\":\"移动或重命名工作区文件\",\"t\":[\"移动或重命名一个文件、目录或软连接\",\"git mv [file] [newfile]\",\"如果新文件名已经存在，但还是要重命名它，可以使用 -f 参数：\",\"git mv -f [file] [newfile]\"]},\"27\":{\"h\":\"恢复或撤销文件的更改\",\"t\":[\"该命令作用包括还原文件到最新提交的状态、丢弃未暂存的更改、丢弃已暂存但未提交的更改等。\",\"还原文件到最新提交的状态\",\"git restore <file>\",\"该命令可以将指定文件 <file> 恢复到最新的提交状态，丢弃所有未提交的更改\",\"还原文件到暂存区的状态\",\"如果你已经使用 git add 将文件添加到暂存区，但希望撤销这些更改，可以使用这个命令：\",\"git restore --staged <file>\",\"以上命令将文件 <file> 恢复到暂存区的状态，但不影响工作目录中的文件。\",\"还原全部更改\",\"以下命令将还原所有未提交的更改，包括工作目录和暂存区的更改：\",\"git restore .\",\"使用这个命令要谨慎，因为它会清除所有未提交的修改。\",\"还原文件到指定提交的状态\",\"如果你想将文件 <file> 恢复到特定提交 <commit> 的状态，可以使用以下命令：\",\"git restore --source=<commit> <file>\",\"这个命令在需要查看历史状态或将文件还原到历史版本时非常有用。\",\"交互式还原\",\"以下命令允许你以交互方式选择要还原或保留的更改：\",\"git restore -i\",\"执行这个命令它会打开一个交互式界面，让你选择如何处理每个更改。\",\"git restore 的目标是提供一种更直观、易于理解的方式来管理文件的状态，它的引入使得 Git 用户能够更容易地处理不同阶段的更改，从而提高了工作流的效率。\",\"注意\",\"git restore 是 Git 2.23 版本引入的一个命令，如果你使用的是较早版本的 Git，可能无法使用 git restore 命令，但你仍然可以使用 git checkout 等命令来进行类似的操作。\"]},\"28\":{\"h\":\"Git 介绍和安装\"},\"29\":{\"h\":\"Git介绍\",\"t\":[\"Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\",\"Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\",\"官网地址为：https://git-scm.com/\",\"Git特点\",\"优点：\",\"适合分布式开发，强调个体；\",\"公共服务器压力和数据量都不会太大；\",\"速度快、灵活；\",\"任意两个开发者之间可以很容易的解决冲突；\",\"离线工作。\",\"缺点：\",\"代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息；\",\"权限控制不友好；如果需要对开发者限制各种权限的建议使用SVN。\",\"SVN和Git都是版本控制系统，但它们有以下区别\",\"分布式 vs 集中式：Git 是一种分布式版本控制系统，而 SVN 是一种集中式版本控制系统。在 Git 中，每个开发者都拥有本地代码库的完整副本，可以离线工作并在不同的工作流程之间自由转换。而在 SVN 中，所有开发者共享同一个中央代码库，并且需要有网络连接才能进行版本控制操作。\",\"分支管理：Git 在分支管理方面比 SVN 更加强大和灵活。Git 的分支非常轻量级，创建和合并分支也很容易，因此可以轻松实现多人协作和并行开发。而在 SVN 中，分支比较重量级（即创建和合并分支需要花费相对更多的时间和资源），因此往往只用于重要的版本分支。\",\"版本号：Git 使用 SHA-1 哈希值来标识每个提交，而 SVN 采用递增的数字版本号来标识每个提交。SHA-1 哈希值保证了每个提交的唯一性，而递增版本号则简化了版本控制过程。\",\"整体性：由于 SVN 是一种集中式版本控制系统，因此所有数据都存储在中央代码库中。如果中央代码库损坏或丢失，可能会导致数据丢失或无法恢复。而 Git 是一种分布式版本控制系统，每个开发者都拥有完整的代码库副本，保证了代码的整体性和可靠性。\",\"性能：Git 比 SVN 更快，特别是在处理大型仓库、分支合并以及比较代码差异时。Git 使用基于内容的哈希算法来检测文件是否修改，而 SVN 则需要检查文件的元数据（如时间戳和文件大小）来确定是否修改。\"]},\"30\":{\"h\":\"Git安装\"},\"31\":{\"h\":\"MacOS\",\"t\":[\"Homebrew安装：执行 brew install git 即可开始安装。\",\"MacPorts安装【MacOS官方维护】：执行 sudo port install git 即可安装\",\"下载安装：下载 https://sourceforge.net/projects/git-osx-installer/ 运行安装程序后，点击下一步即可安装。\"]},\"32\":{\"h\":\"Linux\",\"t\":[\"Debian/Ubuntu：执行 apt-get install git 即可安装\",\"Arch Linux：执行 pacman -S git 即可安装\"]},\"33\":{\"h\":\"Windows安装\",\"t\":[\"官方安装：\",\"访问官方下载页面\",\"https://git-scm.com/download/win\",\"选择自己电脑适配的版本\",\"打开安装程序\",\"一直下一步即可完成安装\",\"其他系统可参考官方下载文档\",\"https://git-scm.com/book/zh/v2/起步-安装-Git\"]},\"34\":{\"h\":\"Git 远程管理\"},\"35\":{\"h\":\"远程仓库操作\",\"t\":[\"对于远程仓库的操作，Git 提供了 git remote 命令，用于用于管理 Git 仓库中的远程仓库。\",\"以下是 git remote 命令的常见用法：\",\"列出当前仓库中已配置的远程仓库\",\"git remote\",\"列出当前仓库中已配置的远程仓库，并显示它们的 URL\",\"git remote -v\",\"添加一个新的远程仓库。指定一个远程仓库的名称和 URL，将其添加到当前仓库中\",\"git remote add <remote_name> <remote_url>\",\"将已配置的远程仓库重命名。\",\"git remote rename <old_name> <new_name>\",\"从当前仓库中删除指定的远程仓库\",\"git remote remove <remote_name>\",\"修改指定远程仓库的 URL\",\"git remote set-url <remote_name> <new_url>\",\"显示指定远程仓库的详细信息，包括 URL 和跟踪分支。\",\"git remote show <remote_name>\"]},\"36\":{\"h\":\"从远程获取代码库\",\"t\":[\"从远程仓库获取代码库到本地需要两步，首先获取远程分支数据，然后将本地分支没有的数据进行合并。\",\"获取远程分支数据\",\"git fetch <remote-branch-name>\",\"该指令是获取远程分支 remote-branch-name 中本地分支没有的数据，仅限于获取，对本地分支不做任何更改。\",\"合并远程分支数据到本地\",\"git merge [remote-branch-name]/[local-branch-name]\",\"该指令是在获取远程分支数据后，将本地分支没有的数据合并到本地分支，即使用远程数据覆盖本地数据。\"]},\"37\":{\"h\":\"下载远程代码并合并\",\"t\":[\"Git 上提供了 git pull 命令，用于从远程获取代码并合并本地的版本。\",\"git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写。\",\"git pull <远程主机名> <远程分支名>:<本地分支名>\",\"该指令的功能就是将远程主机上的远程分支拉过来，与本地分支进行合并。\",\"如果是远程分支和当前分支进行合并，则可以省略本地分支名。\",\"git pull <远程主机名> <远程分支名>\"]},\"38\":{\"h\":\"上传远程代码并合并\",\"t\":[\"Git 上提供了 git push 命令，用于从将本地的分支版本上传到远程并合并。\",\"git push <远程主机名> <本地分支名>:<远程分支名>\",\"如果本地分支名与远程分支名相同，则可以省略冒号和远程分支名\",\"git push <远程主机名> <本地分支名>\",\"如果本地分支和远程分支内容有差异，但又要强制推送可以使用 --force 参数\",\"git push --force <远程主机名> <本地分支名>\",\"删除远程分支\",\"git push <远程主机名> --delete <本地分支名>\"]},\"39\":{\"h\":\"Git 工作原理\",\"t\":[\"Workspace：工作区\",\"Index / Stage：暂存区\",\"Repository：仓库区（或本地仓库）\",\"Remote：远程仓库\",\"Git 一般的工作原理为：\",\"克隆 Git 资源或创建版本库为本地工作区 workspace\",\"在本地工作区上进行二次创作\",\"将创作后的内容 add 添加到 index 暂存区\",\"将 index 暂存区的内容 commit 提交到仓库区 repository\",\"将本地仓库区的内容 push 推送到远程仓库 remote\"]},\"40\":{\"h\":\"Git\"},\"41\":{\"h\":\"目录\"},\"42\":{\"h\":\"Docker - 入门基础\"},\"43\":{\"h\":\"Docker架构\",\"t\":[\"Docker 使用的是客户端-服务端（C/S）架构模式，使用远程 API 来管理和创建 Docker 容器。\",\"Docker 客户端与 Docker 守护进程，负责构建、运行和 分发 Docker 容器。Docker 客户端和守护程序可以 在同一系统上运行，或者您可以将 Docker 客户端连接到远程 Docker 守护进程。Docker 客户端和守护程序使用 REST API 通过 UNIX 进行通信 套接字或网络接口。另一个 Docker 客户端是 Docker Compose， 这样，您就可以使用由一组容器组成的应用程序。\",\"Docker客户端：可以是基于命令行的 Docker 客户端，也可以是基于图形化界面的 Docker 应用。\",\"Docker服务端：一个运行 Docker 服务的机器，可以是本地主机，也可以是远程的服务器。\",\"Docker守护进程：Docker 守护程序 （） 侦听 Docker API 请求并管理 Docker 对象，例如映像、容器、网络和卷。守护进程也可以 与其他守护进程通信以管理 Docker 服务。\",\"Docker桌面：是指在 Windows、Mac、Linux环境中易于安装，可视化构建和共享容器的应用程序。\",\"Docker 的架构和 Redis 的几乎相同。\"]},\"44\":{\"h\":\"Docker镜像加速\",\"t\":[\"Docker 安装好之后，在使用时我们需要拉取 Docker 镜像，这些 Docker 镜像存储在国外的 DockerHub 中，在国内访问不稳定，故此 Docker 官方和国内许多服务商提供了国内的加速器服务。\",\"Docker官方：https://registry.docker-cn.com\",\"阿里云：https://help.aliyun.com/document_detail/60750.html\",\"网易：http://hub-mirror.c.163.com\",\"USTC：https://docker.mirrors.ustc.edu.cn\",\"七牛云：https://reg-mirror.qiniu.com\",\"这里以 Docker 官方提供的国内加速服务为样例，进行配置教程，其他服务商的配置同理。\",\"命令行配置\",\"对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\",\"之后重新启动服务\",\"sudo systemctl daemon-reload sudo systemctl restart docker\",\"可视化界面配置\",\"在设置中的 Docker Engine 内，插入如下配置即可。\",\"\\\"registry-mirrors\\\":[ \\\"https://registry.docker-cn.com\\\" ]\",\"插入，保存后，需要重启才能够生效。\",\"检查镜像是否生效\",\"docker info\",\"Registry Mirrors: https://registry.docker-cn.com/\",\"只要出现如上的镜像链接，就是已经配置成功了。\"]},\"45\":{\"h\":\"样例剖析\",\"t\":[\"提示\",\"对上一节中的 centos 实例进行分析\",\"Docker 允许在容器内运行应用程序，使用 docker run 命令来在容器内运行一个应用程序。这里同样是个Hello World，不同在于它是在容器内部运行的。\",\"docker run centos:latest /bin/echo \\\"Hello World\\\"\",\"我们看下各个参数的含义：\",\"docker： Docker 的二进制执行文件。\",\"run： 与前面的 docker 组合来运行一个容器。\",\"centos:latest：指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\",\"/bin/echo \\\"Hello world\\\"： 在启动的容器里执行的命令以上命令。\",\"完整的意思可以解释为：Docker 以 centos 最新的（默认是latest) 镜像创建一个新容器，然后在容器里执行 bin/echo \\\"Hello world\\\"，然后输出结果。\"]},\"46\":{\"h\":\"Docker - Compose\",\"t\":[\"在部署应用时，常常使用到不止一个容器，那么在部署容器的时候就需要一个一个进行部署，这样的部署过程也相对来说比较繁琐复杂，也容易出问题，那么有没有一种更为简单的方法呢？\"]},\"47\":{\"h\":\"Compose简介\",\"t\":[\"Compose 是用于定义和运行多容器 Docker 应用程序的工具。Docker Compose 通过一个单独的 docker-compose.yml 模板文件（YAML格式）来定义一组相关联的应用容器，帮助我们实现多个相关联的 Docker 容器的快速部署。\",\"Compose 使用的三个步骤：\",\"使用 Dockerfile 定义应用程序的环境。\",\"使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\",\"最后，执行 docker-compose up 命令来启动并运行整个应用程序。\"]},\"48\":{\"h\":\"Compose安装\",\"t\":[\"Linux：执行以下指令即可安装（最新版替换V后面的版本号即可）\",\"$ sudo curl -L \\\"https://github.com/docker/compose/releases/download/v2.24.3/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose\",\"MacOS：Mac 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Mac 用户不需要单独安装 Compose。\",\"Windows：Windows 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Windows 用户不需要单独安装 Compose。\"]},\"49\":{\"h\":\"Compose样例\",\"t\":[\"version : \\\"3.7\\\" services: app: image: node:18-alpine command: sh -c \\\"yarn install && yarn run dev\\\" ports: - 127.0.0.1:3000:3000 working_dir: /app volumes: - ./:/app web: image: nginx ports: - \\\"80:80\\\" db: image: postgres environment: POSTGRES_DB: example\",\"在该样例中我们定义了 3 个服务，app、web 和 db。\",\"app 服务使用到了 node:18-alpine 会执行一条 Shell 指令，并且进行了端口映射，配置了工作目录，配置了卷。\",\"web 服务使用到了 nginx 镜像，并将容器的 80 端口，映射到宿主机的 80 端口。\",\"db 服务使用了 postgres 镜像，并设置了一个环境变量。\",\"Docker Compose 的配置本质上就是把部署 Docker 容器的过程集中管理起来，方便用户部署和后续维护。核心就是将 Docker 命令转换为 Yaml 文件。\"]},\"50\":{\"h\":\"Compose基本命令\",\"t\":[\"使用Docker-Compose的常见命令包括：\",\"docker-compose up：启动并运行整个应用。\",\"docker-compose down：停止并移除容器、网络、卷和镜像。\",\"docker-compose build：构建或重建服务。\",\"docker-compose logs：查看服务的日志输出。 这些命令为 Docker-Compose 的日常使用提供了基础。\"]},\"51\":{\"h\":\"Compose文件结构\",\"t\":[\"理解docker-compose.yml\",\"docker-compose.yml文件是Docker-Compose项目的核心，它使用YAML格式来描述和配置您的应用服务。这个文件不仅定义了所使用的服务，还包括了这些服务的配置，例如使用的Docker镜像、端口映射、依赖关系、环境变量等。\",\"基本组件\",\"服务（Services）：服务代表一个容器。在docker-compose.yml中，您可以定义一个或多个服务，每个服务可以使用不同的镜像。\",\"网络（Networks）：Docker-Compose允许您定义和使用自己的网络。\",\"卷（Volumes）：卷用于数据持久化和共享数据。您可以定义一个卷，并将其挂载到一个或多个容器中。\",\"文件示例\",\"下面是一个更复杂的docker-compose.yml文件示例，其中包含了网络和卷的定义：\",\"version: '3' services: web: image: nginx ports: - \\\"80:80\\\" networks: - webnet db: image: postgres environment: POSTGRES_DB: example volumes: - db-data:/var/lib/postgresql/data networks: - webnet volumes: db-data: networks: webnet:\",\"在这个示例中，我们创建了一个名为webnet的网络，并且让web和db服务都连接到这个网络。我们还定义了一个卷db-data用于持久化数据库的数据。\",\"配置项解析\",\"环境变量（Environment）：可以设置环境变量，为服务配置必要的参数。\",\"端口映射（Ports）：将容器内的端口映射到宿主机的端口，以便外部访问。\",\"依赖关系（Depends On）：可以指定服务启动的顺序。\"]},\"52\":{\"h\":\"Compose高级应用\",\"t\":[\"网络配置\",\"在Docker-Compose中，您可以自定义网络来实现服务间的隔离或通信。例如，您可以创建一个只供数据库和后端服务使用的内部网络。以下是一个网络配置的例子：\",\"version: '3' services: web: image: nginx networks: - front-end api: image: my-api networks: - front-end - back-end db: image: postgres networks: - back-end networks: front-end: back-end:\",\"在这个配置中，web和api服务都连接到front-end网络，而db和api服务则连接到back-end网络。\",\"卷挂载和数据持久化 卷用于数据持久化和服务间共享数据。在Docker-Compose中，您可以定义卷并将其挂载到服务所需的位置。例如：\",\"version: '3' services: db: image: postgres volumes: - db-data:/var/lib/postgresql/data volumes: db-data:\",\"在这个例子中，我们定义了一个名为db-data的卷，并将其挂载到数据库服务的数据目录。\",\"环境变量和配置文件 Docker-Compose允许您通过环境变量或.env文件来配置服务。这使得您的配置更加灵活，也更适合不同的环境。例如：\",\"version: '3' services: web: image: nginx ports: - \\\"${WEB_PORT}:80\\\"\",\"您可以在.env文件中定义WEB_PORT变量，Docker-Compose会在运行时使用该值。\",\"扩展和复用配置\",\"通过使用extends关键字，您可以在多个项目中重用配置。这样，您可以为不同的环境（如开发、测试和生产）保持共同的基础配置，同时覆盖特定环境的设置。\",\"使用Docker-Compose进行部署\",\"虽然Docker-Compose主要用于开发环境，但它也可以用于生产环境的部署。通过适当的配置和环境准备，Docker-Compose可以作为一个简单的部署工具。\"]},\"53\":{\"h\":\"Docker - 容器互联\",\"t\":[\"在上一个章节中我们学习了 Docker 容器的端口映射，可以将 Docker 容器和本地以及网络中的端口进行连接起来。\",\"但端口映射并不是唯一把 Docker 连接到另一个容器的方法，Docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。\"]},\"54\":{\"h\":\"容器命名\",\"t\":[\"在创建一个容器的时候，Docker 会自动为其进行命名，也可以使用 --name 来自定义 Docker 容器的名称。\",\"创建时自定义名称\",\"docker run -d -P --name codermast training/webapp python app.py\",\"创建后修改名称\",\"docker rename focused_boyd codermast1\",\"其中 focused_boyd 为原容器名，codermast1 为要自定义的名称。\"]},\"55\":{\"h\":\"创建网络\",\"t\":[\"docker network create -d bridge codermast-test-net\",\"-d：参数指定 Docker 网络类型，有 bridge、overlay。\"]},\"56\":{\"h\":\"连接容器\",\"t\":[\"创建一个容器并连接到该网络\",\"docker run -itd --name codermast_test_net1 --network codermast-test-net ubuntu:20.04 /bin/bash\",\"创建另一个容器并连接到该网络\",\"docker run -itd --name codermast_test_net2 --network codermast-test-net ubuntu:20.04 /bin/bash\",\"验证该网络下的两个容器建立了联系\",\"使用 ping 指令检测，在执行之前请确保安装了该指令工具，如果未安装，执行下列指令安装即可。\",\"apt-get update apt install iputils-ping\",\"这样，codermast_test_net1 容器和 codermast_test_net2 容器建立了互联关系。\",\"如果有多个容器之间需要互相连接，推荐使用 Docker Compose，在后续的章节中会进行详细说明，这里不再赘述。\"]},\"57\":{\"h\":\"Docker - Dockerfile\"},\"58\":{\"h\":\"什么是Dockerfile？\",\"t\":[\"DockerFile 是用于构建 Docker 镜像的文本文件。Docker 是一种容器化平台，允许开发者将应用程序及其依赖项打包到一个可移植的容器中，以确保在不同环境中的一致性和可移植性。\",\"DockerFile 包含一系列指令，这些指令描述了如何构建 Docker 镜像。每个指令都对应一个操作，例如安装软件包、设置环境变量、复制文件等。当 Docker 引擎读取 DockerFile 时，它会逐行执行其中的指令，以最终创建一个镜像。\"]},\"59\":{\"h\":\"示例说明\",\"t\":[\"在空目录下，新建一个名为 Dockerfile 的文件，并在其中添加如下内容。\",\"# 使用官方的基础镜像 FROM ubuntu:latest # 设置工作目录 WORKDIR /app # 复制当前目录下的所有文件到工作目录 COPY . . # 安装依赖 RUN apt-get update && apt-get install -y \\\\ python3 \\\\ python3-pip # 安装应用程序依赖 RUN pip3 install -r requirements.txt # 暴露应用程序的端口 EXPOSE 5000 # 定义启动命令 CMD [\\\"python3\\\", \\\"app.py\\\"]\",\"在上面的示例中：\",\"FROM 指定了基础镜像，即用作构建的起点的操作系统和环境。\",\"WORKDIR 设置了工作目录，即后续指令执行时的当前工作目录。\",\"COPY 将当前目录下的所有文件复制到容器的工作目录。\",\"RUN 执行命令，例如更新包列表、安装软件等。\",\"EXPOSE 声明应用程序将监听的端口。\",\"CMD 定义了容器启动时要执行的默认命令。\",\"通过编写 DockerFile，开发者可以将应用程序的构建过程和运行时环境的配置以代码的方式进行描述，实现了可重复、可移植和可自动化的容器化部署。\"]},\"60\":{\"h\":\"镜像结构\",\"t\":[\"Docker File 文件中的每条指令都会创建一个新的镜像层，当本地环境中已经下载好了某些镜像，那么会直接使用这些镜像，不会重复下载，提高了效率。\",\"但是过多的层也会导致镜像过大，可以适当进行简化，仅在关键部分进行分层。\"]},\"61\":{\"h\":\"编写规则\",\"t\":[\"每条保留字指令都必须为大写字母且后面要跟随至少一个参数\",\"指令顺序执行，遵循从上到下原则\",\"#表示注释\",\"每条指令都会创建一个新的镜像层，并对镜像进行提交\"]},\"62\":{\"h\":\"指令汇总\",\"t\":[\"FROM： 指定基础镜像，作为构建的起点。\",\"FROM ubuntu:latest\",\"WORKDIR： 设置工作目录，后续指令将在该目录下执行。\",\"WORKDIR /app\",\"COPY： 复制文件或目录到容器中。\",\"COPY . .\",\"ADD： 类似于COPY，还支持URL解压缩和tar文件自动解压。\",\"ADD https://example.com/file.tar.gz/app/\",\"RUN： 执行命令，通常用于安装软件包、更新系统等。\",\"RUN apt-get update && apt-get install -y python3\",\"ENV： 设置环境变量。\",\"ENV MY_VAR=value\",\"EXPOSE： 声明容器将监听的端口，但并不映射到主机。\",\"EXPOSE 80\",\"CMD： 定义容器启动时要执行的默认命令。可以被覆盖。\",\"CMD [\\\"python\\\", \\\"app.py\\\"]\",\"ENTRYPOINT： 定义容器启动时要执行的默认命令。不可被覆盖，但可以追加参数。\",\"ENTRYPOINT [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\",\"VOLUME： 创建挂载点，用于持久化数据。\",\"VOLUME /data\",\"USER： 设置执行后续命令的用户或 UID。\",\"USER appuser\",\"ARG： 定义构建时的变量，可通过构建命令传递。\",\"ARG version=latest\",\"LABEL： 添加元数据，通常用于描述镜像。\",\"LABEL version=\\\"1.0\\\" description=\\\"My custom image\\\" author=\\\"codermast\\\"\",\"Docker File 指令官方文档\",\"https://docs.docker.com/engine/reference/builder/\"]},\"63\":{\"h\":\"Docker build\",\"t\":[\"docker build 命令用于基于 Dockerfile 创建 Docker 镜像。通过此命令，你可以自动化地构建一个新的 Docker 镜像。下面是 docker build 命令的详细解释，包括常见选项和示例。\"]},\"64\":{\"h\":\"基本语法\",\"t\":[\"docker build [OPTIONS] PATH | URL | -\",\"OPTIONS：构建过程的各种选项。\",\"PATH：Dockerfile 所在目录路径，Docker 会将此路径及其子目录作为构建的上下文。\",\"URL：远程 Dockerfile 所在的 URL。\",\"-：表示从标准输入读取 Dockerfile。\"]},\"65\":{\"h\":\"常用选项\",\"t\":[\"-t, --tag：为生成的镜像指定名称和标签。例如 myimage:latest。\",\"-f, --file：指定 Dockerfile 的路径（默认是当前目录下的 Dockerfile）。\",\"--build-arg：设置构建时的变量。\",\"--no-cache：不使用缓存，强制重新构建所有层。\",\"--pull：尝试从注册表中拉取最新版本的基础镜像。\",\"--rm：成功后移除中间容器（默认开启）。\",\"--force-rm：始终移除中间容器。\",\"-q, --quiet：仅在构建时输出镜像 ID。\",\"--network：设置构建时的网络模式。\",\"--target：设置构建的目标阶段（适用于多阶段构建）。\"]},\"66\":{\"h\":\"示例用法\",\"t\":[\"基本构建：\",\"在 Dockerfile 所在目录下执行构建操作。\",\"docker build -t my-golang-app .\",\"-t my-golang-app：指定生成的镜像名称为 my-golang-app。\",\". 表示当前目录。\",\"指定 Dockerfile 路径：\",\"如果 Dockerfile 不在当前目录下，可以使用 --file 或 -f 参数指定路径。\",\"docker build -t my-node-app -f path/to/Dockerfile .\",\"使用构建参数：\",\"可以在构建过程中传递构建参数。\",\"docker build -t my-app --build-arg VERSION=1.0 .\",\"Dockerfile 中可以使用 ARG 指令定义构建参数：\",\"ARG VERSION RUN echo $VERSION\",\"不使用缓存重新构建：\",\"强制重新构建镜像，不使用缓存。\",\"docker build --no-cache -t my-python-app .\",\"从 URL 拉取 Dockerfile：\",\"从远程存储库中的 URL 拉取 Dockerfile 并构建镜像。\",\"docker build -t my-nginx-app https://github.com/username/repo.git#branch:path/to/dockerfile\",\"使用标准输入流构建：\",\"从标准输入流中读取 Dockerfile 的内容进行构建。\",\"docker build - < Dockerfile\"]},\"67\":{\"h\":\"构建步骤详解\",\"t\":[\"FROM：指定基础镜像。\",\"WORKDIR：设置工作目录。\",\"COPY：将本地文件复制到镜像中。\",\"RUN：运行命令（如安装依赖、编译代码）。\",\"EXPOSE：声明容器要开放的端口。\",\"CMD：指定容器启动时执行的命令。\"]},\"68\":{\"h\":\"注意事项\",\"t\":[\"构建上下文：Dockerfile 所在目录及其子目录会作为构建上下文传递给 Docker 引擎。\",\"缓存机制：每个构建步骤都会生成一个缓存层，如果没有更改，Docker 会重用这些缓存层以加快构建速度。使用 --no-cache 参数可以禁用缓存。\",\"多阶段构建：通过多阶段构建，可以在一个 Dockerfile 中使用多个 FROM 指令，分阶段构建和优化镜像。\",\"通过熟练掌握 docker build 命令和 Dockerfile 的编写，可以高效地构建和管理 Docker 镜像，满足不同应用和环境的需求。\"]},\"69\":{\"h\":\"Docker - 介绍及安装\"},\"70\":{\"h\":\"Docker是什么？\",\"t\":[\"Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\",\"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\",\"容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\",\"Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。\"]},\"71\":{\"h\":\"Docker能干什么？\",\"t\":[\"Docker是一种容器化平台，可用于打包、分发和运行应用程序及其依赖项。以下是Docker的一些主要功能和用途：\",\"容器化应用程序： Docker允许开发人员将应用程序及其所有依赖项打包到一个称为容器的独立单元中。这包括代码、运行时、系统工具、系统库等。容器可以在任何支持Docker的环境中运行，而不受环境差异的影响。\",\"跨平台性： Docker容器可以在不同的操作系统和云平台上运行，提供了更强大的跨平台性。无论是在开发、测试还是生产环境，都可以使用相同的容器。\",\"轻量级： Docker容器共享宿主操作系统的内核，因此它们相比于传统的虚拟机更加轻量级。这使得容器的启动速度更快，占用更少的系统资源。\",\"版本控制： Docker容器的镜像可以被版本控制，允许开发人员和运维团队轻松地追踪和回滚应用程序的版本。\",\"快速部署： Docker容器可以快速启动、停止和重新启动，提高了应用程序的部署速度。这对于微服务架构和持续集成/持续部署 (CI/CD) 策略非常有用。\",\"隔离性： Docker容器提供了进程级别的隔离，使得应用程序之间相互独立。这有助于避免由于一个应用程序的问题导致整个系统崩溃。\",\"资源优化： 多个Docker容器可以在同一台主机上并发运行，共享主机的资源。Docker通过优化资源使用，提高了系统的效率。\",\"生态系统： Docker拥有丰富的生态系统，包括Docker Hub，其中存储了大量的公共和私有Docker镜像，使得开发人员可以轻松共享和获取镜像。\",\"总体而言，Docker通过容器化技术提供了一种便捷、灵活且高效的方式来开发、打包和部署应用程序。\"]},\"72\":{\"h\":\"Docker和普通虚拟机的区别\",\"t\":[\"可以理解为普通虚拟机是在宿主机的物理环境上，将操作系统进行虚拟化，类似于提供一个整体的虚拟环境，你可以在这个环境内干任何想干的事，而 Docker 在宿主机的基础上，仅仅只虚拟化所指定的依赖项。\",\"虚拟机是在物理硬件层面对资源的隔离，而 Docker 是在操作系统的层面对所使用应用的隔离。\",\"故 Docker 在性能上大大高于普通虚拟机。\",\"虚拟机\",\"Docker\",\"隔离程度\",\"隔离操作系统\",\"隔离所需依赖\",\"资源利用率\",\"低\",\"高\",\"运行效率\",\"差\",\"好\",\"成本\",\"高\",\"低\"]},\"73\":{\"h\":\"学习Docker之前，需要什么基础\",\"t\":[\"在学习 Docker 之前，你需要掌握一些常用的 Linux 操作指令，至少认识一些常见的命令，能读懂即可。\",\"提示\",\"如果您对 Linux 操作指令不太熟悉，或者您想学习 Linux ，可以参考本站的 Linux 系列学习笔记。\",\"// TODO:Linux学习笔记\"]},\"74\":{\"h\":\"安装\"},\"75\":{\"h\":\"Docker官方安装教程\",\"t\":[\"Docker Desktop For Windows ：https://docs.docker.com/desktop/install/windows-install/\",\"Docker Desktop For MacOS：https://docs.docker.com/desktop/install/mac-install/\",\"Docker Desktop For Linux：https://docs.docker.com/desktop/install/linux-install/\"]},\"76\":{\"h\":\"第三方安装教程\",\"t\":[\"下面是本人制作的 Docker 安装图文教程，仅供参考使用\"]},\"77\":{\"h\":\"Docker - 镜像、容器、仓库\",\"t\":[\"提示\",\"这个章节涉及到 Docker 最核心的知识，也是在使用过程中最常使用到的，需要重点学习。\"]},\"78\":{\"h\":\"什么是Docker镜像、容器、仓库？\",\"t\":[\"Docker镜像：镜像是一个只读的模板，其中包含了创建 Docker 容器的说明，可以用来创建 Docker 容器。镜像可以包含操作系统、应用程序、依赖库、配置文件等。\",\"Docker容器：容器是代码的隔离环境。这意味着容器并不直接在操作系统上运行。容器是 Docker 镜像的一个运行实例，可以理解为一个轻量级的虚拟机，用面向对象的思想来看，其就是一个镜像的运行对象。容器包含了运行应用程序所需的所有组件，包括操作系统、应用程序、依赖库等。\",\"Docker仓库：仓库是用来存储和管理 Docker 镜像的地方，类似于代码仓库。Docker 官方提供了 Docker Hub 仓库，可以在其中存储和分享 Docker 镜像。用户也可以自建私有仓库来存储和管理自己的 Docker 镜像。\"]},\"79\":{\"h\":\"镜像、容器、仓库之间的关系\",\"t\":[\"Docker 镜像可以看做是一个静态模板，Docker 容器是对镜像的一个实例化，一个镜像可以实例化多个容器，这几个容器相互独立，互不影响。\",\"Docker 仓库就是存放 Docker 镜像的地方，严格意义上来说可以分为本地仓库和远程仓库，远程仓库由 Docker 官方维护，包含了几乎所有的 Docker 镜像，Docker 本地仓库只有你拉取的镜像。\",\"在使用 Docker 镜像创建对象之前，需要先拉取 Docker 镜像，这里的拉取通常是指从 Docker 官方仓库拉取。\",\"故使用 Docker 的基本步骤可以清晰的总结为：\",\"从仓库拉取 Docker 镜像\",\"使用 Docker 镜像实例化一个 Docker 容器\",\"运行 Docker 容器\"]},\"80\":{\"h\":\"Docker镜像\",\"t\":[\"当运行容器时，使用的 Docker 镜像不在本地仓库中，Docker 就会从默认的 Docker 仓库中下载该镜像。一般是从 Docker 官方提供的 Docker Hub 仓库中下载。\",\"下面来学习关于 Docker 镜像的相关操作。\"]},\"81\":{\"h\":\"镜像列表\",\"t\":[\"docker images\",\"REPOSITORY：表示镜像的仓库源\",\"TAG：镜像的标签, 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本\",\"IMAGE ID：镜像ID\",\"CREATED：镜像创建时间\",\"SIZE：镜像大小\"]},\"82\":{\"h\":\"查找镜像\",\"t\":[\"注意\",\"本小节以查找 Redis 镜像为例做演示说明，其他镜像的操作同理。\",\"在 Docker Hub查找\",\"使用 Docker Hub 中提供的查找功能：https://hub.docker.com/search?q=redis&type=image\",\"这里就已经找到了 Redis 的镜像信息\",\"可以查看 Redis 镜像的各种版本信息。\",\"使用 Docker Search查找\",\"docker search redis\",\"NAME: 镜像仓库源的名称\",\"DESCRIPTION: 镜像的描述\",\"OFFICIAL: 是否 docker 官方发布\",\"STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\",\"AUTOMATED: 自动构建。\",\"使用 Docker Desktop 查找\",\"直接在 Docker Desktop 中搜索即可。\"]},\"83\":{\"h\":\"拉取镜像\",\"t\":[\"拉取镜像即从 Docker 仓库中拉取 Docker 镜像，本质上就是从远程的仓库中下载镜像到本地。\",\"这里仍以 Redis 为样例进行编写，其他镜像的拉取同理。\",\"docker pull redis\",\"这里默认拉取的是 Redis 的最新版本，如果要是想拉取指定版本时可以进行如下执行，如拉取 redis7.0\",\"docker pull redis:7.0\"]},\"84\":{\"h\":\"删除镜像\",\"t\":[\"这里我们演示删除之前下载的那个 Hello-World 镜像\",\"docker rmi hello-world\",\"这里如果使用了该镜像创建了容器，那么就会报错。\",\"如果出现这种情况，就说明我们使用了该镜像创建了容器，那么就必须先删除使用该镜像的所有容器，才能够删除该镜像。\",\"先查看 Docker 容器\",\"docker ps -a\",\"然后删除 Docker 容器\",\"docker rm 8c0dde3e3fb4\",\"使用的是 Docker 容器的 ID 删除。\",\"删除 Docker 镜像\",\"docker rmi hello-world\",\"提示\",\"如果一个镜像创建了多个容器，那么在删除该镜像之前，必须删除所有使用该镜像的容器，才能够删除该镜像。\"]},\"85\":{\"h\":\"更新镜像\",\"t\":[\"Dokcer 镜像的更新就是在目前运行的 Docker 容器上进行修改，然后将更新后的 Docker 容器的所有内容，导出为一个 Docker 镜像，随后就可以使用该镜像创建 Docker 容器。\",\"先下载一个 Ubuntu20.04 镜像\",\"docker pull ubuntu:20.04\",\"创建一个该镜像的容器\",\"docker run -t -i ubuntu:20.04\",\"在该容器内运行 apt-get update 指令，更新 ubuntu 系统，更新后 exit 退出这个容器到我们本地的命令控制端。\",\"apt-get update\",\"提交容器副本\",\"docker commit -m=\\\"update ubuntu20.04\\\" -a=\\\"CoderMast\\\" 13999fa6f4f6 codermast/ubuntu:latest\",\"各个参数说明：\",\"-m: 提交的描述信息\",\"-a: 指定镜像作者\",\"13999fa6f4f6：容器 ID\",\"codermast/ubuntu:latest: 指定要创建的目标镜像名\",\"查看镜像列表\",\"docker images\",\"这里可以看到已经创建成功了，并且大小和之前的不一样了。\",\"使用该镜像创建一个容器\",\"docker run -t -i codermast/ubuntu:latest\"]},\"86\":{\"h\":\"生成镜像\"},\"87\":{\"h\":\"镜像标签\",\"t\":[\"我们可以使用 docker tag 命令为镜像添加一个新的标签。\",\"docker tag e650c5f208da codermast/ubuntu:v1\",\"e650c5f208da：为镜像的 ID\",\"codermast/ubuntu:v1：Tag 名\",\"此时我们在创建 Docker 容器时，既可以使用 codermast/ubuntu:latest 也可以使用 codermast/ubuntu:v1。\",\"Tag 可以看做是给镜像起别名，其本质的镜像 ID 不变，具体底层就是同一个镜像的不同引用而已。\"]},\"88\":{\"h\":\"镜像导入和导出\",\"t\":[\"镜像导出\",\"docker save > codermast-ubuntu-latest.tar e650c5f208da\",\"codermast-ubuntu-latest.tar：要导出的文件名\",\"e650c5f208da：要导出的镜像 ID\",\"镜像导入\",\"在镜像导入之前，为了方便观察，先删除掉该镜像。\",\"docker load < codermast-ubuntu-latest.tar\",\"codermast-ubuntu-latest.tar：为要导入的文件名。\",\"注意\",\"若是只想备份images，使用save、load即可\",\"若是在启动容器后，容器内容有变化，需要备份，则使用export、import\"]},\"89\":{\"h\":\"Docker容器\",\"t\":[\"在上面的 Docker 镜像的相关操作中，我们或多或少的了解和学习了一些 Docker 容器的相关操作。\"]},\"90\":{\"h\":\"容器启动\",\"t\":[\"docker run -it codermast/ubuntu:latest /bin/bash\",\"-it 可以连写的，表示 -i -t\",\"-t: 在新容器内指定一个伪终端或终端。\",\"-i: 允许你对容器内的标准输入 (STDIN) 进行交互\",\"codermast/ubuntu:latest：镜像名称\"]},\"91\":{\"h\":\"容器查看\",\"t\":[\"docker ps -a\",\"-a 表示 all，即查看所有容器\"]},\"92\":{\"h\":\"容器再启动\",\"t\":[\"我们看到，刚才 codermast/ubuntu:latest 的实例d3a11e669e88 已经停止了Exited (0) 4 seconds ago，我们重启这个实例\",\"docker start d3a11e669e88\"]},\"93\":{\"h\":\"容器停止和重启\",\"t\":[\"容器停止\",\"docker stop d3a11e669e88\",\"容器重启\",\"docker restart d3a11e669e88\"]},\"94\":{\"h\":\"后台模式与进入\",\"t\":[\"在使用 -d 参数创建容器时，容器启动后会进入后台，那么此时我们怎么进入容器呢？\",\"使用 `docker attach [容器ID]\",\"docker attach d3a11e669e88\",\"docker exec -i -t [容器ID] /bin/bash\",\"docker exec -i -t d3a11e669e88 /bin/bash\",\"注意\",\"docker attach 在退出容器终端后，容器会停止运行。\",\"docker exec 在退出容器终端后，不会导致容器的停止。\",\"✅ 推荐大家使用 docker exec\"]},\"95\":{\"h\":\"容器导出和导入\",\"t\":[\"容器的导出\",\"docker export 246b23d5d5a5 > redis-latest-codermast.tar\",\"246b23d5d5a5：容器 ID\",\"redis-latest-codermast.tar：导出文件名\",\"容器的导入\",\"docker import redis-latest-codermast.tar codermast/redis:latest\",\"redis-latest-codermast.tar：配置文件名\",\"codermast/redis:latest：导入的镜像名称\",\"要注意的是，这里是对 Docker 容器进行导出，但是导出的结果是镜像的配置文件，通过该配置文件导入的也是 Docker 镜像。\"]},\"96\":{\"h\":\"强制删除容器\",\"t\":[\"我们知道，当容器在运行的时候是无法直接删除的，需要先将容器先停止运行，随后才能删除该容器，那么能不能直接删除正在运行中的容器呢？\",\"答案是可以的，我们只需要在其中加上 -f 的选项即可，代表 force 强制的意思。\",\"docker rm -f b234f112186d\",\"b234f112186d：为 正在运行 Docker 容器的 ID\"]},\"97\":{\"h\":\"清理停止的容器\",\"t\":[\"在容器停止运行后，并不会自动被删除，需要手动清除。该指令一次性清除所有的停止状态的容器。\",\"docker container prune\"]},\"98\":{\"h\":\"容器别名及操作\",\"t\":[\"上述对容器的操作都是针对容器 ID，这个 ID 是随机的，为了方便起见，我们可以设置一个自定义的 name 来进行操作。仅需在指令中设置 name 选项即可。\",\"docker run -d --name codermast-redis-001 redis:latest\",\"codermast-redis-001：自定义的名称\",\"redis:latest：镜像名称\"]},\"99\":{\"h\":\"容器错误日志\",\"t\":[\"docker logs ...\",\"实时查看docker容器名为user-uat的最后10行日志\",\"docker logs -f -t --tail 10 user-uat\",\"查看指定时间后的日志，只显示最后100行：\",\"docker logs -f -t --since=\\\"2024-01-14\\\" --tail=100 user-uat\",\"查看最近30分钟的日志:\",\"docker logs --since 30m user-uat\",\"查看某时间之后的日志：\",\"docker logs -t --since=\\\"2024-01-14T21:00:00\\\" user-uat\",\"查看某时间段日志：\",\"docker logs -t --since=\\\"2024-01-14T21:00:00\\\" --until \\\"2018-02-09T12:23:37\\\" user-uat\",\"将错误日志写入文件：\",\"docker logs -f -t --since=\\\"2024-01-14\\\" user-uat | grep error >> logs_error.txt\"]},\"100\":{\"h\":\"Docker仓库\",\"t\":[\"Docker 仓库是集中存放 Docker 镜像的地方。默认使用的仓库为 Docker Hub，也可以更改为自己的想使用的仓库。类似于 Github 的仓库，只不过 Github 管理的是代码，Docker Hub 管理的是 Docker 镜像。\",\"这里以 Docker Hub 为例进行说明。\",\"登录仓库\",\"docker login\",\"将准备好的镜像推送至仓库\",\"docker push codermast/redis:latest\",\"codermast/redis:latest：Docker 镜像名\"]},\"101\":{\"h\":\"Docker - 快速开始\",\"t\":[\"提示\",\"在学习本小节之前，你必须确保你正确安装了 Docker，正确安装 Docker 是后续学习的前提，务必确保你已经成功安装。\",\"另外当你在学习本小节时，可能会出现你完全按照教程进行，但是运行结果并不与教程相符合的情况。这种情况不必担心，因为 Docker 镜像源默认是在海外，国内访问可能不够稳定，在后续的章节中会一一解决这些问题。\",\"在本章节中的所有关于 Docker 的专有名词，如 镜像、容器、仓库等，不理解属于正常情况，这些内容都会在后续中进行讲解。\",\"本小节的目的是为了让大家对 Docker 的运行有一个简单的认识，仅此而已。\",\"如未能成功运行，可先学习自本小节起的后续章节，学习完成后可回头做此学习案例。\"]},\"102\":{\"h\":\"Hello World容器样例\",\"t\":[\"拉取 hello-world 镜像\",\"docker pull hello-world:latest\",\"查看本地仓库是否有 hello-world 这个库\",\"docker images\",\"运行这个镜像的容器，即实例\",\"docker run hello-world\"]},\"103\":{\"h\":\"Centos容器样例\",\"t\":[\"在 Centos 环境下执行 /bin/echo \\\"Hello world\\\"指令\",\"拉取 Centos 镜像\",\"docker pull centos\",\"查看本地仓库是否有 Centos7 这个镜像\",\"docker images\",\"运行这个镜像的容器，即实例\",\"docker run centos /bin/echo \\\"Hello world\\\"\"]},\"104\":{\"h\":\"Docker - 数据卷\",\"t\":[\"Docker 数据卷（Docker Volumes）是用于持久化存储数据的一种机制，与容器的生命周期分离，可以在容器之间共享和重用。使用数据卷可以在容器删除后保留数据，也方便在多个容器之间共享文件或目录。\",\"Docker 数据卷 Volumes 可以看做是将 Docker 容器和数据进行分离。\"]},\"105\":{\"h\":\"Docker 数据卷的特点和优势：\",\"t\":[\"持久性：数据卷可以在容器删除后持久化保存数据，不受容器生命周期影响。\",\"共享和重用：可以将数据卷挂载到多个容器中，实现数据的共享和重用。\",\"性能：与容器内部文件系统相比，数据卷通常具有更高的性能，特别是在处理大量数据时。\",\"数据管理：可以通过 Docker 命令管理数据卷，如创建、删除、备份等。\"]},\"106\":{\"h\":\"创建和使用数据卷\"},\"107\":{\"h\":\"1. 创建数据卷\",\"t\":[\"可以使用 docker volume create 命令创建一个数据卷：\",\"docker volume create mydata\",\"这将创建一个名为 mydata 的数据卷。你也可以通过在容器运行时自动创建数据卷来使用 -v 参数。\"]},\"108\":{\"h\":\"2. 挂载数据卷到容器\",\"t\":[\"在运行容器时，可以使用 -v 或 --mount 参数将数据卷挂载到容器的指定路径上：\",\"docker run -d --name mycontainer -v mydata:/data nginx\",\"mydata:/data：将名为 mydata 的数据卷挂载到容器内的 /data 目录。\"]},\"109\":{\"h\":\"3. 查看数据卷\",\"t\":[\"可以使用 docker volume ls 命令列出所有的数据卷：\",\"docker volume ls\"]},\"110\":{\"h\":\"4. 删除数据卷\",\"t\":[\"使用 docker volume rm 命令删除不再需要的数据卷：\",\"docker volume rm mydata\"]},\"111\":{\"h\":\"数据卷的常见应用场景：\",\"t\":[\"持久化存储：将数据库文件、配置文件等持久化存储在数据卷中，确保在容器重启或删除后数据不丢失。\",\"共享数据：多个容器需要共享数据时，可以使用同一个数据卷来实现数据共享。\",\"备份和恢复：通过备份和还原数据卷，可以轻松地管理和迁移数据。\"]},\"112\":{\"h\":\"使用 Docker Compose 管理数据卷\",\"t\":[\"在 Docker Compose 文件中，可以使用 volumes 关键字定义和管理数据卷：\",\"version: '3.8' services: web: image: nginx volumes: - mydata:/data volumes: mydata:\",\"以上示例定义了一个名为 mydata 的数据卷，并将其挂载到 web 服务的 /data 目录上。\"]},\"113\":{\"h\":\"总结\",\"t\":[\"Docker 数据卷提供了一种方便和灵活的方式来处理容器中的持久化数据需求。通过使用数据卷，可以实现数据的持久化存储、共享和管理，增强了 Docker 容器在生产环境中的适用性和可靠性。\"]},\"114\":{\"h\":\"Docker - 仓库管理\",\"t\":[\"仓库是集中存放资源的地方，代码仓库是存放代码的，那么Docker 中的仓库就是存放 Docker 镜像的。\",\"和 GitHub 类似，Docker Hub 是 Docker 官方维护的一个免费的公共仓库，不但可以下载需要的镜像，而且还可以上传自己的镜像。\",\"提示\",\"本文主要以 Docker Hub 为例子进行说明，其他仓库同理。\"]},\"115\":{\"h\":\"登录和退出\",\"t\":[\"在需要使用 Docker Hub 中管理自己的镜像时，需要先进行登录。\",\"登录\",\"docker login\",\"退出登录\",\"docker logout\"]},\"116\":{\"h\":\"推送镜像\",\"t\":[\"用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。\",\"docker tag ubuntu:20.04 codermast/ubuntu:20.04 docker push codermast/ubuntu:20.04\",\"codermast 改为你的 username 便于管理\"]},\"117\":{\"h\":\"Docker - WEB应用实例\",\"t\":[\"在之前的章节中，仅对普通容器进行了演示，但在实际中常常使用到 Docker 容器中的 WEB 应用程序。\"]},\"118\":{\"h\":\"运行一个WEB应用\",\"t\":[\"拉取镜像\",\"docker pull training/webapp\",\"创建一个容器\",\"docker run -d -P training/webapp python app.py\",\"这里出现了警告信息，是因为我的电脑是 M1 芯片，是 ARM 架构，而所需要的平台是请求的映像的平台（linux/aamd64）与检测到的主机平台（linux/alm64/v8）不匹配，这里每个人的电脑环境不同，不必理会。\",\"-d:让容器在后台运行。\",\"-P:将容器内部使用的网络端口随机映射到我们使用的主机上。\",\"-p:是容器内部端口绑定到指定的主机端口。\",\"docker run -d -p 5001:5000 training/webapp python app.py\",\"即将本机的 5001 端口绑定到容器内部的 5000 端口上。\"]},\"119\":{\"h\":\"查看WEB应用容器\",\"t\":[\"docker ps\",\"我们看到这里增加了端口的映射，0.0.0.0:55000->5000/tcp，即将本地 IP 的 55000 端口，映射到了该 Docker 容器中的 5000 端口，即我们在本地访问 55000 端口，即可访问该 Docker 容器。\"]},\"120\":{\"h\":\"自定义网络端口映射\",\"t\":[\"在上面的例子中，使用 -p 参数映射到主机上的端口是随机的，下面我们对其进行端口的自定义操作。\",\"为了便于和前面创建的容器进行区分，我们再创建一个容器。\",\"docker run -d -p 55001:5000 training/webapp python app.py\",\"访问 localhost:55001\",\"补充\",\"端口映射既可以是本地端口映射，也可以是网络端口映射，即将 Docker 容器中的端口直接映射到某个指定的网络 IP 的端口。\",\"本地端口映射：5000/tcp -> 0.0.0.0:5001\",\"网络端口映射：5000/tcp -> 123.23.46.123:5001\",\"另外，这里的端口映射默认都是 TCP 端口，也可以指定为 UDP 端口，在端口后面加上 /udp 即可。\"]},\"121\":{\"h\":\"查看端口映射信息\",\"t\":[\"docker port focused_boyd 5000\",\"该指令即查看名为 focused_boyd 的 Docker 容器的 5000 端口映射到什么位置。\"]},\"122\":{\"h\":\"停止WEB应用容器\",\"t\":[\"WEB 应用容器，本身就是一个 Docker 容器，使用 Docker 本身的停止命令即可。\",\"# 通过 Docker 容器名称停止 docker stop busy_hodgkin # 通过 Docker 容器 ID 停止 docker stop af9b91fa3cc6\"]},\"123\":{\"h\":\"重启WEB应用容器\",\"t\":[\"# 通过 Docker 容器名称重启 docker restart busy_hodgkin # 通过 Docker 容器 ID 重启 docker restart af9b91fa3cc6\"]},\"124\":{\"h\":\"删除WEB应用容器\",\"t\":[\"docker rm busy_hodgkin\",\"这里要注意，该指令是无法直接删除运行中的容器，想要直接删除需要加上 -f 选项\",\"docker rm -f busy_hodgkin\"]},\"125\":{\"h\":\"Docker\"},\"126\":{\"h\":\"开源库\"},\"127\":{\"h\":\"golang.org/x/crypto/ssh\"},\"128\":{\"h\":\"简介\",\"t\":[\"golang.org/x/crypto/ssh 是一个用于 Go 语言的 SSH 客户端和服务器的包。它提供了处理 SSH 连接的所有必要功能，包括认证、会话管理、通道和流的处理。\"]},\"129\":{\"h\":\"安装\",\"t\":[\"要安装 golang.org/x/crypto/ssh，您可以使用 go get 命令：\",\"go get golang.org/x/crypto/ssh\"]},\"130\":{\"h\":\"基本用法\"},\"131\":{\"h\":\"客户端\",\"t\":[\"下面是一个简单的 SSH 客户端示例，展示了如何连接到 SSH 服务器并执行命令：\",\"package main import ( \\\"golang.org/x/crypto/ssh\\\" \\\"log\\\" \\\"os\\\" ) func main() { config := &ssh.ClientConfig{ User: \\\"your-username\\\", Auth: []ssh.AuthMethod{ ssh.Password(\\\"your-password\\\"), }, HostKeyCallback: ssh.InsecureIgnoreHostKey(), // 仅用于测试 } client, err := ssh.Dial(\\\"tcp\\\", \\\"your-ssh-server:22\\\", config) if err != nil { log.Fatalf(\\\"Failed to dial: %v\\\", err) } session, err := client.NewSession() if err != nil { log.Fatalf(\\\"Failed to create session: %v\\\", err) } defer session.Close() session.Stdout = os.Stdout session.Stderr = os.Stderr if err := session.Run(\\\"ls -l\\\"); err != nil { log.Fatalf(\\\"Failed to run: %v\\\", err) } }\"]},\"132\":{\"h\":\"服务器\",\"t\":[\"下面是一个简单的 SSH 服务器示例，展示了如何设置一个 SSH 服务器并处理连接：\",\"package main import ( \\\"golang.org/x/crypto/ssh\\\" \\\"io\\\" \\\"log\\\" \\\"net\\\" ) func main() { config := &ssh.ServerConfig{ NoClientAuth: true, } privateBytes, err := os.ReadFile(\\\"path/to/private/key\\\") if err != nil { log.Fatalf(\\\"Failed to load private key: %v\\\", err) } private, err := ssh.ParsePrivateKey(privateBytes) if err != nil { log.Fatalf(\\\"Failed to parse private key: %v\\\", err) } config.AddHostKey(private) listener, err := net.Listen(\\\"tcp\\\", \\\"0.0.0.0:22\\\") if err != nil { log.Fatalf(\\\"Failed to listen for connection: %v\\\", err) } log.Print(\\\"Listening on 0.0.0.0:22...\\\") for { conn, err := listener.Accept() if err != nil { log.Printf(\\\"Failed to accept incoming connection: %v\\\", err) continue } go handleConn(conn, config) } } func handleConn(conn net.Conn, config *ssh.ServerConfig) { sshConn, chans, reqs, err := ssh.NewServerConn(conn, config) if err != nil { log.Printf(\\\"Failed to handshake: %v\\\", err) return } defer sshConn.Close() log.Printf(\\\"New SSH connection from %s (%s)\\\", sshConn.RemoteAddr(), sshConn.ClientVersion()) go ssh.DiscardRequests(reqs) for newChannel := range chans { if newChannel.ChannelType() != \\\"session\\\" { newChannel.Reject(ssh.UnknownChannelType, \\\"unknown channel type\\\") continue } channel, requests, err := newChannel.Accept() if err != nil { log.Printf(\\\"Could not accept channel: %v\\\", err) return } go handleChannel(channel, requests) } } func handleChannel(channel ssh.Channel, requests <-chan *ssh.Request) { defer channel.Close() for req := range requests { switch req.Type { case \\\"shell\\\": if len(req.Payload) == 0 { req.Reply(true, nil) go io.Copy(channel, channel) } else { req.Reply(false, nil) } } } }\"]},\"133\":{\"h\":\"主要功能\",\"t\":[\"认证：支持多种认证方法，包括密码认证、公钥认证等。\",\"会话管理：创建和管理 SSH 会话。\",\"通道和流：处理 SSH 通道和数据流，支持多种数据传输方式。\",\"端口转发：支持本地和远程端口转发。\"]},\"134\":{\"h\":\"参考资料\",\"t\":[\"官方文档\",\"GitHub 仓库\",\"以上是 golang.org/x/crypto/ssh 的一个概述和基本用法示例。如果需要更详细的信息，请参考官方文档和代码示例。希望这些内容对您创建中文站点有所帮助！\"]},\"135\":{\"h\":\"标准库\",\"t\":[\"Go 语言标准库是 Go 开发者日常编程的重要资源，它包含了丰富的功能模块，涵盖了从基本数据类型到高级网络和并发编程的各个方面。以下是一些主要的 Go 标准库模块及其功能的概述：\"]},\"136\":{\"h\":\"基础模块\",\"t\":[\"fmt：格式化输入输出，例如 fmt.Printf、fmt.Println。\",\"os：操作系统功能，例如文件操作、环境变量获取等，如 os.Open、os.Getenv。\",\"flag：命令行参数解析，用于处理命令行输入参数，例如 flag.StringVar、flag.Parse。\"]},\"137\":{\"h\":\"数据结构和算法\",\"t\":[\"container：各种数据结构，包括 list、heap 等。\",\"sort：排序算法，支持对切片的排序。\",\"strconv：字符串和基本数据类型之间的转换，例如 strconv.Atoi、strconv.FormatInt。\"]},\"138\":{\"h\":\"并发编程\",\"t\":[\"sync：同步原语，提供了基本的同步操作，如 sync.Mutex、sync.WaitGroup。\",\"atomic：原子操作，支持原子性的内存访问，如 atomic.AddInt32。\",\"context：上下文管理，用于处理跨 API 边界和 goroutine 的取消、超时、截止时间等。\"]},\"139\":{\"h\":\"网络和IO\",\"t\":[\"net：网络编程，提供了 TCP、UDP、HTTP 等协议的支持，如 net.Dial、net.Listen。\",\"http：HTTP 客户端和服务器实现，例如 http.Get、http.HandleFunc。\",\"io：输入输出工具，包括文件操作、数据流处理等，如 io.Copy、io.Reader、io.Writer。\",\"bufio：缓冲 IO 操作，提高 IO 性能，如 bufio.NewReader、bufio.NewWriter。\"]},\"140\":{\"h\":\"数据序列化和编码\",\"t\":[\"encoding/json：JSON 数据的编码和解码。\",\"encoding/xml：XML 数据的编码和解码。\",\"encoding/csv：CSV 格式文件的读写。\"]},\"141\":{\"h\":\"其他常用模块\",\"t\":[\"time：时间处理，包括时间的格式化、解析以及定时器的使用，如 time.Now、time.Parse。\",\"math：数学运算，提供了基本的数学函数和常量，如 math.Sin、math.Pi。\",\"crypto：加密算法，包括 MD5、SHA256 等哈希算法和对称/非对称加密算法。\",\"log：日志记录，用于生成日志消息，支持级别和格式化输出。\"]},\"142\":{\"h\":\"总结\",\"t\":[\"Go 语言的标准库提供了丰富的功能模块，覆盖了从基础操作到高级功能的多个领域。这些模块被广泛使用，不仅能帮助开发者快速构建应用程序，还能提供高效和可靠的解决方案。深入了解和熟练使用标准库可以极大地提升 Go 语言开发的效率和质量。\"]},\"143\":{\"h\":\"bufio\",\"t\":[\"在 Go 语言中，bufio 包提供了带缓冲的 I/O 操作，能够提高读写性能。以下是一些常用的 bufio 包 API 及其详细说明：\"]},\"144\":{\"h\":\"1. 读取操作\"},\"145\":{\"h\":\"\",\"t\":[\"创建一个带缓冲的读取器。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { reader := bufio.NewReader(strings.NewReader(\\\"Hello, World!\\\")) line, err := reader.ReadString('\\\\n') if err != nil { fmt.Println(\\\"Error reading:\\\", err) return } fmt.Println(line) }\"]},\"146\":{\"h\":\"\",\"t\":[\"读取直到指定的分隔符，并返回包含分隔符的字符串。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { reader := bufio.NewReader(strings.NewReader(\\\"Hello, World!\\\\nWelcome to Go!\\\")) line, err := reader.ReadString('\\\\n') if err != nil { fmt.Println(\\\"Error reading:\\\", err) return } fmt.Println(line) }\"]},\"147\":{\"h\":\"\",\"t\":[\"读取直到指定的分隔符，并返回包含分隔符的字节切片。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { reader := bufio.NewReader(strings.NewReader(\\\"Hello, World!\\\\nWelcome to Go!\\\")) bytes, err := reader.ReadBytes('\\\\n') if err != nil { fmt.Println(\\\"Error reading:\\\", err) return } fmt.Println(string(bytes)) }\"]},\"148\":{\"h\":\"\",\"t\":[\"逐行读取文本，不包含换行符。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { reader := bufio.NewReader(strings.NewReader(\\\"Hello, World!\\\\nWelcome to Go!\\\")) line, _, err := reader.ReadLine() if err != nil { fmt.Println(\\\"Error reading:\\\", err) return } fmt.Println(string(line)) }\"]},\"149\":{\"h\":\"2. 写入操作\"},\"150\":{\"h\":\"\",\"t\":[\"创建一个带缓冲的写入器。\",\"package main import ( \\\"bufio\\\" \\\"os\\\" ) func main() { writer := bufio.NewWriter(os.Stdout) writer.WriteString(\\\"Hello, World!\\\\n\\\") writer.Flush() }\"]},\"151\":{\"h\":\"\",\"t\":[\"写入一个字符串。\",\"package main import ( \\\"bufio\\\" \\\"os\\\" ) func main() { writer := bufio.NewWriter(os.Stdout) _, err := writer.WriteString(\\\"Hello, World!\\\\n\\\") if err != nil { fmt.Println(\\\"Error writing:\\\", err) return } writer.Flush() }\"]},\"152\":{\"h\":\"\",\"t\":[\"写入一个字节切片。\",\"package main import ( \\\"bufio\\\" \\\"os\\\" ) func main() { writer := bufio.NewWriter(os.Stdout) _, err := writer.Write([]byte(\\\"Hello, World!\\\\n\\\")) if err != nil { fmt.Println(\\\"Error writing:\\\", err) return } writer.Flush() }\"]},\"153\":{\"h\":\"3. Scanner\"},\"154\":{\"h\":\"\",\"t\":[\"创建一个用于读取输入的扫描器。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { scanner := bufio.NewScanner(strings.NewReader(\\\"Hello, World!\\\\nWelcome to Go!\\\")) for scanner.Scan() { fmt.Println(scanner.Text()) } if err := scanner.Err(); err != nil { fmt.Println(\\\"Error scanning:\\\", err) } }\"]},\"155\":{\"h\":\"自定义分隔符\",\"t\":[\"使用 bufio.Scanner.Split 自定义扫描器的分隔函数。\",\"package main import ( \\\"bufio\\\" \\\"bytes\\\" \\\"fmt\\\" ) func main() { data := []byte(\\\"Hello, World! Welcome to Go!\\\") scanner := bufio.NewScanner(bytes.NewReader(data)) scanner.Split(bufio.ScanWords) for scanner.Scan() { fmt.Println(scanner.Text()) } if err := scanner.Err(); err != nil { fmt.Println(\\\"Error scanning:\\\", err) } }\"]},\"156\":{\"h\":\"4. ReadWriter\"},\"157\":{\"h\":\"\",\"t\":[\"组合 bufio.Reader 和 bufio.Writer，用于同时进行缓冲读写。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { var buffer strings.Builder rw := bufio.NewReadWriter(bufio.NewReader(strings.NewReader(\\\"Hello, World!\\\")), bufio.NewWriter(&buffer)) // 读取数据 line, _ := rw.Reader.ReadString('\\\\n') fmt.Println(\\\"Read:\\\", line) // 写入数据 rw.Writer.WriteString(\\\"Welcome to Go!\\\\n\\\") rw.Writer.Flush() fmt.Println(\\\"Written:\\\", buffer.String()) }\",\"通过以上这些 bufio 包中的基本 API，你可以方便地进行高效的缓冲输入输出操作。结合 io 包和 os 包，可以实现更加复杂的 I/O 处理逻辑。\"]},\"158\":{\"h\":\"container\",\"t\":[\"在Go语言标准库中，container 包提供了几种常用的数据结构实现，这些数据结构对于高效地管理和操作数据非常有用。以下是 container 包中主要的数据结构：\"]},\"159\":{\"h\":\"1. 切片（slice）\",\"t\":[\"Go语言中的切片是一个动态数组，是非常常用和灵活的数据结构。切片在 container 包中并不单独提供，但在Go语言中广泛用于处理列表和集合数据。\",\"「Golang - 基础知识 - 数组和切片」\"]},\"160\":{\"h\":\"2. 队列（Queue）\",\"t\":[\"container 包提供了一个基于双链表实现的队列：\",\"list.List: 双向链表实现的列表，可以用作队列或者栈。\",\"package main import ( \\\"container/list\\\" \\\"fmt\\\" ) func main() { // 创建一个新的链表 myQueue := list.New() // 入队操作 myQueue.PushBack(\\\"Alice\\\") myQueue.PushBack(\\\"Bob\\\") // 出队操作 front := myQueue.Front() if front != nil { fmt.Println(\\\"Front:\\\", front.Value) // 输出: Front: Alice myQueue.Remove(front) } // 遍历队列 fmt.Println(\\\"Queue contents:\\\") for e := myQueue.Front(); e != nil; e = e.Next() { fmt.Println(e.Value) } }\"]},\"161\":{\"h\":\"3. 堆（Heap）\",\"t\":[\"container/heap 包提供了堆操作的接口，但没有直接提供堆的实现，需要通过实现 heap.Interface 接口来使用。堆是一种优先队列，可以高效地提取最小或最大元素。\",\"package main import ( \\\"container/heap\\\" \\\"fmt\\\" ) // 示例结构体 type Item struct { value string // 值 priority int // 优先级 index int // 在堆中的索引 } // 实现 heap.Interface 接口 type PriorityQueue []*Item func (pq PriorityQueue) Len() int { return len(pq) } func (pq PriorityQueue) Less(i, j int) bool { return pq[i].priority < pq[j].priority } func (pq PriorityQueue) Swap(i, j int) { pq[i], pq[j] = pq[j], pq[i] pq[i].index = i pq[j].index = j } func (pq *PriorityQueue) Push(x interface{}) { item := x.(*Item) item.index = len(*pq) *pq = append(*pq, item) } func (pq *PriorityQueue) Pop() interface{} { old := *pq n := len(old) item := old[n-1] item.index = -1 *pq = old[0 : n-1] return item } func main() { // 创建优先队列 pq := make(PriorityQueue, 0) heap.Init(&pq) // 插入元素 items := []*Item{ {value: \\\"foo\\\", priority: 3}, {value: \\\"bar\\\", priority: 1}, {value: \\\"baz\\\", priority: 2}, } for _, item := range items { heap.Push(&pq, item) } // 弹出最小元素 for pq.Len() > 0 { item := heap.Pop(&pq).(*Item) fmt.Printf(\\\"(%s, %d) \\\", item.value, item.priority) } // 输出: (bar, 1) (baz, 2) (foo, 3) }\"]},\"162\":{\"h\":\"4. 链表（List）\",\"t\":[\"container/list 是Go语言标准库中提供的双向链表的实现，它支持高效的插入、删除和遍历操作。下面是一个简单的示例，演示了如何使用 container/list 包来操作双向链表：\",\"package main import ( \\\"container/list\\\" \\\"fmt\\\" ) func main() { // 创建一个新的双向链表 mylist := list.New() // 在链表尾部添加元素 mylist.PushBack(\\\"Alice\\\") mylist.PushBack(\\\"Bob\\\") mylist.PushBack(\\\"Charlie\\\") // 在链表头部添加元素 mylist.PushFront(\\\"David\\\") // 遍历链表并打印元素 fmt.Println(\\\"List contents (forward):\\\") for e := mylist.Front(); e != nil; e = e.Next() { fmt.Println(e.Value) } // 访问链表尾部元素 fmt.Println(\\\"Last element:\\\", mylist.Back().Value) // 删除链表中的一个元素 secondElement := mylist.Front().Next() mylist.Remove(secondElement) // 再次遍历链表并打印元素 fmt.Println(\\\"List contents after removal:\\\") for e := mylist.Front(); e != nil; e = e.Next() { fmt.Println(e.Value) } }\"]},\"163\":{\"h\":\"解释示例代码：\",\"t\":[\"创建链表和插入操作:\",\"list.New(): 创建一个新的空链表。\",\"PushBack(value interface{}): 将元素添加到链表的末尾。\",\"PushFront(value interface{}): 将元素添加到链表的头部。\",\"遍历链表:\",\"Front(): 获取链表的第一个元素。\",\"Back(): 获取链表的最后一个元素。\",\"Next(): 获取下一个节点。\",\"使用 for 循环遍历链表，从头到尾访问每个元素。\",\"删除操作:\",\"Remove(e *Element): 从链表中移除指定的元素。\",\"在上述示例中，我们首先创建了一个双向链表 mylist，然后向其中添加了几个元素。我们展示了如何从头部和尾部插入元素，以及如何遍历链表并打印每个元素。最后，我们演示了如何从链表中移除一个元素，并再次遍历链表来验证删除操作的效果。\",\"通过 container/list 包，你可以方便地实现和操作双向链表，适用于需要频繁插入、删除或者遍历操作的场景，例如实现队列、栈或者其他需要动态管理元素顺序的数据结构。\"]},\"164\":{\"h\":\"5. 环形链表（ring）\",\"t\":[\"container/ring 包提供了环形链表的实现，它可以方便地进行环形数据结构的操作。环形链表是一种特殊的链表，其中最后一个元素指向第一个元素，形成一个闭环。这种数据结构在循环遍历和轮转操作中非常有用。下面是一个简单的示例，演示了如何使用 container/ring 包来操作环形链表：\",\"package main import ( \\\"container/ring\\\" \\\"fmt\\\" ) func main() { // 创建一个环形链表，初始长度为 3 myring := ring.New(3) // 初始化环形链表的值 for i := 1; i <= myring.Len(); i++ { myring.Value = fmt.Sprintf(\\\"Node %d\\\", i) myring = myring.Next() } // 打印环形链表的所有值 fmt.Println(\\\"Ring contents:\\\") myring.Do(func(value interface{}) { fmt.Println(value) }) // 在环形链表中轮转一次 myring = myring.Move(1) // 打印轮转后的环形链表的所有值 fmt.Println(\\\"\\\\nAfter rotation:\\\") myring.Do(func(value interface{}) { fmt.Println(value) }) }\"]},\"165\":{\"h\":\"解释示例代码：\",\"t\":[\"创建环形链表和初始化:\",\"ring.New(n int): 创建一个包含 n 个元素的环形链表。\",\"使用 for 循环初始化环形链表的每个节点的值。\",\"遍历环形链表:\",\"Do(func(value interface{})): 遍历环形链表的所有节点，并对每个节点执行指定的函数。\",\"轮转操作:\",\"Move(n int) *Ring: 将环形链表向前（正数）或向后（负数）轮转 n 个位置。\",\"在示例中，我们首先创建了一个包含三个元素的环形链表 myring。然后，我们使用 for 循环为每个节点赋值，然后打印环形链表的所有值。接下来，我们对环形链表进行一次轮转操作，将链表向前移动一个位置，再次打印轮转后的环形链表的所有值。\",\"通过 container/ring 包，你可以方便地实现和操作环形链表，这种数据结构在需要循环遍历或轮转操作的场景中非常有用，例如实现循环队列、任务调度等。\"]},\"166\":{\"h\":\"crypto\",\"t\":[\"在 Go 语言中，crypto 包提供了一组用于加密和解密的功能。以下是一些常用的 crypto 包及其子包的 API 及其详细说明：\"]},\"167\":{\"h\":\"1.\"},\"168\":{\"h\":\"\",\"t\":[\"计算数据的 MD5 哈希值。\",\"package main import ( \\\"crypto/md5\\\" \\\"fmt\\\" \\\"io\\\" ) func main() { data := \\\"Hello, World!\\\" hash := md5.Sum([]byte(data)) fmt.Printf(\\\"MD5: %x\\\\n\\\", hash) }\"]},\"169\":{\"h\":\"\",\"t\":[\"创建一个新的 MD5 哈希。\",\"package main import ( \\\"crypto/md5\\\" \\\"fmt\\\" \\\"io\\\" ) func main() { hasher := md5.New() io.WriteString(hasher, \\\"Hello, \\\") io.WriteString(hasher, \\\"World!\\\") fmt.Printf(\\\"MD5: %x\\\\n\\\", hasher.Sum(nil)) }\"]},\"170\":{\"h\":\"2.\"},\"171\":{\"h\":\"\",\"t\":[\"计算数据的 SHA-1 哈希值。\",\"package main import ( \\\"crypto/sha1\\\" \\\"fmt\\\" ) func main() { data := \\\"Hello, World!\\\" hash := sha1.Sum([]byte(data)) fmt.Printf(\\\"SHA-1: %x\\\\n\\\", hash) }\"]},\"172\":{\"h\":\"\",\"t\":[\"创建一个新的 SHA-1 哈希。\",\"package main import ( \\\"crypto/sha1\\\" \\\"fmt\\\" \\\"io\\\" ) func main() { hasher := sha1.New() io.WriteString(hasher, \\\"Hello, \\\") io.WriteString(hasher, \\\"World!\\\") fmt.Printf(\\\"SHA-1: %x\\\\n\\\", hasher.Sum(nil)) }\"]},\"173\":{\"h\":\"3.\"},\"174\":{\"h\":\"\",\"t\":[\"计算数据的 SHA-256 哈希值。\",\"package main import ( \\\"crypto/sha256\\\" \\\"fmt\\\" ) func main() { data := \\\"Hello, World!\\\" hash := sha256.Sum256([]byte(data)) fmt.Printf(\\\"SHA-256: %x\\\\n\\\", hash) }\"]},\"175\":{\"h\":\"\",\"t\":[\"创建一个新的 SHA-256 哈希。\",\"package main import ( \\\"crypto/sha256\\\" \\\"fmt\\\" \\\"io\\\" ) func main() { hasher := sha256.New() io.WriteString(hasher, \\\"Hello, \\\") io.WriteString(hasher, \\\"World!\\\") fmt.Printf(\\\"SHA-256: %x\\\\n\\\", hasher.Sum(nil)) }\"]},\"176\":{\"h\":\"4.\"},\"177\":{\"h\":\"\",\"t\":[\"创建一个新的 AES 加密器。\",\"package main import ( \\\"crypto/aes\\\" \\\"crypto/cipher\\\" \\\"crypto/rand\\\" \\\"fmt\\\" \\\"io\\\" ) func main() { key := []byte(\\\"example key 1234\\\") plaintext := []byte(\\\"some really really really long plaintext\\\") block, err := aes.NewCipher(key) if err != nil { fmt.Println(\\\"Error:\\\", err) return } ciphertext := make([]byte, aes.BlockSize+len(plaintext)) iv := ciphertext[:aes.BlockSize] if _, err := io.ReadFull(rand.Reader, iv); err != nil { fmt.Println(\\\"Error:\\\", err) return } stream := cipher.NewCFBEncrypter(block, iv) stream.XORKeyStream(ciphertext[aes.BlockSize:], plaintext) fmt.Printf(\\\"Encrypted: %x\\\\n\\\", ciphertext) // 解密 stream = cipher.NewCFBDecrypter(block, iv) stream.XORKeyStream(ciphertext[aes.BlockSize:], ciphertext[aes.BlockSize:]) fmt.Printf(\\\"Decrypted: %s\\\\n\\\", ciphertext[aes.BlockSize:]) }\"]},\"178\":{\"h\":\"5.\"},\"179\":{\"h\":\"生成 RSA 密钥对\",\"t\":[\"package main import ( \\\"crypto/rand\\\" \\\"crypto/rsa\\\" \\\"crypto/x509\\\" \\\"encoding/pem\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { // 生成私钥 privateKey, err := rsa.GenerateKey(rand.Reader, 2048) if err != nil { fmt.Println(\\\"Error generating RSA key:\\\", err) return } // 保存私钥到文件 privateFile, err := os.Create(\\\"private.pem\\\") if err != nil { fmt.Println(\\\"Error creating file:\\\", err) return } defer privateFile.Close() privateKeyBytes := x509.MarshalPKCS1PrivateKey(privateKey) pem.Encode(privateFile, &pem.Block{ Type: \\\"RSA PRIVATE KEY\\\", Bytes: privateKeyBytes, }) // 生成公钥 publicKey := &privateKey.PublicKey // 保存公钥到文件 publicFile, err := os.Create(\\\"public.pem\\\") if err != nil { fmt.Println(\\\"Error creating file:\\\", err) return } defer publicFile.Close() publicKeyBytes, err := x509.MarshalPKIXPublicKey(publicKey) if err != nil { fmt.Println(\\\"Error marshalling public key:\\\", err) return } pem.Encode(publicFile, &pem.Block{ Type: \\\"RSA PUBLIC KEY\\\", Bytes: publicKeyBytes, }) fmt.Println(\\\"RSA key pair generated and saved to files.\\\") }\"]},\"180\":{\"h\":\"加密和解密\",\"t\":[\"package main import ( \\\"crypto/rand\\\" \\\"crypto/rsa\\\" \\\"crypto/x509\\\" \\\"encoding/pem\\\" \\\"fmt\\\" \\\"io/ioutil\\\" \\\"os\\\" ) func main() { // 加载公钥 publicKeyFile, err := os.Open(\\\"public.pem\\\") if err != nil { fmt.Println(\\\"Error opening public key file:\\\", err) return } defer publicKeyFile.Close() publicKeyBytes, err := ioutil.ReadAll(publicKeyFile) if err != nil { fmt.Println(\\\"Error reading public key file:\\\", err) return } block, _ := pem.Decode(publicKeyBytes) publicKey, err := x509.ParsePKIXPublicKey(block.Bytes) if err != nil { fmt.Println(\\\"Error parsing public key:\\\", err) return } // 加密 plaintext := []byte(\\\"Hello, RSA encryption!\\\") ciphertext, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey.(*rsa.PublicKey), plaintext) if err != nil { fmt.Println(\\\"Error encrypting:\\\", err) return } fmt.Printf(\\\"Encrypted: %x\\\\n\\\", ciphertext) // 加载私钥 privateKeyFile, err := os.Open(\\\"private.pem\\\") if err != nil { fmt.Println(\\\"Error opening private key file:\\\", err) return } defer privateKeyFile.Close() privateKeyBytes, err := ioutil.ReadAll(privateKeyFile) if err != nil { fmt.Println(\\\"Error reading private key file:\\\", err) return } block, _ = pem.Decode(privateKeyBytes) privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes) if err != nil { fmt.Println(\\\"Error parsing private key:\\\", err) return } // 解密 decrypted, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, ciphertext) if err != nil { fmt.Println(\\\"Error decrypting:\\\", err) return } fmt.Printf(\\\"Decrypted: %s\\\\n\\\", decrypted) }\"]},\"181\":{\"h\":\"6.\"},\"182\":{\"h\":\"和\",\"t\":[\"使用 HMAC（基于哈希的消息认证码）进行数据完整性验证。\",\"package main import ( \\\"crypto/hmac\\\" \\\"crypto/sha256\\\" \\\"fmt\\\" ) func main() { key := []byte(\\\"mysecretkey\\\") message := []byte(\\\"Hello, World!\\\") mac := hmac.New(sha256.New, key) mac.Write(message) expectedMAC := mac.Sum(nil) fmt.Printf(\\\"HMAC: %x\\\\n\\\", expectedMAC) }\"]},\"183\":{\"h\":\"7.\"},\"184\":{\"h\":\"生成 ECDSA 密钥对\",\"t\":[\"package main import ( \\\"crypto/ecdsa\\\" \\\"crypto/elliptic\\\" \\\"crypto/rand\\\" \\\"crypto/x509\\\" \\\"encoding/pem\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { // 生成私钥 privateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader) if err != nil { fmt.Println(\\\"Error generating ECDSA key:\\\", err) return } // 保存私钥到文件 privateFile, err := os.Create(\\\"ecdsa_private.pem\\\") if err != nil { fmt.Println(\\\"Error creating file:\\\", err) return } defer privateFile.Close() privateKeyBytes, err := x509.MarshalECPrivateKey(privateKey) if err != nil { fmt.Println(\\\"Error marshalling private key:\\\", err) return } pem.Encode(privateFile, &pem.Block{ Type: \\\"EC PRIVATE KEY\\\", Bytes: privateKeyBytes, }) // 生成公钥 publicKey := &privateKey.PublicKey // 保存公钥到文件 publicFile, err := os.Create(\\\"ecdsa_public.pem\\\") if err != nil { fmt.Println(\\\"Error creating file:\\\", err) return } defer publicFile.Close() publicKeyBytes, err := x509.MarshalPKIXPublicKey(publicKey) if err != nil { fmt.Println(\\\"Error marshalling public key:\\\", err) return } pem.Encode(publicFile, &pem.Block{ Type: \\\"EC PUBLIC KEY\\\", Bytes: publicKeyBytes, }) fmt.Println(\\\"ECDSA key pair generated and saved to files.\\\") }\"]},\"185\":{\"h\":\"签名和验证\",\"t\":[\"package main import ( \\\"crypto/ecdsa\\\" \\\"crypto/elliptic\\\" \\\"crypto/rand\\\" \\\"crypto/sha256\\\" \\\"crypto/x509\\\" \\\"encoding/pem\\\" \\\"fmt\\\" \\\"io/ioutil\\\" \\\"os\\\" ) func main() { // 加载私钥 privateKeyFile, err := os.Open(\\\"ecdsa_private.pem\\\") if err != nil { fmt.Println(\\\"Error opening private key file:\\\", err) return } defer privateKeyFile.Close() privateKeyBytes, err := ioutil.ReadAll(privateKeyFile) if err != nil { fmt.Println(\\\"Error reading private key file:\\\", err) return } block, _ := pem.Decode(privateKeyBytes) privateKey, err := x509.ParseECPrivateKey(block.Bytes) if err != nil { fmt.Println(\\\"Error parsing private key:\\\", err) return } // 签名 message := []byte(\\\"Hello, ECDSA signature!\\\") hash := sha256.Sum256(message) r, s, err := ecdsa.Sign(rand.Reader, privateKey, hash[:]) if err != nil { fmt.Println(\\\"Error signing:\\\", err) return } fmt.Printf(\\\"Signature: (r: %x, s: %x)\\\\n\\\", r, s) // 加载公钥 publicKeyFile, err := os.Open(\\\"ecdsa_public.pem\\\") if err != nil { fmt.Println(\\\"Error opening public key file:\\\", err) return } defer publicKeyFile.Close() publicKeyBytes, err := ioutil.ReadAll(publicKeyFile) if err != nil { fmt.Println(\\\"Error reading public key file:\\\", err) return } block, _ = pem.Decode(publicKeyBytes) publicKey, err := x509.ParsePKIXPublicKey(block.Bytes) if err != nil { fmt.Println(\\\"Error parsing public key:\\\", err) return } // 验证 valid := ecdsa.Verify(publicKey.(*ecdsa.PublicKey), hash[:], r, s) fmt.Println(\\\"Signature valid:\\\", valid) }\",\"通过以上这些 crypto 包及其子包中的基本 API，你可以方便地在 Go 程序中实现各种加密和解密操作，包括哈希计算、对称加密、非对称加密、数字签名和验证等。\"]},\"186\":{\"h\":\"encoding/csv\",\"t\":[\"在 Go 语言中，encoding/csv 包提供了对 CSV（逗号分隔值）文件进行读写的功能。以下是一些常用的 encoding/csv 包的 API 及其详细说明：\"]},\"187\":{\"h\":\"1. 读取 CSV 文件\"},\"188\":{\"h\":\"\",\"t\":[\"创建一个 CSV 读取器。\",\"package main import ( \\\"encoding/csv\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { file, err := os.Open(\\\"data.csv\\\") if err != nil { fmt.Println(\\\"Error opening file:\\\", err) return } defer file.Close() reader := csv.NewReader(file) records, err := reader.ReadAll() if err != nil { fmt.Println(\\\"Error reading CSV:\\\", err) return } for _, record := range records { fmt.Println(record) } }\"]},\"189\":{\"h\":\"\",\"t\":[\"逐行读取 CSV 文件。\",\"package main import ( \\\"encoding/csv\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { file, err := os.Open(\\\"data.csv\\\") if err != nil { fmt.Println(\\\"Error opening file:\\\", err) return } defer file.Close() reader := csv.NewReader(file) for { record, err := reader.Read() if err != nil { if err.Error() == \\\"EOF\\\" { break } fmt.Println(\\\"Error reading CSV:\\\", err) return } fmt.Println(record) } }\"]},\"190\":{\"h\":\"2. 写入 CSV 文件\"},\"191\":{\"h\":\"\",\"t\":[\"创建一个 CSV 写入器。\",\"package main import ( \\\"encoding/csv\\\" \\\"os\\\" ) func main() { file, err := os.Create(\\\"output.csv\\\") if err != nil { fmt.Println(\\\"Error creating file:\\\", err) return } defer file.Close() writer := csv.NewWriter(file) defer writer.Flush() data := [][]string{ {\\\"Name\\\", \\\"Age\\\", \\\"City\\\"}, {\\\"Alice\\\", \\\"30\\\", \\\"New York\\\"}, {\\\"Bob\\\", \\\"25\\\", \\\"Los Angeles\\\"}, } for _, record := range data { err := writer.Write(record) if err != nil { fmt.Println(\\\"Error writing CSV:\\\", err) return } } }\"]},\"192\":{\"h\":\"\",\"t\":[\"一次性写入所有记录。\",\"package main import ( \\\"encoding/csv\\\" \\\"os\\\" ) func main() { file, err := os.Create(\\\"output.csv\\\") if err != nil { fmt.Println(\\\"Error creating file:\\\", err) return } defer file.Close() writer := csv.NewWriter(file) defer writer.Flush() data := [][]string{ {\\\"Name\\\", \\\"Age\\\", \\\"City\\\"}, {\\\"Alice\\\", \\\"30\\\", \\\"New York\\\"}, {\\\"Bob\\\", \\\"25\\\", \\\"Los Angeles\\\"}, } err = writer.WriteAll(data) if err != nil { fmt.Println(\\\"Error writing CSV:\\\", err) } }\"]},\"193\":{\"h\":\"3. 自定义分隔符\"},\"194\":{\"h\":\"\",\"t\":[\"更改默认的分隔符（默认为逗号）。\",\"package main import ( \\\"encoding/csv\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { file, err := os.Open(\\\"data.tsv\\\") if err != nil { fmt.Println(\\\"Error opening file:\\\", err) return } defer file.Close() reader := csv.NewReader(file) reader.Comma = '\\\\t' // 使用制表符作为分隔符 records, err := reader.ReadAll() if err != nil { fmt.Println(\\\"Error reading CSV:\\\", err) return } for _, record := range records { fmt.Println(record) } }\"]},\"195\":{\"h\":\"4. 处理大文件\"},\"196\":{\"h\":\"逐行读取和处理\",\"t\":[\"对于大文件，可以逐行读取和处理记录以节省内存。\",\"package main import ( \\\"encoding/csv\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { file, err := os.Open(\\\"large_data.csv\\\") if err != nil { fmt.Println(\\\"Error opening file:\\\", err) return } defer file.Close() reader := csv.NewReader(file) for { record, err := reader.Read() if err != nil { if err.Error() == \\\"EOF\\\" { break } fmt.Println(\\\"Error reading CSV:\\\", err) return } fmt.Println(record) } }\"]},\"197\":{\"h\":\"5. 处理错误\"},\"198\":{\"h\":\"自定义错误处理\",\"t\":[\"在读取和写入过程中处理错误。\",\"package main import ( \\\"encoding/csv\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { file, err := os.Open(\\\"data.csv\\\") if err != nil { fmt.Println(\\\"Error opening file:\\\", err) return } defer file.Close() reader := csv.NewReader(file) for { record, err := reader.Read() if err != nil { if err.Error() == \\\"EOF\\\" { break } fmt.Printf(\\\"Error reading record: %v\\\\n\\\", err) continue } fmt.Println(record) } }\"]},\"199\":{\"h\":\"6. CSV 数据解析到结构体\"},\"200\":{\"h\":\"使用结构体标签\",\"t\":[\"将 CSV 数据解析为结构体。\",\"package main import ( \\\"encoding/csv\\\" \\\"fmt\\\" \\\"os\\\" \\\"reflect\\\" \\\"strconv\\\" ) type Person struct { Name string Age int City string } func main() { file, err := os.Open(\\\"data.csv\\\") if err != nil { fmt.Println(\\\"Error opening file:\\\", err) return } defer file.Close() reader := csv.NewReader(file) records, err := reader.ReadAll() if err != nil { fmt.Println(\\\"Error reading CSV:\\\", err) return } var people []Person for _, record := range records[1:] { // 跳过标题行 age, _ := strconv.Atoi(record[1]) person := Person{ Name: record[0], Age: age, City: record[2], } people = append(people, person) } for _, person := range people { fmt.Printf(\\\"%+v\\\\n\\\", person) } }\",\"通过以上这些 encoding/csv 包中的基本 API，你可以方便地在 Go 程序中处理 CSV 数据。无论是简单的数据读写，还是复杂的自定义处理，都可以通过这些 API 进行高效的操作。\"]},\"201\":{\"h\":\"encoding/json\",\"t\":[\"在 Go 语言中，encoding/json 包提供了对 JSON 数据进行编码和解码的功能。以下是一些常用的 encoding/json 包的 API 及其详细说明：\"]},\"202\":{\"h\":\"1. JSON 编码\"},\"203\":{\"h\":\"\",\"t\":[\"将 Go 对象转换为 JSON 格式的字节切片。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} data, err := json.Marshal(p) if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) }\"]},\"204\":{\"h\":\"\",\"t\":[\"将 Go 对象转换为带缩进格式的 JSON 字节切片。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} data, err := json.MarshalIndent(p, \\\"\\\", \\\" \\\") if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) }\"]},\"205\":{\"h\":\"2. JSON 解码\"},\"206\":{\"h\":\"\",\"t\":[\"将 JSON 字节切片解码为 Go 对象。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } func main() { data := []byte(`{\\\"name\\\":\\\"Alice\\\",\\\"age\\\":30}`) var p Person err := json.Unmarshal(data, &p) if err != nil { fmt.Println(\\\"Error unmarshalling:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p) }\"]},\"207\":{\"h\":\"3. 使用 和\"},\"208\":{\"h\":\"\",\"t\":[\"创建一个 JSON 解码器，可以逐步从 io.Reader 读取 JSON 数据。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" \\\"strings\\\" ) type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } func main() { data := `{\\\"name\\\":\\\"Alice\\\",\\\"age\\\":30}` reader := strings.NewReader(data) decoder := json.NewDecoder(reader) var p Person err := decoder.Decode(&p) if err != nil { fmt.Println(\\\"Error decoding:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p) }\"]},\"209\":{\"h\":\"\",\"t\":[\"创建一个 JSON 编码器，可以逐步向 io.Writer 写入 JSON 数据。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" \\\"os\\\" ) type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} encoder := json.NewEncoder(os.Stdout) err := encoder.Encode(p) if err != nil { fmt.Println(\\\"Error encoding:\\\", err) } }\"]},\"210\":{\"h\":\"4. 自定义 JSON 编码和解码\"},\"211\":{\"h\":\"实现 接口\",\"t\":[\"自定义类型的 JSON 编码。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Person struct { Name string Age int } func (p Person) MarshalJSON() ([]byte, error) { return json.Marshal(map[string]interface{}{ \\\"name\\\": p.Name, \\\"age\\\": p.Age, }) } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} data, err := json.Marshal(p) if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) }\"]},\"212\":{\"h\":\"实现 接口\",\"t\":[\"自定义类型的 JSON 解码。\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Person struct { Name string Age int } func (p *Person) UnmarshalJSON(data []byte) error { var aux struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } if err := json.Unmarshal(data, &aux); err != nil { return err } p.Name = aux.Name p.Age = aux.Age return nil } func main() { data := []byte(`{\\\"name\\\":\\\"Alice\\\",\\\"age\\\":30}`) var p Person err := json.Unmarshal(data, &p) if err != nil { fmt.Println(\\\"Error unmarshalling:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p) }\"]},\"213\":{\"h\":\"5. 处理嵌套和复杂结构\"},\"214\":{\"h\":\"嵌套结构的编码和解码\",\"t\":[\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Address struct { Street string `json:\\\"street\\\"` City string `json:\\\"city\\\"` } type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address Address `json:\\\"address\\\"` } func main() { p := Person{ Name: \\\"Alice\\\", Age: 30, Address: Address{ Street: \\\"123 Main St\\\", City: \\\"Metropolis\\\", }, } data, err := json.MarshalIndent(p, \\\"\\\", \\\" \\\") if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) var p2 Person err = json.Unmarshal(data, &p2) if err != nil { fmt.Println(\\\"Error unmarshalling:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p2) }\",\"通过以上这些 encoding/json 包中的基本 API，你可以方便地在 Go 程序中处理 JSON 数据。无论是简单的数据结构还是复杂的嵌套对象，都可以通过这些 API 进行高效的编码和解码操作。\"]},\"215\":{\"h\":\"encoding/xml\",\"t\":[\"在 Go 语言中，encoding/xml 包提供了对 XML 数据进行编码和解码的功能。以下是一些常用的 encoding/xml 包的 API 及其详细说明：\"]},\"216\":{\"h\":\"1. XML 编码\"},\"217\":{\"h\":\"\",\"t\":[\"将 Go 对象转换为 XML 格式的字节切片。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" ) type Person struct { XMLName xml.Name `xml:\\\"person\\\"` Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} data, err := xml.Marshal(p) if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) }\"]},\"218\":{\"h\":\"\",\"t\":[\"将 Go 对象转换为带缩进格式的 XML 字节切片。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" ) type Person struct { XMLName xml.Name `xml:\\\"person\\\"` Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} data, err := xml.MarshalIndent(p, \\\"\\\", \\\" \\\") if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) }\"]},\"219\":{\"h\":\"2. XML 解码\"},\"220\":{\"h\":\"\",\"t\":[\"将 XML 字节切片解码为 Go 对象。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" ) type Person struct { XMLName xml.Name `xml:\\\"person\\\"` Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { data := []byte(`<person><name>Alice</name><age>30</age></person>`) var p Person err := xml.Unmarshal(data, &p) if err != nil { fmt.Println(\\\"Error unmarshalling:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p) }\"]},\"221\":{\"h\":\"3. 使用 和\"},\"222\":{\"h\":\"\",\"t\":[\"创建一个 XML 解码器，可以逐步从 io.Reader 读取 XML 数据。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" \\\"strings\\\" ) type Person struct { XMLName xml.Name `xml:\\\"person\\\"` Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { data := `<person><name>Alice</name><age>30</age></person>` reader := strings.NewReader(data) decoder := xml.NewDecoder(reader) var p Person err := decoder.Decode(&p) if err != nil { fmt.Println(\\\"Error decoding:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p) }\"]},\"223\":{\"h\":\"\",\"t\":[\"创建一个 XML 编码器，可以逐步向 io.Writer 写入 XML 数据。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" \\\"os\\\" ) type Person struct { XMLName xml.Name `xml:\\\"person\\\"` Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { p := Person{Name: \\\"Alice\\\", Age: 30} encoder := xml.NewEncoder(os.Stdout) err := encoder.Encode(p) if err != nil { fmt.Println(\\\"Error encoding:\\\", err) } }\"]},\"224\":{\"h\":\"4. 自定义 XML 编码和解码\"},\"225\":{\"h\":\"自定义标签名称\",\"t\":[\"通过结构体标签自定义 XML 元素名称。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" ) type Person struct { XMLName xml.Name `xml:\\\"person\\\"` FullName string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { p := Person{FullName: \\\"Alice\\\", Age: 30} data, err := xml.MarshalIndent(p, \\\"\\\", \\\" \\\") if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) }\"]},\"226\":{\"h\":\"嵌套结构的编码和解码\",\"t\":[\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" ) type Address struct { Street string `xml:\\\"street\\\"` City string `xml:\\\"city\\\"` } type Person struct { XMLName xml.Name `xml:\\\"person\\\"` Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` Address Address `xml:\\\"address\\\"` } func main() { p := Person{ Name: \\\"Alice\\\", Age: 30, Address: Address{ Street: \\\"123 Main St\\\", City: \\\"Metropolis\\\", }, } data, err := xml.MarshalIndent(p, \\\"\\\", \\\" \\\") if err != nil { fmt.Println(\\\"Error marshalling:\\\", err) return } fmt.Println(string(data)) var p2 Person err = xml.Unmarshal(data, &p2) if err != nil { fmt.Println(\\\"Error unmarshalling:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p2) }\"]},\"227\":{\"h\":\"5. 处理复杂结构\"},\"228\":{\"h\":\"使用\",\"t\":[\"逐步处理 XML 令牌。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { data := `<person><name>Alice</name><age>30</age></person>` reader := strings.NewReader(data) decoder := xml.NewDecoder(reader) for { token, err := decoder.RawToken() if err != nil { if err.Error() == \\\"EOF\\\" { break } fmt.Println(\\\"Error decoding:\\\", err) return } fmt.Printf(\\\"%T: %v\\\\n\\\", token, token) } }\"]},\"229\":{\"h\":\"使用 和\",\"t\":[\"处理嵌套的 XML 元素。\",\"package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" \\\"strings\\\" ) type Person struct { Name string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` } func main() { data := `<people><person><name>Alice</name><age>30</age></person><person><name>Bob</name><age>25</age></person></people>` reader := strings.NewReader(data) decoder := xml.NewDecoder(reader) var people []Person var person Person for { token, err := decoder.Token() if err != nil { if err.Error() == \\\"EOF\\\" { break } fmt.Println(\\\"Error decoding:\\\", err) return } switch se := token.(type) { case xml.StartElement: if se.Name.Local == \\\"person\\\" { err := decoder.DecodeElement(&person, &se) if err != nil { fmt.Println(\\\"Error decoding element:\\\", err) return } people = append(people, person) } } } for _, p := range people { fmt.Printf(\\\"%+v\\\\n\\\", p) } }\",\"通过以上这些 encoding/xml 包中的基本 API，你可以方便地在 Go 程序中处理 XML 数据。无论是简单的数据结构还是复杂的嵌套对象，都可以通过这些 API 进行高效的编码和解码操作。\"]},\"230\":{\"h\":\"flag\",\"t\":[\"在Go语言中，flag 包是用于处理命令行参数的标准库，它提供了一种简单而直接的方式来解析和使用命令行参数。下面是关于 flag 包的一些基本介绍和常用功能：\"]},\"231\":{\"h\":\"1. 解析命令行参数\",\"t\":[\"使用 flag 包可以轻松地解析命令行参数，并将它们赋值给相应的变量。\",\"基本用法\",\"package main import ( \\\"flag\\\" \\\"fmt\\\" ) func main() { // 定义命令行参数 var name string var age int // 解析命令行参数 flag.StringVar(&name, \\\"name\\\", \\\"Guest\\\", \\\"Your name\\\") flag.IntVar(&age, \\\"age\\\", 20, \\\"Your age\\\") // 必须调用 Parse 函数 flag.Parse() // 输出解析后的参数 fmt.Println(\\\"Name:\\\", name) fmt.Println(\\\"Age:\\\", age) }\",\"在上述例子中，flag.StringVar 和 flag.IntVar 分别用于定义一个字符串类型和整数类型的命令行参数。flag.Parse() 函数用于解析命令行参数，并将其赋值给相应的变量。通过命令行运行程序时，可以使用 -name 和 -age 参数指定对应的值。\",\"例如，运行程序时可以这样使用：\",\"go run main.go -name Alice -age 30\"]},\"232\":{\"h\":\"2. 默认值和帮助信息\",\"t\":[\"在使用 flag.StringVar 和 flag.IntVar 定义命令行参数时，可以指定默认值和参数的帮助信息。\",\"flag.StringVar(&name, \\\"name\\\", \\\"Guest\\\", \\\"Your name\\\") flag.IntVar(&age, \\\"age\\\", 20, \\\"Your age\\\")\",\"这里 \\\"name\\\" 和 \\\"age\\\" 是命令行参数的名称，\\\"Guest\\\" 和 20 是默认值，帮助信息 \\\"Your name\\\" 和 \\\"Your age\\\" 会在用户请求帮助时显示出来。\"]},\"233\":{\"h\":\"3. 非命令行参数\",\"t\":[\"除了使用 -name 和 -age 这种形式的命令行参数外，flag 包还支持解析非命令行参数（位置参数）。这些参数可以通过 flag.Args() 函数来获取。\",\"package main import ( \\\"flag\\\" \\\"fmt\\\" ) func main() { // 解析命令行参数 flag.Parse() // 获取非命令行参数 args := flag.Args() fmt.Println(\\\"Non-flag arguments:\\\", args) }\"]},\"234\":{\"h\":\"4. 自定义使用说明\",\"t\":[\"使用 flag.Usage 函数可以自定义程序的使用说明。默认情况下，当用户提供无效的参数或者请求帮助时，会输出默认的使用说明信息。\",\"flag.Usage = func() { fmt.Fprintf(os.Stderr, \\\"Usage of %s:\\\\n\\\", os.Args[0]) fmt.Fprintf(os.Stderr, \\\" -name string\\\\n\\\") fmt.Fprintf(os.Stderr, \\\" Your name (default \\\\\\\"Guest\\\\\\\")\\\\n\\\") fmt.Fprintf(os.Stderr, \\\" -age int\\\\n\\\") fmt.Fprintf(os.Stderr, \\\" Your age (default 20)\\\\n\\\") }\",\"这样定义后，当用户使用 -h 或者提供无效参数时，会显示自定义的使用说明信息。\"]},\"235\":{\"h\":\"总结\",\"t\":[\"flag 包提供了一个简单而强大的方法来处理命令行参数，它使得你可以轻松定义、解析和使用命令行参数，包括可选参数、必选参数、默认值和帮助信息等。这使得编写命令行工具或者控制台程序时，处理用户输入变得非常方便和直观。\"]},\"236\":{\"h\":\"fmt\",\"t\":[\"在 Go 语言的标准库中，fmt 包是非常重要的，它提供了处理格式化输入和输出的基本工具。以下是一些 fmt 包内常用的API：\"]},\"237\":{\"h\":\"1. 格式化输出\",\"t\":[\"Go语言中最基本的输出函数是 fmt.Print、fmt.Println 和 fmt.Printf。它们用于将数据输出到控制台或其他输出设备。\",\"fmt.Print: 输出参数，不添加换行符。\",\"fmt.Print(\\\"Hello, \\\") fmt.Print(\\\"World!\\\") // 输出: Hello, World!\",\"fmt.Println: 输出参数并添加换行符。\",\"fmt.Println(\\\"Hello,\\\") fmt.Println(\\\"World!\\\") // 输出: // Hello, // World!\",\"fmt.Printf: 根据指定格式输出参数。\",\"name := \\\"Alice\\\" age := 30 fmt.Printf(\\\"Name: %s, Age: %d\\\\n\\\", name, age) // 输出: Name: Alice, Age: 30\"]},\"238\":{\"h\":\"2. 格式化占位符\",\"t\":[\"在 Printf 函数中，可以使用各种格式化占位符来指定输出的格式。\",\"%v: 默认格式。\",\"%+v: 对结构体输出字段名。\",\"%#v: 输出 Go 语法表示。\",\"%T: 输出变量类型。\",\"%d, %f, %s, %t, %p 等: 分别用于整数、浮点数、字符串、布尔值、指针等类型的格式化输出。\",\"name := \\\"Bob\\\" age := 25 fmt.Printf(\\\"Name: %s, Age: %d\\\\n\\\", name, age) // 输出: Name: Bob, Age: 25\"]},\"239\":{\"h\":\"3. 输入\",\"t\":[\"使用 fmt.Scan 可以从标准输入中读取数据。\",\"var name string fmt.Print(\\\"Enter your name: \\\") fmt.Scan(&name) fmt.Printf(\\\"Hello, %s!\\\\n\\\", name)\"]},\"240\":{\"h\":\"4. 自定义格式化输出\",\"t\":[\"通过实现 String() 方法可以自定义类型的字符串表示方式。\",\"type Person struct { Name string Age int } func (p Person) String() string { return fmt.Sprintf(\\\"%s (%d years)\\\", p.Name, p.Age) } func main() { p := Person{\\\"Alice\\\", 30} fmt.Println(p) // 输出: Alice (30 years) }\"]},\"241\":{\"h\":\"5. 错误输出\",\"t\":[\"使用 fmt.Errorf 可以生成格式化的错误信息。\",\"import \\\"fmt\\\" func someFunction() error { return fmt.Errorf(\\\"Something went wrong\\\") } func main() { err := someFunction() if err != nil { fmt.Println(\\\"Error:\\\", err) } }\"]},\"242\":{\"h\":\"6. 更多高级用法\",\"t\":[\"格式化输出的宽度和精度控制。\",\"fmt.Sprintf 函数用于返回格式化后的字符串。\",\"fmt.Fprint, fmt.Fprintf, fmt.Fprintln 用于格式化输出到文件或其他 io.Writer 接口。\"]},\"243\":{\"h\":\"总结\",\"t\":[\"fmt 包提供了丰富的工具来处理格式化的输入和输出，是Go语言中常用的标准库之一。通过掌握这些基本的函数和格式化占位符，可以很好地满足大部分的格式化输出需求，并能够处理简单的输入操作和错误信息的格式化输出。\"]},\"244\":{\"h\":\"net/http\",\"t\":[\"在 Go 语言中，net/http 包提供了用于构建 HTTP 客户端和服务器的强大工具。以下是一些常用的 net/http 包的 API 及其详细说明：\"]},\"245\":{\"h\":\"1. HTTP 服务器\"},\"246\":{\"h\":\"创建一个简单的 HTTP 服务器\",\"t\":[\"使用 http.HandleFunc 和 http.ListenAndServe 创建一个基本的 HTTP 服务器。\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \\\"Hello, World!\\\") } func main() { http.HandleFunc(\\\"/\\\", handler) fmt.Println(\\\"Server started at http://localhost:8080\\\") http.ListenAndServe(\\\":8080\\\", nil) }\"]},\"247\":{\"h\":\"使用路由器\",\"t\":[\"通过 http.ServeMux 实现简单的路由功能。\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" ) func helloHandler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \\\"Hello, World!\\\") } func aboutHandler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \\\"This is the about page.\\\") } func main() { mux := http.NewServeMux() mux.HandleFunc(\\\"/\\\", helloHandler) mux.HandleFunc(\\\"/about\\\", aboutHandler) fmt.Println(\\\"Server started at http://localhost:8080\\\") http.ListenAndServe(\\\":8080\\\", mux) }\"]},\"248\":{\"h\":\"2. HTTP 客户端\"},\"249\":{\"h\":\"发起 GET 请求\",\"t\":[\"使用 http.Get 发起一个 GET 请求并读取响应。\",\"package main import ( \\\"fmt\\\" \\\"io/ioutil\\\" \\\"net/http\\\" ) func main() { resp, err := http.Get(\\\"http://example.com\\\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Println(err) return } fmt.Println(string(body)) }\"]},\"250\":{\"h\":\"发起 POST 请求\",\"t\":[\"使用 http.Post 发起一个 POST 请求并读取响应。\",\"package main import ( \\\"bytes\\\" \\\"fmt\\\" \\\"io/ioutil\\\" \\\"net/http\\\" ) func main() { data := []byte(`{\\\"name\\\":\\\"Alice\\\"}`) resp, err := http.Post(\\\"http://example.com\\\", \\\"application/json\\\", bytes.NewBuffer(data)) if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Println(err) return } fmt.Println(string(body)) }\"]},\"251\":{\"h\":\"3. 自定义 HTTP 客户端\"},\"252\":{\"h\":\"使用自定义配置\",\"t\":[\"通过 http.Client 和 http.Transport 实现自定义 HTTP 客户端。\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" \\\"time\\\" ) func main() { client := &http.Client{ Timeout: 10 * time.Second, Transport: &http.Transport{ MaxIdleConns: 10, }, } resp, err := client.Get(\\\"http://example.com\\\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Println(err) return } fmt.Println(string(body)) }\"]},\"253\":{\"h\":\"4. 处理表单数据\"},\"254\":{\"h\":\"解析表单数据\",\"t\":[\"在处理表单提交时解析表单数据。\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" ) func formHandler(w http.ResponseWriter, r *http.Request) { if r.Method == http.MethodPost { r.ParseForm() fmt.Fprintf(w, \\\"Post from website! r.PostFrom = %v\\\\n\\\", r.PostForm) } else { http.ServeFile(w, r, \\\"form.html\\\") } } func main() { http.HandleFunc(\\\"/form\\\", formHandler) fmt.Println(\\\"Server started at http://localhost:8080\\\") http.ListenAndServe(\\\":8080\\\", nil) }\",\"创建一个简单的 form.html 文件来测试表单提交。\",\"<!DOCTYPE html> <html> <body> <form action=\\\"/form\\\" method=\\\"post\\\"> Name: <input type=\\\"text\\\" name=\\\"name\\\"><br> Age: <input type=\\\"text\\\" name=\\\"age\\\"><br> <input type=\\\"submit\\\"> </form> </body> </html>\"]},\"255\":{\"h\":\"5. 中间件\"},\"256\":{\"h\":\"创建简单的中间件\",\"t\":[\"通过创建一个函数包装器实现中间件功能。\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" ) func loggingMiddleware(next http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { fmt.Println(\\\"Request received:\\\", r.URL.Path) next.ServeHTTP(w, r) }) } func helloHandler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \\\"Hello, World!\\\") } func main() { mux := http.NewServeMux() mux.HandleFunc(\\\"/\\\", helloHandler) loggedMux := loggingMiddleware(mux) fmt.Println(\\\"Server started at http://localhost:8080\\\") http.ListenAndServe(\\\":8080\\\", loggedMux) }\"]},\"257\":{\"h\":\"6. 处理静态文件\"},\"258\":{\"h\":\"提供静态文件服务\",\"t\":[\"使用 http.FileServer 提供静态文件服务。\",\"package main import ( \\\"net/http\\\" ) func main() { fs := http.FileServer(http.Dir(\\\"./static\\\")) http.Handle(\\\"/\\\", fs) http.ListenAndServe(\\\":8080\\\", nil) }\",\"在项目目录下创建一个 static 文件夹，并放入一些静态文件（如 HTML、CSS、JS 文件）进行测试。\"]},\"259\":{\"h\":\"7. 错误处理\"},\"260\":{\"h\":\"返回自定义错误\",\"t\":[\"自定义 HTTP 错误响应。\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" ) func errorHandler(w http.ResponseWriter, r *http.Request) { w.WriteHeader(http.StatusNotFound) fmt.Fprintf(w, \\\"Custom 404 Page Not Found\\\") } func main() { http.HandleFunc(\\\"/\\\", errorHandler) fmt.Println(\\\"Server started at http://localhost:8080\\\") http.ListenAndServe(\\\":8080\\\", nil) }\",\"通过掌握这些 net/http 包中的基本 API，你可以轻松构建功能强大且灵活的 HTTP 客户端和服务器应用程序。根据具体需求，还可以进一步扩展和自定义这些功能。\"]},\"261\":{\"h\":\"io\",\"t\":[\"在 Go 语言中，io 包提供了基本的输入输出功能。以下是一些常用的 io 包的 API 及其详细说明：\"]},\"262\":{\"h\":\"1. 读取数据\"},\"263\":{\"h\":\"\",\"t\":[\"io.Reader 是一个基本的接口，用于表示数据的读取。它只有一个方法 Read。\",\"type Reader interface { Read(p []byte) (n int, err error) }\"]},\"264\":{\"h\":\"\",\"t\":[\"从 io.Reader 中精确读取 len(buf) 字节的数据。\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"strings\\\" ) func main() { reader := strings.NewReader(\\\"Hello, World!\\\") buf := make([]byte, 5) n, err := io.ReadFull(reader, buf) if err != nil { fmt.Println(err) } fmt.Printf(\\\"Read %d bytes: %s\\\\n\\\", n, string(buf)) }\"]},\"265\":{\"h\":\"\",\"t\":[\"将数据从一个 io.Reader 拷贝到一个 io.Writer。\",\"package main import ( \\\"io\\\" \\\"os\\\" ) func main() { src := strings.NewReader(\\\"Hello, World!\\\") dst := os.Stdout n, err := io.Copy(dst, src) if err != nil { log.Fatal(err) } fmt.Printf(\\\"\\\\nCopied %d bytes\\\\n\\\", n) }\"]},\"266\":{\"h\":\"2. 写入数据\"},\"267\":{\"h\":\"\",\"t\":[\"io.Writer 是一个基本的接口，用于表示数据的写入。它只有一个方法 Write。\",\"type Writer interface { Write(p []byte) (n int, err error) }\"]},\"268\":{\"h\":\"\",\"t\":[\"向 io.Writer 写入字符串。\",\"package main import ( \\\"io\\\" \\\"os\\\" ) func main() { _, err := io.WriteString(os.Stdout, \\\"Hello, World!\\\\n\\\") if err != nil { log.Fatal(err) } }\"]},\"269\":{\"h\":\"3. 缓冲读写\"},\"270\":{\"h\":\"\",\"t\":[\"使用 bufio.NewReader 创建一个带缓冲的读取器。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"strings\\\" ) func main() { reader := bufio.NewReader(strings.NewReader(\\\"Hello, World!\\\")) line, err := reader.ReadString('\\\\n') if err != nil { fmt.Println(err) } fmt.Println(line) }\"]},\"271\":{\"h\":\"\",\"t\":[\"使用 bufio.NewWriter 创建一个带缓冲的写入器。\",\"package main import ( \\\"bufio\\\" \\\"os\\\" ) func main() { writer := bufio.NewWriter(os.Stdout) _, err := writer.WriteString(\\\"Hello, World!\\\\n\\\") if err != nil { log.Fatal(err) } writer.Flush() }\"]},\"272\":{\"h\":\"4. 管道\"},\"273\":{\"h\":\"\",\"t\":[\"创建一个同步的内存管道，用于连接两个 goroutine。\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { r, w := io.Pipe() go func() { defer w.Close() _, err := w.Write([]byte(\\\"Hello, World!\\\\n\\\")) if err != nil { log.Fatal(err) } }() _, err := io.Copy(os.Stdout, r) if err != nil { log.Fatal(err) } }\"]},\"274\":{\"h\":\"5. 多路复用\"},\"275\":{\"h\":\"\",\"t\":[\"创建一个 io.Reader，从多个 io.Reader 顺序读取。\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"Hello, \\\") r2 := strings.NewReader(\\\"World!\\\") reader := io.MultiReader(r1, r2) buf := new(strings.Builder) _, err := io.Copy(buf, reader) if err != nil { fmt.Println(err) } fmt.Println(buf.String()) }\"]},\"276\":{\"h\":\"\",\"t\":[\"创建一个 io.Writer，将数据写入多个 io.Writer。\",\"package main import ( \\\"io\\\" \\\"os\\\" ) func main() { file, err := os.Create(\\\"output.txt\\\") if err != nil { log.Fatal(err) } defer file.Close() writer := io.MultiWriter(os.Stdout, file) _, err = writer.Write([]byte(\\\"Hello, World!\\\\n\\\")) if err != nil { log.Fatal(err) } }\"]},\"277\":{\"h\":\"6. 限制读取\"},\"278\":{\"h\":\"\",\"t\":[\"创建一个 io.Reader，从原始 io.Reader 中读取指定字节数。\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"strings\\\" ) func main() { reader := strings.NewReader(\\\"Hello, World!\\\") limitedReader := io.LimitReader(reader, 5) buf := new(strings.Builder) _, err := io.Copy(buf, limitedReader) if err != nil { fmt.Println(err) } fmt.Println(buf.String()) // 输出: Hello }\"]},\"279\":{\"h\":\"7. 计数读取\"},\"280\":{\"h\":\"\",\"t\":[\"创建一个 io.Reader，从 io.Reader 读取并将读取的数据写入 io.Writer。\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"os\\\" \\\"strings\\\" ) func main() { src := strings.NewReader(\\\"Hello, World!\\\") dst := os.Stdout teeReader := io.TeeReader(src, dst) buf := new(strings.Builder) _, err := io.Copy(buf, teeReader) if err != nil { fmt.Println(err) } fmt.Println(\\\"\\\\nRead data:\\\", buf.String()) // 输出: Hello, World! }\",\"通过以上这些 io 包中的基本 API，你可以方便地处理各种输入输出操作。根据具体需求，还可以结合 bufio 包和 os 包实现更复杂的读写逻辑。\"]},\"281\":{\"h\":\"log\",\"t\":[\"在 Go 语言中，log 包提供了简单的日志记录功能。以下是一些常用的 log 包的 API 及其详细说明：\"]},\"282\":{\"h\":\"1. 基本日志记录\"},\"283\":{\"h\":\"\",\"t\":[\"记录一条日志。\",\"package main import ( \\\"log\\\" ) func main() { log.Print(\\\"This is a log message\\\") }\"]},\"284\":{\"h\":\"\",\"t\":[\"记录一条日志，并添加换行符。\",\"package main import ( \\\"log\\\" ) func main() { log.Println(\\\"This is a log message with a newline\\\") }\"]},\"285\":{\"h\":\"\",\"t\":[\"记录一条格式化的日志。\",\"package main import ( \\\"log\\\" ) func main() { name := \\\"Alice\\\" age := 30 log.Printf(\\\"Name: %s, Age: %d\\\", name, age) }\"]},\"286\":{\"h\":\"2. 日志级别\"},\"287\":{\"h\":\"\",\"t\":[\"记录一条日志并调用 os.Exit(1) 退出程序。\",\"package main import ( \\\"log\\\" ) func main() { log.Fatal(\\\"This is a fatal log message\\\") }\"]},\"288\":{\"h\":\"\",\"t\":[\"记录一条格式化的日志并调用 os.Exit(1) 退出程序。\",\"package main import ( \\\"log\\\" ) func main() { name := \\\"Alice\\\" age := 30 log.Fatalf(\\\"Fatal: Name: %s, Age: %d\\\", name, age) }\"]},\"289\":{\"h\":\"\",\"t\":[\"记录一条日志并调用 panic。\",\"package main import ( \\\"log\\\" ) func main() { log.Panic(\\\"This is a panic log message\\\") }\"]},\"290\":{\"h\":\"\",\"t\":[\"记录一条格式化的日志并调用 panic。\",\"package main import ( \\\"log\\\" ) func main() { name := \\\"Alice\\\" age := 30 log.Panicf(\\\"Panic: Name: %s, Age: %d\\\", name, age) }\"]},\"291\":{\"h\":\"3. 自定义日志记录器\"},\"292\":{\"h\":\"\",\"t\":[\"创建一个自定义的日志记录器。\",\"package main import ( \\\"log\\\" \\\"os\\\" ) func main() { file, err := os.OpenFile(\\\"app.log\\\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) if err != nil { log.Fatal(err) } logger := log.New(file, \\\"INFO: \\\", log.Ldate|log.Ltime|log.Lshortfile) logger.Println(\\\"This is a custom log message\\\") }\"]},\"293\":{\"h\":\"4. 日志格式和标志\"},\"294\":{\"h\":\"\",\"t\":[\"设置日志记录的标志。\",\"package main import ( \\\"log\\\" ) func main() { log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile) log.Println(\\\"This is a log message with date, time, and file info\\\") }\"]},\"295\":{\"h\":\"\",\"t\":[\"设置日志记录的前缀。\",\"package main import ( \\\"log\\\" ) func main() { log.SetPrefix(\\\"DEBUG: \\\") log.Println(\\\"This is a log message with a prefix\\\") }\"]},\"296\":{\"h\":\"5. 输出到不同的目标\"},\"297\":{\"h\":\"\",\"t\":[\"设置日志记录的输出目标。\",\"package main import ( \\\"log\\\" \\\"os\\\" ) func main() { file, err := os.OpenFile(\\\"app.log\\\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) if err != nil { log.Fatal(err) } log.SetOutput(file) log.Println(\\\"This is a log message written to a file\\\") }\"]},\"298\":{\"h\":\"6. 日志记录器方法\"},\"299\":{\"h\":\"\",\"t\":[\"记录一条日志。\",\"package main import ( \\\"log\\\" \\\"os\\\" ) func main() { logger := log.New(os.Stdout, \\\"INFO: \\\", log.Ldate|log.Ltime|log.Lshortfile) logger.Output(2, \\\"This is a log message using Output method\\\") }\",\"通过以上这些 log 包中的基本 API，你可以方便地在 Go 程序中进行日志记录。无论是基本的日志记录、不同日志级别、自定义日志记录器、设置日志格式和输出目标，都可以通过这些 API 实现。\"]},\"300\":{\"h\":\"math\",\"t\":[\"在 Go 语言中，math 包提供了基本的数学函数和常量。以下是一些常用的 math 包的 API 及其详细说明：\"]},\"301\":{\"h\":\"1. 常量\",\"t\":[\"数学常量\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Pi:\\\", math.Pi) fmt.Println(\\\"E:\\\", math.E) fmt.Println(\\\"Phi:\\\", math.Phi) fmt.Println(\\\"Sqrt2:\\\", math.Sqrt2) fmt.Println(\\\"SqrtE:\\\", math.SqrtE) fmt.Println(\\\"SqrtPi:\\\", math.SqrtPi) fmt.Println(\\\"SqrtPhi:\\\", math.SqrtPhi) }\"]},\"302\":{\"h\":\"2. 基本数学函数\",\"t\":[\"math.Abs 返回浮点数的绝对值。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Abs(-3.14):\\\", math.Abs(-3.14)) }\",\"math.Pow 返回 x 的 y 次方。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Pow(2, 3):\\\", math.Pow(2, 3)) }\",\"math.Sqrt 返回 x 的平方根。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Sqrt(16):\\\", math.Sqrt(16)) }\",\"math.Ceil 和 math.Floor 返回大于或等于 x 的最小整数和小于或等于 x 的最大整数。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Ceil(3.14):\\\", math.Ceil(3.14)) fmt.Println(\\\"Floor(3.14):\\\", math.Floor(3.14)) }\",\"math.Round 返回 x 四舍五入后的整数值。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Round(3.14):\\\", math.Round(3.14)) fmt.Println(\\\"Round(3.54):\\\", math.Round(3.54)) }\"]},\"303\":{\"h\":\"3. 三角函数\",\"t\":[\"math.Sin, math.Cos, math.Tan 返回 x 的正弦、余弦和正切值（x 为弧度）。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Sin(π/2):\\\", math.Sin(math.Pi/2)) fmt.Println(\\\"Cos(π/2):\\\", math.Cos(math.Pi/2)) fmt.Println(\\\"Tan(π/4):\\\", math.Tan(math.Pi/4)) }\",\"math.Asin, math.Acos, math.Atan 返回 x 的反正弦、反余弦和反正切值。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Asin(1):\\\", math.Asin(1)) fmt.Println(\\\"Acos(0):\\\", math.Acos(0)) fmt.Println(\\\"Atan(1):\\\", math.Atan(1)) }\"]},\"304\":{\"h\":\"4. 指数和对数函数\",\"t\":[\"math.Exp 和 math.Log 返回 e 的 x 次方和 x 的自然对数。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Exp(1):\\\", math.Exp(1)) fmt.Println(\\\"Log(E):\\\", math.Log(math.E)) }\",\"math.Log10 和 math.Log2 返回 x 的以 10 为底和以 2 为底的对数。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Log10(100):\\\", math.Log10(100)) fmt.Println(\\\"Log2(8):\\\", math.Log2(8)) }\"]},\"305\":{\"h\":\"5. 最大值和最小值\",\"t\":[\"math.Max 和 math.Min 返回两个数中的最大值和最小值。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { fmt.Println(\\\"Max(3, 5):\\\", math.Max(3, 5)) fmt.Println(\\\"Min(3, 5):\\\", math.Min(3, 5)) }\"]},\"306\":{\"h\":\"6. 随机数\",\"t\":[\"虽然 math 包本身不提供随机数生成功能，但 Go 标准库中的 math/rand 包提供了相关功能。以下是一些常用的 math/rand 包 API：\",\"生成随机整数\",\"package main import ( \\\"fmt\\\" \\\"math/rand\\\" \\\"time\\\" ) func main() { rand.Seed(time.Now().UnixNano()) // 设置种子 fmt.Println(\\\"Random Int:\\\", rand.Int()) fmt.Println(\\\"Random Intn (0-99):\\\", rand.Intn(100)) }\",\"生成随机浮点数\",\"package main import ( \\\"fmt\\\" \\\"math/rand\\\" \\\"time\\\" ) func main() { rand.Seed(time.Now().UnixNano()) // 设置种子 fmt.Println(\\\"Random Float32:\\\", rand.Float32()) fmt.Println(\\\"Random Float64:\\\", rand.Float64()) }\",\"通过以上这些 math 包中的基本 API，你可以方便地在 Go 程序中进行各种数学计算。无论是基本的算术运算、三角函数、指数和对数函数，还是随机数生成，都可以通过这些 API 实现。\"]},\"307\":{\"h\":\"net\"},\"308\":{\"h\":\"1. 网络地址解析\",\"t\":[\"net.LookupHost 解析主机名到 IP 地址。\",\"ips, err := net.LookupHost(\\\"example.com\\\") if err != nil { log.Fatal(err) } for _, ip := range ips { fmt.Println(ip) }\",\"net.LookupIP 解析主机名到 IP 地址列表。\",\"ips, err := net.LookupIP(\\\"example.com\\\") if err != nil { log.Fatal(err) } for _, ip := range ips { fmt.Println(ip) }\"]},\"309\":{\"h\":\"2. TCP 连接\",\"t\":[\"net.Dial 连接到指定网络地址（支持 \\\"tcp\\\", \\\"udp\\\", \\\"unix\\\"）。\",\"conn, err := net.Dial(\\\"tcp\\\", \\\"golang.org:80\\\") if err != nil { log.Fatal(err) } fmt.Fprintf(conn, \\\"GET / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\\\") status, err := bufio.NewReader(conn).ReadString('\\\\n') fmt.Println(status)\",\"net.Listen 监听指定网络地址的连接。\",\"ln, err := net.Listen(\\\"tcp\\\", \\\":8080\\\") if err != nil { log.Fatal(err) } for { conn, err := ln.Accept() if err != nil { log.Fatal(err) } go handleConnection(conn) }\",\"处理连接的示例函数：\",\"func handleConnection(conn net.Conn) { defer conn.Close() for { message, _ := bufio.NewReader(conn).ReadString('\\\\n') fmt.Print(\\\"Message Received:\\\", string(message)) conn.Write([]byte(\\\"Message received.\\\\n\\\")) } }\"]},\"310\":{\"h\":\"3. UDP 连接\",\"t\":[\"net.ListenUDP 监听 UDP 地址。\",\"addr, err := net.ResolveUDPAddr(\\\"udp\\\", \\\":8080\\\") if err != nil { log.Fatal(err) } conn, err := net.ListenUDP(\\\"udp\\\", addr) if err != nil { log.Fatal(err) } buffer := make([]byte, 1024) for { n, addr, err := conn.ReadFromUDP(buffer) if err != nil { log.Fatal(err) } fmt.Printf(\\\"Received %s from %s\\\\n\\\", string(buffer[:n]), addr) _, err = conn.WriteToUDP([]byte(\\\"Message received.\\\"), addr) if err != nil { log.Fatal(err) } }\",\"net.DialUDP 连接到指定的 UDP 地址。\",\"addr, err := net.ResolveUDPAddr(\\\"udp\\\", \\\"localhost:8080\\\") if err != nil { log.Fatal(err) } conn, err := net.DialUDP(\\\"udp\\\", nil, addr) if err != nil { log.Fatal(err) } defer conn.Close() _, err = conn.Write([]byte(\\\"Hello UDP server\\\")) if err != nil { log.Fatal(err) } buffer := make([]byte, 1024) n, _, err := conn.ReadFromUDP(buffer) if err != nil { log.Fatal(err) } fmt.Printf(\\\"Message from server: %s\\\\n\\\", string(buffer[:n]))\"]},\"311\":{\"h\":\"4. 网络接口\",\"t\":[\"net.Interfaces 返回系统的网络接口列表。\",\"interfaces, err := net.Interfaces() if err != nil { log.Fatal(err) } for _, iface := range interfaces { fmt.Println(iface.Name, iface.HardwareAddr) }\"]},\"312\":{\"h\":\"5. IP 地址处理\",\"t\":[\"net.ParseIP 将字符串形式的 IP 地址解析为 net.IP 类型。\",\"ip := net.ParseIP(\\\"192.0.2.1\\\") if ip == nil { log.Fatal(\\\"Invalid IP address\\\") } fmt.Println(\\\"Parsed IP:\\\", ip.String())\",\"net.IPnet.IP 类型用于表示 IP 地址。\",\"ip := net.ParseIP(\\\"192.0.2.1\\\") if ip.To4() != nil { fmt.Println(\\\"IPv4 address\\\") } else { fmt.Println(\\\"IPv6 address\\\") }\"]},\"313\":{\"h\":\"6. 域名解析\",\"t\":[\"net.LookupCNAME 解析并返回域名的规范名称。\",\"cname, err := net.LookupCNAME(\\\"www.example.com\\\") if err != nil { log.Fatal(err) } fmt.Println(\\\"CNAME:\\\", cname)\",\"net.LookupSRV 解析指定服务的 SRV 记录。\",\"_, addrs, err := net.LookupSRV(\\\"xmpp-server\\\", \\\"tcp\\\", \\\"example.com\\\") if err != nil { log.Fatal(err) } for _, addr := range addrs { fmt.Println(addr.Target, addr.Port) }\"]},\"314\":{\"h\":\"7. 自定义 Dialer\",\"t\":[\"net.Dialer 使用自定义配置进行网络连接。\",\"dialer := net.Dialer{ Timeout: 5 * time.Second, } conn, err := dialer.Dial(\\\"tcp\\\", \\\"golang.org:80\\\") if err != nil { log.Fatal(err) } fmt.Fprintf(conn, \\\"GET / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\\\") status, err := bufio.NewReader(conn).ReadString('\\\\n') fmt.Println(status)\"]},\"315\":{\"h\":\"8. 错误处理\",\"t\":[\"net.Error\",\"检查错误类型是否为临时错误或超时错误。\",\"conn, err := net.Dial(\\\"tcp\\\", \\\"example.com:80\\\") if err != nil { if netErr, ok := err.(net.Error); ok && netErr.Timeout() { fmt.Println(\\\"Timeout error\\\") } else { fmt.Println(\\\"Other error\\\") } return } defer conn.Close()\",\"通过以上这些 net 包中的 API，Go 语言可以方便地处理网络编程相关的任务。根据具体需求，可以进行更加复杂的网络应用开发。\"]},\"316\":{\"h\":\"os\",\"t\":[\"在Go语言中，os 包是一个非常重要且常用的标准库，它提供了与操作系统交互的功能，包括文件操作、环境变量管理、进程管理等。下面是一些 os 包中常用的功能和API：\"]},\"317\":{\"h\":\"文件和目录操作\",\"t\":[\"文件操作\",\"func Create(name string) (*File, error): 创建一个文件。\",\"func Open(name string) (*File, error): 打开一个文件。\",\"func Remove(name string) error: 删除一个文件。\",\"func Rename(oldpath, newpath string) error: 重命名一个文件。\",\"package main import ( \\\"os\\\" \\\"log\\\" ) func main() { // 创建文件 file, err := os.Create(\\\"test.txt\\\") if err != nil { log.Fatal(err) } defer file.Close() // 打开文件 file, err = os.Open(\\\"test.txt\\\") if err != nil { log.Fatal(err) } defer file.Close() // 删除文件 err = os.Remove(\\\"test.txt\\\") if err != nil { log.Fatal(err) } }\",\"目录操作\",\"func Mkdir(name string, perm FileMode) error: 创建一个目录。\",\"func MkdirAll(path string, perm FileMode) error: 递归创建多层目录。\",\"func RemoveAll(path string) error: 递归删除一个目录及其子目录。\",\"// 创建目录 err := os.Mkdir(\\\"mydir\\\", 0755) if err != nil { log.Fatal(err) } // 递归创建目录 err = os.MkdirAll(\\\"path/to/mydir\\\", 0755) if err != nil { log.Fatal(err) } // 递归删除目录 err = os.RemoveAll(\\\"path/to/mydir\\\") if err != nil { log.Fatal(err) }\"]},\"318\":{\"h\":\"环境变量\",\"t\":[\"func Getenv(key string) string: 获取环境变量的值。\",\"func Setenv(key, value string) error: 设置环境变量的值。\",\"func Unsetenv(key string) error: 删除指定的环境变量。\",\"// 获取环境变量 value := os.Getenv(\\\"HOME\\\") fmt.Println(\\\"Home directory:\\\", value) // 设置环境变量 err := os.Setenv(\\\"MYAPP_DB_URL\\\", \\\"localhost:5432\\\") if err != nil { log.Fatal(err) }\"]},\"319\":{\"h\":\"进程操作\",\"t\":[\"func Exit(code int): 终止当前进程并返回指定的状态码。\",\"func Getpid() int: 获取当前进程的ID。\",\"func Getppid() int: 获取当前进程的父进程ID。\",\"// 获取当前进程ID和父进程ID pid := os.Getpid() ppid := os.Getppid() fmt.Printf(\\\"PID: %d, PPID: %d\\\\n\\\", pid, ppid) // 终止当前进程 os.Exit(1)\"]},\"320\":{\"h\":\"其他常用功能\",\"t\":[\"func Chdir(dir string) error: 改变当前工作目录。\",\"func Hostname() (name string, err error): 获取主机名。\",\"func Getwd() (dir string, err error): 获取当前工作目录。\",\"// 改变当前工作目录 err := os.Chdir(\\\"/tmp\\\") if err != nil { log.Fatal(err) } // 获取主机名 hostname, err := os.Hostname() if err != nil { log.Fatal(err) } fmt.Println(\\\"Hostname:\\\", hostname) // 获取当前工作目录 wd, err := os.Getwd() if err != nil { log.Fatal(err) } fmt.Println(\\\"Current working directory:\\\", wd)\",\"通过学习和使用 os 包，你可以很方便地管理文件、目录、环境变量以及进程等操作系统相关的资源和信息。这使得Go语言在系统级编程和文件处理方面非常强大和灵活。\"]},\"321\":{\"h\":\"order\",\"t\":[\"在 Go 语言中，sort 包提供了对切片和用户定义的集合进行排序的函数。它实现了常见的排序算法，如快速排序（Quicksort）和堆排序（Heapsort），并且为自定义集合提供了接口，使得用户可以根据特定的需求进行排序。\",\"以下是 sort 包中常用的函数和接口：\"]},\"322\":{\"h\":\"1. 排序函数\",\"t\":[\"sort.Ints: 对整数类型的切片进行升序排序。\",\"import \\\"sort\\\" func main() { ints := []int{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5} sort.Ints(ints) fmt.Println(ints) // 输出: [1 1 2 3 3 4 5 5 5 6 9] }\",\"sort.Float64s: 对浮点数类型的切片进行升序排序。\",\"sort.Strings: 对字符串类型的切片进行升序排序。\"]},\"323\":{\"h\":\"2. 自定义排序\",\"t\":[\"通过实现 sort.Interface 接口，可以对用户定义的集合进行排序。该接口包括 Len()、Less(i, j int) 和 Swap(i, j int) 方法，用于描述集合的长度、比较元素大小的规则以及交换元素的位置。\",\"type Person struct { Name string Age int } type ByAge []Person func (a ByAge) Len() int { return len(a) } func (a ByAge) Less(i, j int) bool { return a[i].Age < a[j].Age } func (a ByAge) Swap(i, j int) { a[i], a[j] = a[j], a[i] } func main() { people := []Person{ {\\\"Alice\\\", 25}, {\\\"Bob\\\", 30}, {\\\"Charlie\\\", 20}, } sort.Sort(ByAge(people)) fmt.Println(\\\"Sorted by age:\\\") for _, p := range people { fmt.Printf(\\\"%s (%d)\\\\n\\\", p.Name, p.Age) } }\"]},\"324\":{\"h\":\"3. 排序稳定性\",\"t\":[\"Go 语言的排序函数是稳定的，即相等元素的相对顺序在排序后保持不变。\"]},\"325\":{\"h\":\"4. 其他排序函数\",\"t\":[\"sort.Sort: 对实现了 sort.Interface 接口的集合进行排序。\",\"sort.Search: 在已排序的集合中搜索元素。\",\"示例\",\"以下是一个结合了自定义排序和使用 sort.Sort 的例子：\",\"package main import ( \\\"fmt\\\" \\\"sort\\\" ) type Person struct { Name string Age int } type ByName []Person func (a ByName) Len() int { return len(a) } func (a ByName) Less(i, j int) bool { return a[i].Name < a[j].Name } func (a ByName) Swap(i, j int) { a[i], a[j] = a[j], a[i] } func main() { people := []Person{ {\\\"Alice\\\", 25}, {\\\"Bob\\\", 30}, {\\\"Charlie\\\", 20}, } sort.Sort(ByName(people)) fmt.Println(\\\"Sorted by name:\\\") for _, p := range people { fmt.Printf(\\\"%s (%d)\\\\n\\\", p.Name, p.Age) } }\",\"在这个示例中，我们定义了 Person 结构体和 ByName 类型来实现按照姓名排序的需求。通过 sort.Sort(ByName(people)) 对 people 切片按照姓名进行排序，然后打印出排序后的结果。\",\"通过 sort 包，Go 语言提供了强大且简洁的排序功能，可以方便地对各种类型的数据进行排序操作。\"]},\"326\":{\"h\":\"strconv\",\"t\":[\"在 Go 语言中，strconv 包提供了字符串和基本数据类型之间的转换函数，例如将整数转换为字符串、字符串转换为整数，以及其他类型之间的转换。这些功能非常有用，特别是在处理用户输入或从外部数据源读取数据时。\",\"以下是 strconv 包中常用的函数和用法示例：\"]},\"327\":{\"h\":\"1. 将字符串转换为基本数据类型\",\"t\":[\"Atoi: 将字符串转换为整数类型。\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { str := \\\"123\\\" num, err := strconv.Atoi(str) if err != nil { fmt.Println(\\\"Error:\\\", err) return } fmt.Printf(\\\"Converted integer: %d\\\\n\\\", num) // 输出: Converted integer: 123 }\",\"ParseFloat: 将字符串转换为浮点数类型。\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { str := \\\"3.14\\\" num, err := strconv.ParseFloat(str, 64) if err != nil { fmt.Println(\\\"Error:\\\", err) return } fmt.Printf(\\\"Converted float: %f\\\\n\\\", num) // 输出: Converted float: 3.140000 }\"]},\"328\":{\"h\":\"2. 将基本数据类型转换为字符串\",\"t\":[\"Itoa: 将整数转换为字符串类型。\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { num := 42 str := strconv.Itoa(num) fmt.Printf(\\\"Converted string: %s\\\\n\\\", str) // 输出: Converted string: 42 }\",\"FormatFloat: 将浮点数转换为字符串类型。\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { num := 3.14 str := strconv.FormatFloat(num, 'f', -1, 64) fmt.Printf(\\\"Converted string: %s\\\\n\\\", str) // 输出: Converted string: 3.14 }\"]},\"329\":{\"h\":\"3. 其他常用功能\",\"t\":[\"错误处理: 在使用 Atoi、ParseFloat 等函数时，如果转换失败会返回一个错误。\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { str := \\\"hello\\\" _, err := strconv.Atoi(str) if err != nil { fmt.Println(\\\"Error:\\\", err) // 输出: Error: strconv.Atoi: parsing \\\"hello\\\": invalid syntax } }\",\"基数转换: 可以指定进制进行字符串和整数之间的转换。\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { str := \\\"1A\\\" num, err := strconv.ParseInt(str, 16, 32) if err != nil { fmt.Println(\\\"Error:\\\", err) return } fmt.Printf(\\\"Converted integer (base 16): %d\\\\n\\\", num) // 输出: Converted integer (base 16): 26 }\"]},\"330\":{\"h\":\"总结\",\"t\":[\"strconv 包是处理字符串和基本数据类型之间转换的重要工具，它提供了丰富的功能和灵活的选项，能够满足各种类型转换的需求。在编写需要处理用户输入、配置文件解析或者网络通信的程序时，经常会用到 strconv 包来处理数据类型的转换和格式化。\"]},\"331\":{\"h\":\"time\",\"t\":[\"在 Go 语言中，time 包提供了处理时间和日期的功能。以下是一些常用的 time 包的 API 及其详细说明：\"]},\"332\":{\"h\":\"1. 获取当前时间\"},\"333\":{\"h\":\"\",\"t\":[\"获取当前时间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() fmt.Println(\\\"Current time:\\\", now) }\"]},\"334\":{\"h\":\"2. 格式化和解析时间\"},\"335\":{\"h\":\"\",\"t\":[\"将时间格式化为字符串。Go 使用一个参考时间 Mon Jan 2 15:04:05 MST 2006 来指定格式。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() formatted := now.Format(\\\"2006-01-02 15:04:05\\\") fmt.Println(\\\"Formatted time:\\\", formatted) }\"]},\"336\":{\"h\":\"\",\"t\":[\"将字符串解析为时间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { layout := \\\"2006-01-02 15:04:05\\\" str := \\\"2024-07-05 12:34:56\\\" t, err := time.Parse(layout, str) if err != nil { fmt.Println(\\\"Error parsing time:\\\", err) return } fmt.Println(\\\"Parsed time:\\\", t) }\"]},\"337\":{\"h\":\"3. 时间操作\"},\"338\":{\"h\":\"\",\"t\":[\"将指定的时间段添加到时间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() later := now.Add(2 * time.Hour) fmt.Println(\\\"Current time:\\\", now) fmt.Println(\\\"Two hours later:\\\", later) }\"]},\"339\":{\"h\":\"\",\"t\":[\"计算两个时间之间的差值。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() earlier := now.Add(-2 * time.Hour) duration := now.Sub(earlier) fmt.Println(\\\"Current time:\\\", now) fmt.Println(\\\"Two hours earlier:\\\", earlier) fmt.Println(\\\"Difference:\\\", duration) }\"]},\"340\":{\"h\":\"\",\"t\":[\"在年、月、日上进行加减操作。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() nextYear := now.AddDate(1, 0, 0) fmt.Println(\\\"Current time:\\\", now) fmt.Println(\\\"Next year:\\\", nextYear) }\"]},\"341\":{\"h\":\"4. 时间比较\"},\"342\":{\"h\":\", ,\",\"t\":[\"比较两个时间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() future := now.Add(2 * time.Hour) past := now.Add(-2 * time.Hour) fmt.Println(\\\"Future is after now:\\\", future.After(now)) fmt.Println(\\\"Past is before now:\\\", past.Before(now)) fmt.Println(\\\"Now is equal to now:\\\", now.Equal(now)) }\"]},\"343\":{\"h\":\"5. 定时器和计时器\"},\"344\":{\"h\":\"\",\"t\":[\"让当前 goroutine 休眠指定时间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { fmt.Println(\\\"Sleeping for 2 seconds...\\\") time.Sleep(2 * time.Second) fmt.Println(\\\"Awake!\\\") }\"]},\"345\":{\"h\":\"\",\"t\":[\"创建一个定时器，并在指定时间后发送一个信号。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { timer := time.NewTimer(2 * time.Second) fmt.Println(\\\"Waiting for timer...\\\") <-timer.C fmt.Println(\\\"Timer expired!\\\") }\"]},\"346\":{\"h\":\"\",\"t\":[\"创建一个滴答计时器，每隔指定时间发送一个信号。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ticker := time.NewTicker(1 * time.Second) go func() { for t := range ticker.C { fmt.Println(\\\"Tick at\\\", t) } }() time.Sleep(5 * time.Second) ticker.Stop() fmt.Println(\\\"Ticker stopped\\\") }\"]},\"347\":{\"h\":\"6. 时间戳\"},\"348\":{\"h\":\",\",\"t\":[\"获取 Unix 时间戳。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { now := time.Now() fmt.Println(\\\"Unix timestamp:\\\", now.Unix()) fmt.Println(\\\"Unix nanosecond timestamp:\\\", now.UnixNano()) }\"]},\"349\":{\"h\":\"\",\"t\":[\"将 Unix 时间戳转换为时间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { timestamp := int64(1625477745) t := time.Unix(timestamp, 0) fmt.Println(\\\"Time from Unix timestamp:\\\", t) }\"]},\"350\":{\"h\":\"7. 时间区和本地化\"},\"351\":{\"h\":\"\",\"t\":[\"创建一个固定时区。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { loc := time.FixedZone(\\\"UTC-8\\\", -8*60*60) t := time.Date(2024, 7, 5, 12, 0, 0, 0, loc) fmt.Println(\\\"Time in UTC-8:\\\", t) }\"]},\"352\":{\"h\":\"\",\"t\":[\"加载一个时区位置。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { loc, err := time.LoadLocation(\\\"America/New_York\\\") if err != nil { fmt.Println(\\\"Error loading location:\\\", err) return } t := time.Now().In(loc) fmt.Println(\\\"Current time in New York:\\\", t) }\",\"通过以上这些 time 包中的基本 API，你可以方便地在 Go 程序中处理时间和日期相关的操作。无论是获取当前时间、格式化时间、时间计算还是处理不同的时区，都可以通过这些 API 实现。\"]},\"353\":{\"h\":\"7. 数组和切片\",\"t\":[\"在 Golang 中提供了数组类型的数据结构，可以用于存储相同类型的数据集合。除此之外，Golang 中还提供了一个切片类型，切片是对数组的抽象。在使用上，两者几乎类似，但实际在功能上差距较大。\",\"数组是固定长度的数据结构，一旦初始化，就不能更改其大小，而切片是不定长的，可以根据数据量来自动扩充。\"]},\"354\":{\"h\":\"数组\",\"t\":[\"数组是一整块连续内存，且存储的数据类型相同，故支持随机访问。可通过下标索引进行操作。\"]},\"355\":{\"h\":\"\",\"t\":[\"数组声明的语法如下所示，在声明阶段就需要指定数组长度和数组的数据类型。\",\"var arrayName [arrayLength]dataType\"]},\"356\":{\"h\":\"\",\"t\":[\"仅声明\",\"在声明数组后，没有指定数组的数据，则默认会将所有的数组置为 dataType 类型的零值。\",\"列表初始化\",\"var arrayName = [arrayLength]dataType{data1, data2, data3 ...}\",\"这里值得注意的是，如果你定义的数组长度大于你给定的数据列表，那么 Golang 就默认将剩余的数据重置为零值。但是数据列表的长度不能超过数组的长度，否则会直接报错。\",\"var arr = [5]int{1, 2, 3} fmt.Println(arr) var arr [3]int = [3]int{1, 2, 3, 4} // 编译错误: 初始化列表中的元素个数超过数组声明的长度 // too many values in array initializer\",\"遍历输出这个数组，结果为 [1, 2, 3, 0, 0]\",\"实际上这里是分两个步骤，首先进行数组定义，然后初始化，故多余的数为零值。\",\"未知数组长度\",\"如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度：\",\"var arr = [...]int{ 1, 2, 3, 4, 5} fmt.Println(len(arr)) // 输出 5\"]},\"357\":{\"h\":\"\",\"t\":[\"数组支持随机访问，可通过索引下标来进行访问\",\"查看数据\",\"var arr = [5]int{ 1, 2, 3 } fmt.Println(arr[0]) // 输出 1 fmt.Println(arr[1]) // 输出 2 fmt.Println(arr[2]) // 输出 3 fmt.Println(arr[3]) // 输出 0 fmt.Println(arr[4]) // 输出 0 // 查询子数组的值 fmt.Println(arr[1:3]) // 输出 [2,3]\",\"如果需要获取数组的子数组，可以使用切片操作符 [:] 来创建一个切片，从而实现类似子数组的效果。但需要注意的是，这并不会创建一个新的数组，而是基于现有数组创建一个切片视图。\",\"修改数据\",\"var arr = [5]int{ 1, 2, 3 } fmt.Println(arr[2]) // 输出 3 arr[2] = 4 fmt.Println(arr[2]) // 输出 4\"]},\"358\":{\"h\":\"\",\"t\":[\"数组作为参数时，传递的是数组值的拷贝，故操作形参数组，不会改变原有的数组值。\",\"数组作为一种数据类型，其本身也可作为数组的数据类型，即二维数组，同理即可支持多维数组。\"]},\"359\":{\"h\":\"切片\",\"t\":[\"切片的应用范围更加广泛，用于存储相同类型，但不知道数据量的数据，而且可能会有频繁的插入和删除操作。\"]},\"360\":{\"h\":\"\",\"t\":[\"var slice []int\"]},\"361\":{\"h\":\"\",\"t\":[\"var slice = []int{ 1, 2, 3 } slice := []int{ 1, 2, 3 } slice := make([]int, 0, 0) slice := new([]int)\",\"这里不难看出，切片和数组的声明和初始化几乎类似，只是切片中没有初始化长度。推荐使用 make 方法来创建切片，make 方法的三个参数依次为：数据类型，长度，容量。\",\"因为使用 var slice []int 这种默认声明方式，并不会开辟内存，实际上此时的 slice 指向的是 nil 空指针，而使用 make 方法进行初始化时，指定了容量，会分配指定大小的内存空间。\",\"切片初始化时的长度和容量\",\"在 make 函数中的数据类型参数不难理解，但是长度和容量这两个有什么区别呢？可以理解为长度是实际的数据长度，即有多少数据，就有多少长度，而容量是最大长度。\",\"但是在前面说过，切片不指定长度，可以自动扩容，那到底是可以自动扩容呢？还是根据这个容量来限制呢？答案是自动扩容的，这里的容量指的是切片初始化时的容量，如果所添加的数据超过该容量，则会自动扩容，默认是扩容为当前容量的两倍。\",\"由于扩容的性能消耗，所以在声明阶段就尽可能的给定一个可能会用到的容量，以避免因为数据的添加而导致的不断扩容。\"]},\"362\":{\"h\":\"\",\"t\":[\"访问\",\"通过索引来访问切片，使用的方法和数组完全相同，具体如下：\",\"slice := []int{1, 2, 3, 4, 5} // 查询索引 2 的元素 fmt.Println(slice[2]) // 输出: 3 // 查询子切片的值 fmt.Println(slice[1:3]) // 输出 [2,3]\",\"修改\",\"修改切片内的数组，可直接使用下标索引进行修改。\",\"slice := []int{1, 2, 3, 4, 5} fmt.Println(slice) // 输出: [1, 2, 3, 4, 5] slice[3] = 10 fmt.Println(slice) // 输出: [1, 2, 3, 10, 5]\",\"在 Go 1.21 中新添加了 clear 方法，可将切片中的所有数据置为零值。\",\"slice := []int{1, 2, 3, 4, 5} fmt.Println(slice) // 输出: [1, 2, 3, 4, 5] clear(slice) fmt.Println(slice) // 输出: [0, 0, 0, 0, 0]\",\"添加\",\"向切片中添加元素需要使用 append 函数，添加数据到切片末尾，如果切片的容量不足，append 会自动扩容。\",\"slice := make([]int,0,0) fmt.Println(slice) // 输出 [] slice = append(slice,1,2,3,4,5) fmt.Println(slice) // 输出 [1,2,3,4,5]\",\"append 函数\",\"append 内置函数将元素附加到切片的末尾。如果有足够的容量，则重新许可目的地以容纳新元素。否则，将分配一个新的底层阵列。append 函数语法如下:\",\"func append(slice []Type, elems ...Type) []Type\",\"append 返回更新的切片。因此，有必要存储append的结果，通常存储在保存 slice 本身的变量中：\",\"slice = append(slice, elem1, elem2) slice = eappend(slice, anotherSlice ...)\",\"作为特殊情况，将字符串添加到 byte slice 是合法的，如下所示：\",\"stice = append([]byte(\\\"hello \\\")，\\\"world\\\" ...)\",\"删除\",\"切片本身并没有提供直接删除元素的接口，需要借助 append 函数来完成\",\"slice := []int{1, 2, 3, 4, 5} fmt.Println(slice) // 输出 [1,2,3,4,5] // 删除后 n 个元素 slice = slice[:len(slice) - n] fmt.Println(slice) // 输出 [1,2,3 ...] // 删除前 n 个元素 slice = slice[n:]; fmt.Println(slice) // 输出 [... 3,4,5] // 从中间指定下标删除 n 个元素 slice = append(slice[:i], slice[i + n:]...) fmt.Println(slice) // 输出 [1,2 ... 4,5] // 删除所有元素 slice = slice[:0] fmt.Println(slice) // 输出 []\"]},\"363\":{\"h\":\"\",\"t\":[\"要了解切片作为参数时，首先需要了解切片的底层结构。\",\"type SliceHeader struct { Data uintptr // 指针：指向底层数组。 Len int // 长度：切片中的元素个数。 Cap int // 容量：从切片的起始位置到底层数组的结尾的元素个数。 }\",\"当将切片作为参数传递给函数时，传递的是这个切片的副本，通过切片的底层结构不难看出，实际上切片不存储数据，存储的是一个指向底层数组的指针，传递给函数的是该指针的副本，但指向的是同一个地址，故对形参修改，也会反应在原切片上。\",\"// 改变 slice 的值 func changeSliceValue(slice []int) { slice[len(slice) / 2] = 10 } dataSlice := []int{1,2,3,4,5} fmt.Println(dataSlice) // 输出 [1,2,3,4,5] // 修改 切片的值 changeSliceValue(dataSlice) fmt.Println(dataSlice) // 输出 [1,2,10,4,5]\",\"但是当增加切片的长度时，此时虽然通过实际的数组指针修改了底层数组，但是由于切片的元素个数和容量是值传递，并不会对原值产生影响，故表现出来的是没有做任何修改。\",\"// 改变 slice 的长度 func changeSliceLength(slice []int) { slice = append(slice,6,7,8,9) } dataSlice := []int{1,2,3,4,5} fmt.Println(dataSlice) // 输出 [1,2,3,4,5] // 修改 切片的长度 changeSliceLength(dataSlice) fmt.Println(dataSlice) // 输出 [1,2,3,4,5]\",\"那么要是减少切片长度呢？\",\"// 改变 slice 的长度 func changeSliceLength(slice []int) { slice = slice[:len(slice) / 2] } dataSlice := []int{1,2,3,4,5} fmt.Println(dataSlice) // 输出 [1,2,3,4,5] // 修改 切片的长度 changeSliceLength(dataSlice) fmt.Println(dataSlice) // 输出 [1,2,3,4,5]\",\"结果是依然没有变化，实际上这里只是重新定义了切片的范围，原切片底层的存储数组没有发生变化，故不表现出任何变化。\",\"那要是我将该指针指向另外一个新切片呢？答案依然是不会变化，因为你拷贝的只是指针的副本，修改操作都是通过该指针来进行的，即使将该指针指向其他地址，原切片中的指针指向的还是原来的底层数组，还是不会展现出任何变化。\",\"总结：只有在修改切片内元素的时候，操作到了底层数组，才会展现出修改原切片的效果，其他操作都没有操作到底层数组，故不会展现出任何变化。\"]},\"364\":{\"h\":\"\",\"t\":[\"在 Go 语言中，数组（arr）和切片（slice）有一些重要的区别，特别是在使用和传递时的行为有所不同。\"]},\"365\":{\"h\":\"\",\"t\":[\"固定长度：\",\"数组在声明时需要指定固定的长度，并且长度在整个生命周期中都是不可变的。\",\"声明方式：var arr [5]int 或 arr := [5]int{1, 2, 3, 4, 5}。\",\"值传递：\",\"当将数组作为参数传递给函数时，传递的是数组的副本而不是引用。这意味着在函数内部对数组的修改不会影响外部的原始数组。\",\"性能优化：\",\"数组是在栈上分配内存的，访问速度较快，但长度固定。\"]},\"366\":{\"h\":\"\",\"t\":[\"动态长度：\",\"切片是对数组的一层轻量级封装，它的长度和容量可以动态改变。\",\"声明方式：var slice []int 或 slice := []int{1, 2, 3, 4, 5}。\",\"引用传递：\",\"切片在作为函数参数传递时，传递的是切片结构的副本，但仍然共享相同的底层数组。因此，在函数内部对切片的修改会影响外部的原始切片。\",\"灵活性：\",\"可以使用切片表达式、append 函数等对切片进行操作，支持动态增删元素。\"]},\"367\":{\"h\":\"\",\"t\":[\"下面是一个简单的示例，说明数组和切片在传递和使用时的区别：\",\"package main import \\\"fmt\\\" func modifyArray(arr [5]int) { arr[0] = 100 fmt.Println(\\\"函数内部修改数组:\\\", arr) // 输出: [100 2 3 4 5] } func modifySlice(slice []int) { slice[0] = 100 fmt.Println(\\\"函数内部修改切片:\\\", slice) // 输出: [100 2 3 4 5] } func main() { arr := [5]int{1, 2, 3, 4, 5} slice := arr[:] modifyArray(arr) fmt.Println(\\\"函数外部数组不受影响:\\\", arr) // 输出: [1 2 3 4 5] modifySlice(slice) fmt.Println(\\\"函数外部切片受影响:\\\", slice) // 输出: [100 2 3 4 5] }\"]},\"368\":{\"h\":\"\",\"t\":[\"数组是固定长度、值传递的数据结构，适合用于需要静态长度的场景。\",\"切片是动态长度、引用传递的数据结构，更加灵活，适合处理动态增删元素的需求。\"]},\"369\":{\"h\":\"1. Golang 介绍\"},\"370\":{\"h\":\"背景\",\"t\":[\"Golang（或称 Go 语言）是由 Google 开发的一种开源编程语言，首次发布于2009年。它由 Robert Griesemer、Rob Pike 和 Ken Thompson 设计，旨在提高编程效率，解决软件工程中的常见问题。Golang 的设计灵感来自 C 语言，但它加入了并发编程和垃圾回收等现代特性，适用于构建高性能的服务器端应用。\"]},\"371\":{\"h\":\"介绍\",\"t\":[\"Golang 是一门静态类型的编程语言，以其简洁的语法和高效的编译速度而闻名。它支持并发编程，通过 goroutines 和 channels 提供了强大的并发处理能力。Golang 的主要特点包括：\",\"简单易读：Golang 的语法简洁明了，减少了学习和使用的难度。\",\"高性能：Golang 编译后的二进制文件执行速度快，适合构建高性能应用。\",\"并发性：通过 goroutines 和 channels 支持并发编程，轻松处理大量并发任务。\",\"跨平台：Golang 可以编译成跨平台的可执行文件，支持 Windows、macOS 和 Linux 等操作系统。\",\"丰富的标准库：Golang 提供了丰富的标准库，涵盖网络、文件系统、编码解码等常见功能。\"]},\"372\":{\"h\":\"应用\",\"t\":[\"Golang 由于其高性能和简洁性，在多个领域得到了广泛应用，主要包括：\",\"Web 开发：使用流行的框架如 Gin、Echo 和 Beego，可以快速构建高性能的 Web 应用和 API 服务。\",\"微服务架构：Golang 由于其高并发处理能力和小内存占用，成为微服务架构的首选语言之一。\",\"云计算：Golang 被广泛应用于云计算平台和工具的开发，如 Docker 和 Kubernetes。\",\"系统编程：Golang 的性能和效率使其适合用于系统级编程和网络服务器开发。\",\"数据处理：Golang 的并发特性使其在数据处理和流处理领域表现出色，适用于实时数据分析和处理。\"]},\"373\":{\"h\":\"结论\",\"t\":[\"Golang 以其简洁、高效和强大的并发处理能力，成为现代软件开发中的一颗新星。无论是 Web 开发、微服务架构、云计算，还是系统编程和数据处理，Golang 都能提供强大的支持。对于希望构建高性能、高并发应用的开发者来说，Golang 是一门值得学习和掌握的编程语言。\"]},\"374\":{\"h\":\"2. 环境配置\",\"t\":[\"正式学习 Golang 之前首先需要安装配置好 Golang 环境，如果您已经配好环境，跳过即可。\"]},\"375\":{\"h\":\"Golang环境\",\"t\":[\"下载地址：https://golang.google.cn/dl/\",\"选择适合自己的版本进行下载即可\",\"https://golang.google.cn/doc/install\",\"配置变量\",\"如果完全按照如上步骤进行操作，仍无法通过 go 环境检查，请重启电脑使得环境变量生效即可。\"]},\"376\":{\"h\":\"开发工具\",\"t\":[\"工欲善其事，必先利其器。一个好的开发工具能让你事半功倍，大大提高开发效率，这里我推荐 VsCode 和 Goland 这两个开发工具。\"]},\"377\":{\"h\":\"VSCode\",\"t\":[\"下载安装：https://code.visualstudio.com/\",\"下载好后安装即可。\",\"配置 Golang 插件\",\"使用 VSCode 可以直接使用我们配置好的环境变量。\"]},\"378\":{\"h\":\"Goland\",\"t\":[\"下载安装：https://www.jetbrains.com/go/\",\"下载后安装即可。\",\"配置 Golang\",\"配置 GOROOT、GOPATH、GOModuls 为你自己下载安装的对应目录即可。\",\"这里配置时，可以使用 Goland 自带的 Go 下载，也可以配置我们自己下载的 Golang。\",\"优缺点对比：\",\"VSCode 轻量级，还可开发其他任意语言。Goland 仅对 Golang 有较好支持。\",\"VSCode 免费开源，有强大的生态支持，Goland Unlimited 版本收费，且价格较高。\",\"Goland 可视化界面优秀，对于调试开发更为优雅舒适，VSCode 需要配置插件，较为麻烦。\",\"Goland 内置了许多功能，且有 AI 功能，无需其他配置，开箱即用，非常方便。VSCode 功能全靠插件，需要自己配置安装。\",\"总结：VSCode 和 Goland 各有优缺，选择合适自己的开发工具即可，两者也可同时兼备，无需精神内耗。\"]},\"379\":{\"h\":\"13. 错误\",\"t\":[\"在Go语言中，错误（errors）是一个非常重要的概念，它们用于指示函数调用或操作是否成功以及发生了什么问题。Go语言通过内置的 error 接口类型来表示错误，这使得错误处理变得非常简洁和统一。\"]},\"380\":{\"h\":\"错误接口\",\"t\":[\"在Go中，error 接口是一个只包含一个方法的接口：\",\"type error interface { Error() string }\",\"任何实现了 Error() string 方法的类型都可以被视为一个错误。这意味着，如果你想要定义自己的错误类型，只需实现这个方法即可。\"]},\"381\":{\"h\":\"标准库中的错误处理\",\"t\":[\"标准库中的许多函数都会返回一个结果值和一个错误值。通常，错误值被用来指示函数执行过程中是否出现了问题，如果有问题，则返回一个非 nil 的错误值，并且结果值可能是一个默认值或者无效值。\",\"例如，os.Open 函数用于打开文件，它的签名是：\",\"func Open(name string) (*File, error)\",\"在调用这个函数后，你需要检查第二个返回值，即错误值，来判断文件是否成功打开。如果错误值为 nil，则表示打开文件操作成功；否则，你可以根据错误值判断发生了什么问题。\"]},\"382\":{\"h\":\"创建自定义错误\",\"t\":[\"在Go中创建自定义错误通常很简单，可以使用 errors.New 函数来创建一个新的错误。例如：\",\"import \\\"errors\\\" func someFunction() error { return errors.New(\\\"something went wrong\\\") }\",\"这样就创建了一个简单的错误，其错误消息为 \\\"something went wrong\\\"。\"]},\"383\":{\"h\":\"处理错误\",\"t\":[\"在Go中，通常使用 if err != nil 的方式来检查错误。这是因为在函数调用失败时，它会返回一个非 nil 的错误值。例如：\",\"result, err := someFunction() if err != nil { // 处理错误，例如打印错误信息或者进行其他操作 fmt.Println(\\\"Error:\\\", err) return } // 如果没有错误，继续处理结果 fmt.Println(\\\"Result:\\\", result)\"]},\"384\":{\"h\":\"错误链\",\"t\":[\"有时候一个操作会调用另一个可能出错的操作，这时候可能需要将多个错误链接在一起。Go语言通过 errors.Wrap 和 errors.Wrapf 函数来实现错误链，这些函数允许将当前的错误包装起来并添加上下文信息。\",\"import \\\"github.com/pkg/errors\\\" func main() { err := doSomething() if err != nil { // 在错误链上包装更多信息 wrappedErr := errors.Wrap(err, \\\"failed to do something\\\") fmt.Println(wrappedErr) } } func doSomething() error { return errors.New(\\\"something went wrong\\\") }\",\"这样就创建了一个包含更多上下文信息的错误。\",\"总结来说，Go语言的错误处理机制非常简单且灵活，使得开发者可以清晰地处理和传播错误信息，确保程序在面对异常情况时能够安全和可靠地执行。\"]},\"385\":{\"h\":\"6. 函数方法\",\"t\":[\"在 Golang 中函数是对代码封装和重用的基本形式，与 Java 、C/C++ 不同的是，Golang 中的函数功能似乎更加强大，不仅可以当做代码的封装，还可以当做变量，也可以作为参数进行传递。\",\"以下是 Golang 函数的定义、调用、参数、返回值、匿名函数、闭包等方面的详细说明：\"]},\"386\":{\"h\":\"函数\"},\"387\":{\"h\":\"1. 函数定义与调用\",\"t\":[\"函数定义使用 func 关键字，具体如下：\",\"// 函数定义 func add(a int, b int) int { return a + b } // 函数调用 result := add(2, 3) // result == 5\",\"add : 函数名称\",\"(a int, b int )：参数列表\",\"int : 返回值类型\"]},\"388\":{\"h\":\"2. 参数与返回值\",\"t\":[\"多参数函数：可以定义多个参数，参数类型可以相同或不同。\",\"func multiply(x int, y int) int { return x * y }\",\"多返回值函数：函数可以返回多个值。\",\"func divide(x, y int) (int, int) { return x / y, x % y } quotient, remainder := divide(10, 3) // quotient == 3, remainder == 1\",\"这和 Java 等语言中函数只能返回一个值不同。\",\"命名返回值：可以为返回值命名，使得返回值在函数体内被赋值时无需显示 return。\",\"func rectangleArea(width, height int) (area int) { area = width * height return // 可直接隐藏，可用于控制逻辑执行 }\",\"这里可以看做是在函数调用之前就初始化好了返回值变量，故这里不必定义可直接使用。\"]},\"389\":{\"h\":\"3. 可变参数函数\",\"t\":[\"可变参数：函数可以接收变长参数列表。\",\"func sum(nums ...int) int { total := 0 for _, num := range nums { total += num } return total } total := sum(1, 2, 3, 4) // total == 10\"]},\"390\":{\"h\":\"4. 匿名函数\",\"t\":[\"匿名函数：函数可以是匿名的，并且可以赋值给变量或作为参数传递。\",\"add := func(a, b int) int { return a + b } result := add(3, 4) // result == 7\"]},\"391\":{\"h\":\"5. 闭包\",\"t\":[\"闭包：匿名函数可以访问其外层作用域中的变量，即使这些变量不在其参数列表中。\",\"func makeMultiplier(factor int) func(int) int { return func(x int) int { return x * factor } } double := makeMultiplier(2) result := double(5) // result == 10\",\"匿名函数和闭包有啥区别？\",\"区别\",\"匿名函数是指没有名称的函数，可以被直接调用或者作为值传递给其他函数。\",\"闭包是指一个函数值，可以访问其定义时外部作用域中的变量，即使在定义时所在的作用域已经不存在，这些变量仍然可以被访问和操作。\",\"使用场景\",\"使用匿名函数可以简化代码结构，将一些逻辑封装成临时使用的函数。\",\"使用闭包可以实现状态的保持和管理，特别适合需要持久化状态或者捕获动态变化的场景。\"]},\"392\":{\"h\":\"6. 递归函数\",\"t\":[\"递归：函数可以调用自身来解决问题。但需要明确出退出条件，否则会无限递归，导致栈溢出。\",\"func factorial(n int) int { if n <= 1 { return 1 } return n * factorial(n-1) } result := factorial(5) // result == 120\"]},\"393\":{\"h\":\"7. 函数作为参数和返回值\",\"t\":[\"函数作为参数：函数可以作为参数传递给其他函数。\",\"func apply(fn func(int, int) int, a int, b int) int { return fn(a, b) } result := apply(add, 5, 6) // result == 11\",\"函数作为返回值：函数可以返回另一个函数。\",\"func makeAdder(x int) func(int) int { return func(y int) int { return x + y } } add5 := makeAdder(5) result := add5(3) // result == 8\"]},\"394\":{\"h\":\"8. 延迟执行 ( )\",\"t\":[\"延迟执行：defer 语句可以延迟函数或方法的执行直到封闭函数返回。\",\"func main() { defer fmt.Println(\\\"World\\\") fmt.Println(\\\"Hello\\\") } // Output: // Hello // World\",\"多个 Defer 调用根据后进先出的顺序执行，类似于栈。\"]},\"395\":{\"h\":\"9. 错误处理\",\"t\":[\"错误处理：通过返回值和内置的 error 类型进行错误处理。\",\"func divide(x, y int) (int, error) { if y == 0 { return 0, fmt.Errorf(\\\"division by zero\\\") } return x / y, nil } result, err := divide(10, 0) if err != nil { fmt.Println(\\\"Error:\\\", err) }\"]},\"396\":{\"h\":\"方法\",\"t\":[\"方法是定义在类型上的函数，在 Golang 中方法与函数的区别在于，方法拥有接收者，而函数没有，且只有自定义类型能够拥有方法。\",\"type Rectangle struct { width, height int } func (r Rectangle) Area() int { return r.width * r.height } rect := Rectangle{10, 5} area := rect.Area() // area == 50\",\"这个案例中大体上和函数基本类似，只在函数名前面多了 (r Rectangle)，这定义了方法的接收者为 r，Rectangle 就是方法的接收者类型，说明方法属于该接收者，调用时需要使用到该接收者。\",\"方法的接收者分为 值接收者 和 指针接收者 两种类型\",\"值接收者\",\"type MyInt int func (m MyInt) Double() { m = m * 2 } func main() { var x MyInt = 10 var y int = int(x) // 将 MyInt 的值转换为 int fmt.Println(\\\"初始 x 的值为: \\\", y) // 输出: 初始 x 的值为: 10 x.Double() var z int = int(x) // 将 MyInt 的值转换为 int fmt.Println(\\\"成倍后 x 的值为: \\\", z) // 输出: 成倍后 x 的值为: 10 }\",\"这里调用了 Double 方法，是将 MyInt 类型的 x 变成两倍，但是实际的输出是：\",\"初始 x 的值为: 10 成倍后 x 的值为: 10\",\"并没有达到成倍的效果，这是因为这里方法的接收者是值，在方法被调用时，会将接收者的值传入方法中，可以类似的看为形参，在方法内修改形参的值，并不会对方法外面的值进行改变。\",\"如果要是通过指针调用会如何呢？\",\"func main() { var x MyInt = 10 var y int = int(x) // 将 MyInt 的值转换为 int fmt.Println(\\\"初始 x 的值为: \\\", y) // 输出: 初始 x 的值为: 10 (&x).Double() var z int = int(x) // 将 MyInt 的值转换为 int fmt.Println(\\\"成倍后 x 的值为: \\\", z) // 输出: 成倍后 x 的值为: 10 }\",\"事实上，输出的仍然是上述结果，这是因为为了能够和接收者类型进行匹配，Golang 自行进行进行了解引用操作，将 (&x).Double() 解析为(*(&x)).Double() ，以便于匹配 (m MyInt) 的接收者类型。\",\"指针接收者\",\"将上述代码进行修改，将值接收者变为指针接收者\",\"type MyInt int func (m *MyInt) Double() { *m = *m * 2 } func main() { var x MyInt = 10 var y int = int(x) // 将 MyInt 的值转换为 int fmt.Println(\\\"初始 x 的值为: \\\", y) // 输出: 初始 x 的值为: 10 x.Double() var z int = int(x) // 将 MyInt 的值转换为 int fmt.Println(\\\"成倍后 x 的值为: \\\", z) // 输出: 成倍后 x 的值为: 20 }\",\"执行后的结果为：\",\"初始 x 的值为: 10 成倍后 x 的值为: 20\",\"此时成功的修改了 x 的值，此时即便我们没有使用指针调用，依然能够修改成功，这也是因为 Golang 为了成功匹配接收者的类型，帮我们做了引用，将 x.Double() 转换为了 (&x).Double()，故方法的接收者为指针时，不管调用者是不是指针，都可以修改内部的值。\",\"函数参数的传递过程中，是值拷贝，也就是将原来的值复制一份传递，故修改形参时，不会影响原有的值。传递指针时，也是将指针的内容复制一份传递，但是由于两个指针所指向的是同一个地址，此时再通过该指针来修改形参，也会造成原值的变化，从而实现了原值的修改。\",\"了解到这些之后，可以思考切片这种类型做为参数传递，是否会修改原值？\",\"答案是：会修改原值。原因如下：在前面 数据类型的小节中，说明了切片这种数据类型底层实际上存储了指向切片的指针，对切片的操作是通过该指针来进行的，故在修改形参后，对应的也会造成原值的改变。\",\"和 Java 中不同的是，Golang 中的数组是直接存储在内存中的值，作为参数传递时会传递数组的副本，修改形参并不会对原值曹成变化，但是 Java 中是通过引用传递数组的，故会修改原值。\",\"方法和函数的区别\",\"方法和函数的却别，类似于 Java 中的 类方法 和 对象方法，即函数的归属不同。\",\"在 Golang 中接收者不能直接调用属于包的函数，只能直接调用自身绑定的方法，但是可以在这些方法的内部实现中访问包中的函数。\"]},\"397\":{\"h\":\"访问控制\",\"t\":[\"Golang 中的访问控制是通过其名称的第一个首字母进行区分的：\",\"大写字母开头：导出（exported），可以被其他包访问。\",\"小写字母开头：未导出（unexported），仅在包内可见。\",\"这种约定适用于 Go 的所有标识符，包括变量、常量、函数、类型（结构体、接口等）、字段和方法。\",\"Golang 的访问控制机制简化了代码结构，主要关注于包级别的访问限制。设计理念主要有以下几个方面：\",\"明确性：通过首字母大小写，访问控制一目了然。\",\"简洁性：避免了复杂的访问控制规则。\",\"包为单位：所有访问控制以包为基本单位，有助于实现良好的包封装\",\"如果想访问其内部的数据，可借助辅助函数或者接口\",\"辅助函数：可以定义类似于 Get、Set 类似的辅助函数，从而实现对没有权限的数据的访问。\",\"接口：虽然结构体字段可以是未导出的，但如果字段实现了某个接口的方法，并且该接口是导出的，依然可以通过接口访问其功能。\",\"这些是 Golang 函数的主要特性和用法示例，每个特性提供了强大的工具来处理函数的定义、调用、参数传递、返回值以及高级用法。在实际的开发中，函数是最高频被使用到的技术点，需要熟练掌握。\"]},\"398\":{\"h\":\"12. 泛型\",\"t\":[\"Go语言在1.18版本引入了泛型，使得函数和数据结构可以处理任意类型的数据，而不需要为每种类型编写单独的代码。泛型通过类型参数和类型约束实现，这大大增强了Go语言的灵活性和可重用性。\"]},\"399\":{\"h\":\"开始之前\",\"t\":[\"在正式了解泛型之前先看一个经常在开发中遇到的问题，求两数之和\",\"func sum(a int,b int) int{ return a + b }\",\"该函数可以求两个整数的和，那么要是求两个浮点数的和呢？很简单，再写一个函数不就行了吗？\",\"func sum(a float32,b float32) float32{ return a + b }\",\"没错，再写一个函数确实可以实现这个需求，那么再加一些需求，要求 int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64 这些类型的和呢？也对每一个类型都写一个求和函数吗？\",\"确实，这样是可以实现，但是不难发现，实际上的实现逻辑都是相同的，只是数据类型不同，要是能将数据类型变成一个变量传进来，根据传进来的变量动态的控制数据类型，不就可以了吗？\",\"很好，这个传进来的数据类型的变量，就是泛型。\"]},\"400\":{\"h\":\"泛型函数\",\"t\":[\"一个简单的泛型函数定义如下：\",\"func Print[T any](s []T) { for _, v := range s { fmt.Println(v) } }\",\"这里的 T 是一个类型参数，any 是一个预定义的接口，表示任意类型。这个函数可以接受任何类型的切片作为参数：\",\"ints := []int{1, 2, 3} strings := []string{\\\"a\\\", \\\"b\\\", \\\"c\\\"} Print(ints) Print(strings)\"]},\"401\":{\"h\":\"泛型类型\",\"t\":[\"泛型不仅可以用于函数，还可以用于定义数据结构，例如泛型列表：\",\"type List[T any] struct { items []T } func (l *List[T]) Add(item T) { l.items = append(l.items, item) } func (l *List[T]) Get(index int) T { return l.items[index] }\",\"这样就可以创建不同类型的列表，而不需要重复代码：\",\"intList := List[int]{} intList.Add(1) intList.Add(2) fmt.Println(intList.Get(0)) // 输出 1 stringList := List[string]{} stringList.Add(\\\"a\\\") stringList.Add(\\\"b\\\") fmt.Println(stringList.Get(0)) // 输出 a\"]},\"402\":{\"h\":\"类型约束\",\"t\":[\"类型参数可以有约束条件，使得泛型函数或类型只能接受特定类型。例如，只接受可比较的类型：\",\"type Comparable interface { comparable } func Max[T Comparable](a, b T) T { if a > b { return a } return b }\",\"使用 comparable 约束，Max 函数只能用于可比较的类型（即实现了==和!=操作的类型）：\",\"fmt.Println(Max(3, 5)) // 输出 5 fmt.Println(Max(\\\"a\\\", \\\"b\\\")) // 输出 b\"]},\"403\":{\"h\":\"多个类型参数\",\"t\":[\"泛型函数和类型可以有多个类型参数：\",\"func Map[K comparable, V any](m map[K]V) []K { keys := make([]K, 0, len(m)) for k := range m { keys = append(keys, k) } return keys } m := map[string]int{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3} keys := Map(m) fmt.Println(keys) // 输出 [one two three]（顺序可能不同）\"]},\"404\":{\"h\":\"使用约束定义接口\",\"t\":[\"你可以使用类型约束来定义接口，以便限制泛型类型的使用范围。例如，定义一个接口Number，它限制类型参数必须是数值类型：\",\"type Number interface { int | int32 | int64 | float32 | float64 } func Sum[T Number](s []T) T { var sum T for _, v := range s { sum += v } return sum } ints := []int{1, 2, 3, 4, 5} floats := []float64{1.1, 2.2, 3.3} fmt.Println(Sum(ints)) // 输出 15 fmt.Println(Sum(floats)) // 输出 6.6\"]},\"405\":{\"h\":\"泛型的优势\",\"t\":[\"代码复用：泛型允许编写通用函数和数据结构，而无需针对每种类型编写特定的实现。\",\"类型安全：相比于使用空接口（interface{}），泛型提供了编译时的类型检查，减少了运行时错误。\",\"简化代码：减少了重复代码，使代码更简洁、更易读。\",\"通过泛型，Go语言可以更灵活地处理各种数据类型，进一步增强了代码的可重用性和可维护性。\"]},\"406\":{\"h\":\"11. 接口\",\"t\":[\"在 Golang 中，接口（interface）是一种定义对象行为的方式，它是方法集合的抽象表示。接口定义了对象可以响应的方法集合，而不关心具体实现，以及实现接口的类型。这种特性使得接口在 Golang 中非常强大和灵活，有助于实现面向对象编程的抽象和多态。\"]},\"407\":{\"h\":\"接口定义\",\"t\":[\"接口定义使用 type 关键字和 interface 关键字，例如：\",\"type Shape interface { Area() float64 Perimeter() float64 }\",\"上面的例子定义了一个Shape接口，它要求实现该接口的类型必须实现Area()和Perimeter()方法，这两个方法返回浮点数类型。\"]},\"408\":{\"h\":\"接口实现\",\"t\":[\"任何类型只要实现了接口定义的所有方法，就隐式地实现了该接口。例如，定义一个Rectangle结构体实现Shape接口：\",\"type Rectangle struct { width, height float64 } func (r Rectangle) Area() float64 { return r.width * r.height } func (r Rectangle) Perimeter() float64 { return 2 * (r.width + r.height) }\",\"这里，Rectangle结构体实现了Shape接口的Area()和Perimeter()方法，因此Rectangle类型就可以被赋值给Shape接口变量。\",\"在 Golang 中没有明确的继承和实现，只要你实现了接口中定义的所有方法，就相当于你实现了该接口，即可使用多态，将该类型的值赋值给接口类型的变量。\"]},\"409\":{\"h\":\"接口变量\",\"t\":[\"接口变量可以存储任何实现了接口的类型的值。例如，可以将Rectangle类型的变量赋值给Shape接口变量：\",\"var s Shape s = Rectangle{width: 3, height: 4}\"]},\"410\":{\"h\":\"空接口\",\"t\":[\"在Go语言中，空接口 interface{} 不包含任何方法，因此所有类型都实现了空接口，类似与 Java 中的一切对象继承自 Object。空接口对于需要处理未知类型的数据非常有用，例如函数参数或者存储任意类型的数据：\",\"func describe(i interface{}) { fmt.Printf(\\\"(%v, %T)\\\\n\\\", i, i) } describe(42) describe(\\\"hello\\\") describe(true)\"]},\"411\":{\"h\":\"接口断言\",\"t\":[\"接口变量可以通过类型断言来获取其底层具体类型的值。例如：\",\"r := s.(Rectangle) fmt.Println(\\\"Width:\\\", r.width, \\\"Height:\\\", r.height)\",\"需要注意的是，如果类型断言失败，会引发运行时恐慌。因此，为了安全地检查接口变量是否可以转换为特定类型，可以使用带有两个返回值的类型断言，如：\",\"r, ok := s.(Rectangle) if ok { fmt.Println(\\\"Width:\\\", r.width, \\\"Height:\\\", r.height) } else { fmt.Println(\\\"Assertion failed\\\") }\"]},\"412\":{\"h\":\"接口组合\",\"t\":[\"接口可以通过组合多个接口来定义新的接口：\",\"type Writer interface { Write([]byte) (int, error) } type Closer interface { Close() error } type ReadWriteCloser interface { Reader Writer Closer }\",\"这种方式可以创建更加具体的接口，以便在不同的场景中使用。\",\"接口是Go语言中实现多态和抽象的关键机制之一，通过接口，可以实现更加灵活和可扩展的代码结构。\"]},\"413\":{\"h\":\"5. 逻辑控制语句\"},\"414\":{\"h\":\"If 语句\",\"t\":[\"if 语句是编程语言中最为基础也是最重要的一个逻辑控制语句，以下是几种 if 语句的具体用法。\",\"if 语句\",\"if condition { // condition 为 true 时执行的语句 }\",\"if ... else 语句\",\"if condition { // condition 为 true 时执行的语句 } else { // condition 为 false 时执行的语句 }\",\"if ... else if ... else 语句\",\"if condition1 { // condition1 为 true 时执行的语句 } else if condition2 { // condition2 为 true 时执行的语句 } else { // condition1 和 condition2 都为 false 时执行的语句 }\",\"if 语句可以嵌套使用，以满足实际需求\"]},\"415\":{\"h\":\"Switch 语句\",\"t\":[\"Switah 语句用于进行多分支条件判断，替代多个 if ... else 结构，使代码更加简洁和易读。\",\"switch expression { case value1: // 当 expression 等于 value1 时执行的代码块 case value2: // 当 expression 等于 value2 时执行的代码块 default: // 当所有 case 都不匹配时执行的代码块（可选） }\",\"特点与注意事项\",\"无需使用 break 语句：Go 的 switch 语句在匹配到某个 case 后会自动跳出 switch 块，不需要像 C/C++ 或者 Java 中那样显式使用 break 来终止 case。\",\"多个匹配条件：可以在同一个 case 分支中指定多个匹配条件，用逗号分隔：\",\"switch day { case \\\"Saturday\\\", \\\"Sunday\\\": fmt.Println(\\\"Weekend\\\") default: fmt.Println(\\\"Weekday\\\") }\",\"空 switch 语句：如果 switch 关键字后没有表达式，那么它将作为一个 true 开关，可以用于条件逻辑：\",\"switch { case x > 0: fmt.Println(\\\"x is positive\\\") case x < 0: fmt.Println(\\\"x is negative\\\") default: fmt.Println(\\\"x is zero\\\") }\",\"带初始化语句的 switch：可以在 switch 语句中初始化一个变量，该变量的作用域仅限于 switch 内部：\",\"switch x := getValue(); x { case 1: fmt.Println(\\\"x is 1\\\") case 2: fmt.Println(\\\"x is 2\\\") default: fmt.Println(\\\"x is neither 1 nor 2\\\") }\",\"类型开关：switch 语句还可以用于类型断言，以便处理接口类型的不同实现：\",\"var i interface{} = \\\"hello\\\" switch v := i.(type) { case int: fmt.Println(\\\"i is an int\\\") case string: fmt.Println(\\\"i is a string\\\") default: fmt.Printf(\\\"i is of unknown type %T\\\\n\\\", v) }\",\"在这个例子中，v 被分配为 i 的类型断言结果，并根据 v 的类型选择不同的 case。\",\"Switch 适用于同一变量的多种条件，能够使得代码逻辑更加清晰，方便维护。\"]},\"416\":{\"h\":\"For 语句\",\"t\":[\"For 循环是一种常见的控制流结构，用于重复执行一段代码块，直到指定的条件不再满足为止。与其他编程语言不同，Golang 中没有提供 While 语句，但可以使用 Golang 来实现同样的效果。\",\"基本语法\",\"Go 中的 for 循环有三种基本形式：\",\"基本的 for 循环：\",\"for initialization; condition; post { // 循环体 }\",\"initialization：循环开始前执行的初始化语句，通常是变量声明或赋值。\",\"condition：循环的条件判断表达式，当条件为 false 时退出循环。\",\"post：每次循环迭代后执行的操作，通常是更新变量的语句。\",\"示例：\",\"package main import \\\"fmt\\\" func main() { for i := 1; i <= 5; i++ { fmt.Println(i) } }\",\"上述代码将输出从 1 到 5 的数字。\",\"类似于 while 的循环：\",\"Go 中没有 while 循环，但可以通过 for 循环模拟 while 循环：\",\"for condition { // 循环体 }\",\"示例：\",\"package main import \\\"fmt\\\" func main() { sum := 0 for sum < 10 { sum += 2 fmt.Println(sum) } }\",\"上述代码会输出 2、4、6、8、10，直到 sum 的值不再小于 10。\",\"无限循环：\",\"可以使用空的 for 循环来实现无限循环：\",\"for { // 无限循环体 }\",\"示例：\",\"package main import \\\"fmt\\\" func main() { count := 0 for { count++ if count > 5 { break } fmt.Println(\\\"Count:\\\", count) } }\",\"上述代码将输出 Count: 1 到 Count: 5，然后退出循环。\",\"for range 循环\",\"Go 还提供了一种特殊的 for range 循环，用于迭代数组、切片、字符串、映射等数据结构：\",\"for index, value := range collection { // 使用 index 和 value 进行操作 }\",\"示例：\",\"package main import \\\"fmt\\\" func main() { numbers := []int{1, 2, 3, 4, 5} for index, value := range numbers { fmt.Printf(\\\"Index: %d, Value: %d\\\\n\\\", index, value) } }\",\"这段代码会输出数组 numbers 中每个元素的索引和值。\",\"注意事项\",\"Go 中的 for 循环的三个部分 initialization、condition 和 post 都是可选的。\",\"for 循环没有括号 {} 之外的条件表达式，循环体必须用大括号 {} 括起来，即使只有一行代码。\"]},\"417\":{\"h\":\"range 关键字\",\"t\":[\"在Go语言中，range关键字用于迭代数组（array）、切片（slice）、字符串（string）、映射（map）以及通道（channel）等数据结构的元素。它的语法形式有所不同，取决于所迭代的数据结构。应该放\",\"迭代数组和切片\",\"对于数组和切片，range返回两个值：索引和元素值。例如：\",\"nums := []int{2, 3, 4} for index, value := range nums { fmt.Printf(\\\"Index: %d, Value: %d\\\\n\\\", index, value) }\",\"迭代字符串\",\"对于字符串，range返回两个值：索引和Unicode码点（对应的rune值）。例如：\",\"str := \\\"Hello\\\" for index, char := range str { fmt.Printf(\\\"Index: %d, Character: %c\\\\n\\\", index, char) }\",\"迭代映射（map）\",\"对于映射，range返回两个值：键和值。注意，映射的迭代顺序是随机的。例如：\",\"mymap := map[string]int{\\\"a\\\": 1, \\\"b\\\": 2, \\\"c\\\": 3} for key, value := range mymap { fmt.Printf(\\\"Key: %s, Value: %d\\\\n\\\", key, value) }\",\"迭代通道（channel）\",\"对于通道，range会迭代通道接收的数据，直到通道关闭。例如：\",\"ch := make(chan int) go func() { ch <- 1 ch <- 2 ch <- 3 close(ch) }() for num := range ch { fmt.Println(num) }\",\"在所有这些情况下，range提供了一种方便的方法来迭代数据结构的元素，它简化了对数据的遍历操作。\"]},\"418\":{\"h\":\"Select 语句\",\"t\":[\"在 Go 语言中，select 语句用于处理并发操作，特别是用于从多个通信通道中选择和执行不同的 case。以下是关于 select 语句在 Go 中的详细解释和用法说明：\",\"1. 基本语法\",\"select 语句类似于 switch 语句，但用于通信操作：\",\"select { case communicationCase1: // 处理通信1的逻辑 case communicationCase2: // 处理通信2的逻辑 default: // 当没有任何通信情况发生时执行的逻辑（可选） }\",\"case communicationCase1:：每个 case 都描述了一个通信操作，它可以是 channel 的发送或接收操作。\",\"default:：default 分支在所有 case 都不满足时执行，它是可选的。\",\"2. 示例\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ch1 := make(chan string) ch2 := make(chan string) go func() { time.Sleep(2 * time.Second) ch1 <- \\\"message from ch1\\\" }() go func() { time.Sleep(1 * time.Second) ch2 <- \\\"message from ch2\\\" }() select { case msg1 := <-ch1: fmt.Println(\\\"Received\\\", msg1) case msg2 := <-ch2: fmt.Println(\\\"Received\\\", msg2) default: fmt.Println(\\\"No communication\\\") } }\",\"在这个示例中，select 语句会等待并接收来自 ch1 和 ch2 通道的消息，并打印出第一个准备好的消息。由于 ch2 的消息比 ch1 的消息先准备好，因此输出结果会是 \\\"Received message from ch2\\\"。\",\"3. 特点与注意事项\",\"select 语句在每次执行时，都会随机选择一个满足条件的 case 执行。如果多个 case 同时准备好，Go 会随机选择其中之一。\",\"如果没有任何 case 准备好，并且存在 default 分支，则会执行 default 分支的代码。\",\"select 语句可以和 for 循环结合使用，实现不断地监听多个通道的消息。\",\"select 中的 case 可以是发送操作、接收操作或者仅仅是用于阻塞当前 goroutine 的操作。\",\"4. 使用场景\",\"多路复用通信：当需要从多个通道中接收消息时，select 是一个非常有用的工具，可以有效地管理并发通信。\",\"超时控制：结合 time.After() 和 select 可以实现超时控制，例如在一定时间内等待某个操作完成或者超时返回默认结果。\",\"5. 总结\",\"select 语句是 Go 语言中处理并发编程的重要工具之一，通过选择和处理多个通道中的消息，可以简化并发程序的编写和管理。了解并熟练使用 select 可以提升代码的可读性和性能。\",\"上述的所有逻辑控制语句均可嵌套使用，从而达到流程控制的作用。这几个语句最为重要，也必须熟练掌握。\"]},\"419\":{\"h\":\"10. Map 集合\",\"t\":[\"在 Go 语言中，map 是一种内置的数据结构，用于存储键值对。它是一种无序集合，提供了非常高效的查找、插入和删除操作。所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，遍历 Map 时返回的键值对的顺序是不确定的。\"]},\"420\":{\"h\":\"声明和初始化\",\"t\":[\"Map 的声明语法如下所示\",\"var map [key]value\",\"由于 Map 是 Golang 内置的数据结构，故可以使用 make 函数来创建 map 实例\",\"m := make(map[string]int) // 也可使用字面量进行初始化 m := map[string]int{ \\\"Alice\\\": 25, \\\"Bob\\\": 30, }\"]},\"421\":{\"h\":\"操作map\",\"t\":[\"查询\",\"仅获取对应键的值\",\"bob := m[\\\"Bob\\\"]\",\"获取对应键的值，并且判断键是否存在\",\"age, exists := m[\\\"David\\\"] if exists { fmt.Println(\\\"David's age is\\\", age) } else { fmt.Println(\\\"David is not in the map\\\") }\",\"在获取 Map 的值时，如果键不存在，返回该类型的零值，例如 int 类型的零值是 0，string 类型的零值是 \\\"\\\"。\",\"插入或更新\",\"插入和更新操作是相同的，它首先会去更新，如果不存在则插入。\",\"m[\\\"height\\\"] = 180\",\"删除\",\"使用 delete 函数来删除指定的键值对\",\"delete(m, \\\"Bob\\\")\",\"获取map长度\",\"使用 len 函数来获取 map 集合的长度，该长度为键值对的个数\",\"mapLen := len(m)\",\"遍历\",\"for name, age := range m { fmt.Printf(\\\"%s is %d years old\\\\n\\\", name, age) }\",\"作为参数传递\",\"Map 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。\",\"map 的特性\",\"无序：map 中的键值对是无序的，遍历时的顺序不一定与插入顺序相同。\",\"键的类型：map 的键可以是任何支持 == 和 != 操作的类型，如布尔型、数字、字符串、指针、接口类型（只要动态类型支持 ==）、结构体（只要所有字段支持 ==）等。切片、函数和包含切片的结构体不能作为键。\",\"值的类型：map 的值可以是任何类型。\",\"零值：map 的零值是 nil，未初始化的 map 不能直接存储键值对。\"]},\"422\":{\"h\":\"并发安全\",\"t\":[\"Go 中的 map 本身不是并发安全的。如果在多个 goroutine 中同时读写同一个 map，可能会导致数据竞态和程序崩溃。可以使用 sync.Mutex 或 sync.RWMutex 来保护 map 的并发访问，或者使用 sync.Map，它是一个并发安全的 map 实现：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) func main() { var m sync.Map // 存储值 m.Store(\\\"Alice\\\", 25) m.Store(\\\"Bob\\\", 30) // 加载值 age, ok := m.Load(\\\"Alice\\\") if ok { fmt.Println(\\\"Alice's age:\\\", age) } // 遍历 m.Range(func(key, value interface{}) bool { fmt.Printf(\\\"%s is %d years old\\\\n\\\", key, value) return true }) }\"]},\"423\":{\"h\":\"特殊情况NaN\",\"t\":[\"这里要注意一个特殊情况，math.NaN() 并不是一个可比较的值，当其作为 key 时，因为 NaN（Not-a-Number） 与任何值（包括它自己）比较都不相等。\",\"使用 math.NaN() 作为 map 的键会导致不可预测的行为，或者编译时错误。以下是一个示例，展示为什么不能使用 math.NaN() 作为 map 的键：\",\"示例\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { m := make(map[float64]string) // 尝试使用 NaN 作为键 nan := math.NaN() m[nan] = \\\"Not-a-Number\\\" // 检查 NaN 是否在 map 中 val, exists := m[nan] fmt.Printf(\\\"Key exists: %v, Value: %v\\\\n\\\", exists, val) // 尝试使用另外一个 NaN 作为键来获取值 anotherNaN := math.NaN() val, exists = m[anotherNaN] fmt.Printf(\\\"Another key exists: %v, Value: %v\\\\n\\\", exists, val) }\",\"输出\",\"Key exists: true, Value: Not-a-Number Another key exists: false, Value:\",\"这个示例展示了以下几点：\",\"即使在 map 中插入了一个键 nan，查找时依然无法找到它，因为 NaN 不等于任何值（包括它自己）。\",\"exists 会返回 false，因为 anotherNaN 不等于 nan，即使它们都是 NaN。\",\"解决方案\",\"为了避免这种情况，不要使用 NaN 作为 map 的键。如果你有一个包含 NaN 的数据集，需要对其进行查找操作，考虑使用其他数据结构或转换策略来处理这些值。\",\"其他可比较类型的键\",\"在 Go 中，可以作为 map 键的类型包括：\",\"基本类型：int, float64, string, bool\",\"结构体类型（如果它们的所有字段都是可比较的类型）\",\"指针类型\",\"自定义类型（如果它们支持比较操作）\"]},\"424\":{\"h\":\"4. 运算符\"},\"425\":{\"h\":\"算术运算符\",\"t\":[\"+ 加法\",\"- 减法\",\"* 乘法\",\"/ 除法\",\"% 取模（求余）\",\"a := 10 b := 3 sum := a + b // 13 diff := a - b // 7 product := a * b // 30 quotient := a / b // 3 remainder := a % b // 1\"]},\"426\":{\"h\":\"关系运算符\",\"t\":[\"== 等于\",\"!= 不等于\",\"< 小于\",\"> 大于\",\"<= 小于等于\",\">= 大于等于\",\"a := 10 b := 5 isEqual := (a == b) // false isNotEqual := (a != b) // true isLess := (a < b) // false isGreaterOrEqual := (a >= b) // true\"]},\"427\":{\"h\":\"逻辑运算符\",\"t\":[\"&& 与\",\"|| 或\",\"! 非\",\"isTrue := true isFalse := false andResult := isTrue && isFalse // false orResult := isTrue || isFalse // true notResult := !isTrue // false\"]},\"428\":{\"h\":\"位运算符\",\"t\":[\"& 按位与\",\"| 按位或\",\"^ 按位异或\",\"<< 左移\",\">> 右移\",\"a := 5 // 二进制: 101 b := 3 // 二进制: 011 andResult := a & b // 1 (二进制: 001) orResult := a | b // 7 (二进制: 111) xorResult := a ^ b // 6 (二进制: 110) leftShift := a << 1 // 10 (二进制: 1010) rightShift := a >> 1 // 2 (二进制: 10)\"]},\"429\":{\"h\":\"赋值运算符\",\"t\":[\"= 简单赋值\",\"+= 加法赋值\",\"-= 减法赋值\",\"*= 乘法赋值\",\"/= 除法赋值\",\"%= 求余赋值\",\"<<= 左移赋值\",\">>= 右移赋值\",\"&= 按位与赋值\",\"|= 按位或赋值\",\"^= 按位异或赋值\",\"a := 10 b := 5 a += b // 等同于 a = a + b\"]},\"430\":{\"h\":\"其他运算符\",\"t\":[\"& 取址运算符\",\"* 指针运算符\",\". 结构体成员访问\",\"[] 数组、切片索引\",\"var i int = 10 var ptr *int ptr = &i // ptr 指向变量 i 的地址 var j int = *ptr // 取出指针并获取值 type Person struct{ name string age int } var person Person = Person{ name : \\\"CoderMast\\\", age : 18, } var name = person.name var personArr []Person;\"]},\"431\":{\"h\":\"运算符的优先级\",\"t\":[\"和数学中类似，Go语言中，运算符有不同的优先级，这影响了表达式中运算符执行的顺序。以下是Go语言中常见运算符的优先级，从高到低排列：\",\"一元运算符：\",\"+（正号）\",\"-（负号）\",\"!（逻辑非）\",\"^（按位取反）\",\"乘性运算符：\",\"*（乘法）\",\"/（除法）\",\"%（取模）\",\"加性运算符：\",\"+（加法）\",\"-（减法）\",\"位移运算符：\",\"<<（左移）\",\">>（右移）\",\"位运算符：\",\"&（按位与）\",\"|（按位或）\",\"^（按位异或）\",\"比较运算符：\",\"==（等于）\",\"!=（不等于）\",\"<（小于）\",\"<=（小于等于）\",\">（大于）\",\">=（大于等于）\",\"逻辑运算符：\",\"&&（逻辑与）\",\"逻辑运算符：\",\"||（逻辑或）\",\"赋值运算符：\",\"=（简单赋值）\",\"+=、-=、*=、/=、%=、<<=、>>=、&=、|=、^=（复合赋值运算符）\",\"运算符的优先级决定了表达式中各部分的计算顺序。例如，乘法运算符*的优先级高于加法运算符+，因此在表达式 a + b * c 中，先计算 b * c，然后再加上 a。\",\"除了优先级外，还有一些运算符是右结合的，例如赋值运算符=，意味着它从右向左结合。例如，a = b = 5 在Go语言中是合法的，先将 5 赋给 b，然后将 b 的值再赋给 a。\",\"这些规则有助于编写清晰且按预期执行的表达式。\",\"可使用括号来提升表达式中指定运算符的优先级，从而实现需求。\"]},\"432\":{\"h\":\"8. 指针\",\"t\":[\"在 C/C++ 中提供了指针这种类型，可以直接操作内存数据，在某些应用场景下非常实用。Golang 中也提供了指针，可以利用指针来简化一些任务的执行。虽然 Golang 提供了指针，但是由于操作指针的风险较大，考虑到这一点，Golang 同时也限制了指针的使用。\",\"指针是什么？\",\"指针是一个特殊类型的变量，用来存储其他变量的内存地址。指针变量指向一个内存地址，通过这个地址可以间接访问对应的变量。\"]},\"433\":{\"h\":\"声明指针\",\"t\":[\"在 Golang 中声明一个指针变量需要使用 * 符号，放在变量名前，表示这是一个指针类型的变量。\",\"var pointer *int // 一个指向整数类型的指针变量\"]},\"434\":{\"h\":\"获取变量地址\",\"t\":[\"获取变量的地址需要使用 & 符号，放在变量名前，表示取该变量的地址。\",\"var num = 10 pointer := &num // pointer 指向变量 num 的内存地址\"]},\"435\":{\"h\":\"访问指针的值\",\"t\":[\"通过 * 操作符，可以访问指针变量所指向的值。\",\"num := 10 ptr := &num fmt.Println(ptr) // 输出 0x1400012a0b0 fmt.Println(*ptr) // 输出 10\"]},\"436\":{\"h\":\"作为参数\",\"t\":[\"指针变量作为参数进行传递时，本质上还是传递的是指针的副本，只不过该副本中的内容和原指针变量的内容相同，所以通过地址来操作数据时，原数据也会发生改变。\",\"// 交换两个数的值 func swap(i *int, j *int) { var tmp = *i *i = *j *j = tmp } func main() { x := 5 y := 8 fmt.Printf(\\\"x : %d, y : %d\\\", x, y) // 输出 x : 5, y : 8 swap(&x, &y) fmt.Printf(\\\"x : %d, y : %d\\\", x, y) // 输出 x : 8, y : 5 }\"]},\"437\":{\"h\":\"指针运算\",\"t\":[\"在 C/C++ 中支持指针运算，可以通过一个指针，访问其指定偏移量的数据，自由度较高。虽然在 Golang 中也提供了指针，但是实际上是禁止了大部分指针运算的，原因是指针运算比较危险，很容易造成系统崩溃。\",\"下面是一段 C语言 的指针运算案例：\",\"#include <stdio.h> int main() { int arr[] = {1, 2, 3, 4, 5}; int* p = arr; // 指向数组的第一个元素 // 使用指针遍历数组 for (int i = 0; i < 5; ++i) { printf(\\\"Element %d: %d\\\\n\\\", i, *p); ++p; // 移动指针到下一个元素 } // 重置指针回到数组的第一个元素 p = arr; // 使用指针算术运算访问数组的特定元素 p = p + 2; printf(\\\"Third element (using pointer arithmetic): %d\\\\n\\\", *p); return 0; }\",\"在 C 语言中可以直接进行指针的运算，从而访问指定的数据，但这也就意味着，只要能够拿到对应的数据地址，即可访问，这是极度危险的。\",\"使用 unsafe 包进行指针运算\",\"如果你确实需要进行类似于 C/C++ 的指针算术运算，可以使用 unsafe 包。不过，这种方法应谨慎使用，因为它会绕过 Go 语言的内存安全检查，可能导致不可预知的行为。\"]},\"438\":{\"h\":\"空指针\",\"t\":[\"当一个指针被定义后没有分配到任何变量的时候，它的值为 nil，即空指针\",\"var pointer *int\",\"指针变量声明后，默认零值为 nil，即空指针。\",\"空指针判断\",\"if pointer == nil { // 空指针时执行 }\"]},\"439\":{\"h\":\"指针的指针\",\"t\":[\"指针是指向变量内存地址的值，这个值同样也是存储在内存中，存储到内存中的值也必然会占用内存，也会有地址。故有指针的指针。\",\"num := 10 var pointer1 = &num var pointer2 = &pointer1\",\"pointer1 即为 num 的指针\",\"pointer2 即为 pointer1 的指针，即指针的指针\",\"依次类推，可以有无限指针的循环嵌套\"]},\"440\":{\"h\":\"指针数组\",\"t\":[\"指针数组本质上是一个数组，只不过数据类型从基本类型变成了指针类型，存储的内容都是指针。\"]},\"441\":{\"h\":\"基础知识\"},\"442\":{\"h\":\"9. 结构体\",\"t\":[\"在 Golang 中相同类型的数据可以使用数组或者切片来存储，Golang 中抛弃了类与继承，保留了结构体，那么不同类型的数据可通过结构体来进行存储和组织。\",\"结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\"]},\"443\":{\"h\":\"声明结构体\",\"t\":[\"结构体定义需要使用 type 和 struct 关键字。结构体中不仅可以使用 Golang 内置的数据类型，也可以使用结构体类型。\",\"type StructName struct { variableName1 dataType1 variableName2 dataType2 variableName3 dataType3 variableName4 dataType4 ...... }\",\"如果有相同类型的字段，可以简化声明\",\"type StructName struct { variableName1,variableName2,variableName3 ... dataType variableName4 dataType1 }\",\"结构体内部的字段名也遵循首字母大小写命名暴露的方式，在声明结构体内部的字段时，应避免其与方法名重复。\"]},\"444\":{\"h\":\"创建结构体实例\",\"t\":[\"与 Java 这种面向对象的语言不同，Golang 中没有构造方法的概念，以下是 Golang 中创建结构体实例的几种方式。\",\"// 定义一个结构体 type Person struct { Name string Age int }\",\"字面量直接实例化\",\"p1 := Person{ Name: \\\"Alice\\\", Age: 30 }\",\"字面量简写形式实例化\",\"p2 := Person{ \\\"Bob\\\", 25 }\",\"如果省略字段名，那么就必须要初始化所有字段，且必须按照声明的顺序初始化。否则就会产生歧义，语法简化的目的是为了在保证语义唯一的情况下尽可能简化。\",\"使用 new 函数实例化\",\"p3 := new(Person) p3.Name = \\\"Charlie\\\" p3.Age = 35\",\"这里只能使用 new 函数，不能使用 make 函数，两者的区别请参考 「new 和 make 详解」\",\"使用取地址符号实例化\",\"p4 := &Person{ Name: \\\"Dave\\\", Age: 40 }\",\"因为 Golang 中没有构造方法，所以可以定义一个工厂函数来创建对象。\",\"func NewPerson() Person { person := new(Person) person.Name = \\\"Golang Notes\\\" person.Age = 18 return person }\"]},\"445\":{\"h\":\"访问结构体成员\",\"t\":[\"访问结构体成员时使用 . 操作符，语法如下：\",\"structName.fieldName\",\"以本节中的 Person 结构体为例，如下所示：\",\"person := Person{ Name: \\\"Golang Notes\\\", Age: 18 } // 访问结构体字段 fmt.Println(person.Name) // 输出 ： Golang Notes fmt.Println(person.Age) // 输出 ： 18 // 修改结构体字段 person.Name = \\\"Coder Mast\\\" fmt.Println(person.Name) // 输出 ： Coder Mast\",\"那么再来看下面的这个例子\",\"person := new(Person) person.Name = \\\"Golang Notes\\\" person.Age = 18 // 或者下面这种形式 person := &Person{ Name: \\\"Golang Notes\\\", Age: 18 } // 访问结构体字段 fmt.Println(person.Name) // 输出 ： Golang Notes fmt.Println(person.Age) // 输出 ： 18 // 修改结构体字段 person.Name = \\\"Coder Mast\\\" fmt.Println(person.Name) // 输出 ： Coder Mast\",\"在这个例子中，person 实际上是结构体指针，但是在访问结构体时没有进行解引用就可直接访问结构体内容，这是 Golang 提供的语法糖，在编译后会自动进行解引用，如 person.Name 会被解析为 (*person).Name，本质还是解引用，只不过是在编译阶段，不必我们手动实现。\"]},\"446\":{\"h\":\"结构体作为参数\",\"t\":[\"和 Golang 内置的数据类型一样，结构体类型也能作为参数传递给函数。\",\"结构体值做参数\",\"type Person struct { Name string Age int } func readPerson(person Person) { fmt.Printf(\\\"Name : %s，Age : %d\\\", person.Name, person.Age) } func changePerson(person Person) { person.Name = \\\"Coder Mast\\\" person.Age = 20 } func main() { var person Person = Person{ Name: \\\"Golang Notes\\\", Age: 18 } readPerson(person) // 输出：Name : Golang Notes，Age : 18 changePerson() readPerson(person) // 输出：Name : Golang Notes，Age : 18 }\",\"结构体指针做参数\",\"type Person struct { Name string Age int } func readPerson(person *Person) { fmt.Printf(\\\"Name : %s，Age : %d\\\", person.Name, person.Age) } func changePerson(person *Person) { person.Name = \\\"Coder Mast\\\" person.Age = 20 } func main() { person := new(Person) person.Name = \\\"Golang Notes\\\" person.Age = 18 readPerson(person) // 输出：Name : Golang Notes，Age : 18 changePerson() readPerson(person) // 输出：Name : Coder Mast，Age : 20 }\",\"结构体做参数时，无论是传递指针结构体还是值结构体，都是传递对应的副本，但是由于指针的副本同样指向的是该结构体实例，故修改形参后能够对原数据造成改变，值结构体不能。\"]},\"447\":{\"h\":\"结构体标签\",\"t\":[\"在 Golang 中结构体标签是一种元数据，用于提供给反射等工具以获取结构体字段的额外信息。常见的包括 JSON序列化、数据库映射、XML映射等。\",\"结构体标签的具体使用如下：\",\"结构体标签使用案例\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) // 定义一个结构体，并使用 JSON 标签 type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Email string `json:\\\"email,omitempty\\\"` // omitempty 表示如果该字段为空，则在序列化时忽略它 Ignore string `json:\\\"-\\\"` // - 表示在序列化和反序列化时忽略该字段 } func main() { p := Person{ Name: \\\"Alice\\\", Age: 30, Email: \\\"\\\", Ignore: \\\"This will be ignored\\\", } // 将结构体序列化为 JSON jsonData, err := json.Marshal(p) if err != nil { fmt.Println(\\\"Error marshalling JSON:\\\", err) return } fmt.Println(string(jsonData)) // 输出: {\\\"name\\\":\\\"Alice\\\",\\\"age\\\":30} // 将 JSON 反序列化为结构体 jsonStr := `{\\\"name\\\":\\\"Bob\\\",\\\"age\\\":25}` var p2 Person err = json.Unmarshal([]byte(jsonStr), &p2) if err != nil { fmt.Println(\\\"Error unmarshalling JSON:\\\", err) return } fmt.Printf(\\\"%+v\\\\n\\\", p2) // 输出: {Name:Bob Age:25 Email: Ignore:} }\"]},\"448\":{\"h\":\"结构体标签解释\",\"t\":[\"json:\\\"name\\\"：表示在进行 JSON 序列化和反序列化时，使用 name 作为 JSON 键名。\",\"json:\\\"email,omitempty\\\"：omitempty 表示如果该字段的值为空（零值），则在序列化时忽略它。\",\"json:\\\"-\\\"：表示在进行 JSON 序列化和反序列化时忽略该字段。\"]},\"449\":{\"h\":\"其他常见标签\",\"t\":[\"除了 JSON 标签外，还有其他常见的标签，例如：\",\"bson：用于 MongoDB 的 BSON 序列化。\",\"gorm：用于 GORM ORM 工具的数据库字段映射。\",\"yaml：用于 YAML 序列化和反序列化。\",\"type User struct { ID int `gorm:\\\"primary_key\\\"` // GORM 标签 Name string `bson:\\\"name\\\"` // BSON 标签 Age int `yaml:\\\"age\\\"` // YAML 标签 }\",\"通过使用结构体标签，可以更方便地控制序列化和反序列化的行为，以及与数据库、YAML 等数据格式的映射。\"]},\"450\":{\"h\":\"空结构体\",\"t\":[\"在 Golang 中，空结构体（empty struct）是一个没有任何字段的结构体。空结构体的声明如下：\",\"type EmptyStruct struct{}\",\"空结构体通常用于以下几种场景：\",\"作为信号传递的占位符：空结构体在信号传递、通知、标记等场景中使用，因为它不占用内存空间。\",\"集合数据结构中的占位符：空结构体可以用作 map 的值，以节省内存。\",\"嵌入其他结构体中：空结构体可以用于将方法注入到其他结构体中。\",\"使用空结构体作为信号传递的占位符\",\"在使用 channel 进行信号传递时，空结构体可以作为一种占位符，表示一个事件的发生，而不需要传递实际数据。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { done := make(chan struct{}) // 创建一个空结构体的 channel go func() { fmt.Println(\\\"Goroutine started\\\") time.Sleep(2 * time.Second) close(done) // 发送信号 }() <-done // 接收信号 fmt.Println(\\\"Goroutine finished\\\") }\",\"使用空结构体作为 map 的值\",\"空结构体可以用作 map 的值，用于构建集合数据结构。这种方式比使用其他占位符（如 bool）更节省内存。\",\"package main import \\\"fmt\\\" func main() { // 使用空结构体作为 map 的值 mySet := make(map[string]struct{}) // 添加元素 mySet[\\\"apple\\\"] = struct{}{} mySet[\\\"banana\\\"] = struct{}{} // 检查元素是否存在 if _, exists := mySet[\\\"apple\\\"]; exists { fmt.Println(\\\"apple is in the set\\\") } // 输出集合中的元素 for key := range mySet { fmt.Println(key) } }\",\"使用空结构体嵌入其他结构体中\",\"空结构体可以嵌入到其他结构体中，以便为其他结构体提供方法集合。\",\"package main import \\\"fmt\\\" type Logger struct{} func (Logger) Log(message string) { fmt.Println(\\\"Log:\\\", message) } type Server struct { Logger } func main() { server := Server{} server.Log(\\\"Server started\\\") // 调用嵌入的 Logger 方法 }\",\"内存消耗\",\"空结构体不消耗任何内存空间，因为它不包含任何数据字段。这使得它非常适合作为信号或占位符使用。\",\"package main import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { var emptyStruct struct{} fmt.Println(unsafe.Sizeof(emptyStruct)) // 输出 0 }\",\"综上所述，空结构体在 Golang 中是一个非常有用的工具，可以在多种场景中提高代码的效率和简洁性。\"]},\"451\":{\"h\":\"结构体的存储\",\"t\":[\"在 Golang 中结构体在内存中的存储是按其字段在结构体中声明的顺序来排列的，每个字段都以适当的内存对齐方式存储，以确保内存访问的效率。具体来说：\",\"内存对齐：为了提高内存访问效率，Go 会对结构体字段进行对齐。对齐意味着字段的起始地址必须是其类型大小的倍数。例如，int32 类型的字段必须对齐到 4 字节的边界，int64 类型的字段必须对齐到 8 字节的边界。\",\"填充和空洞：为了满足对齐要求，Go 编译器可能会在字段之间插入一些填充字节。这些填充字节不存储任何有效数据，只是为了使下一个字段的起始地址满足对齐要求。这会导致结构体在内存中占用的空间比字段本身的大小总和更多。\",\"内存对齐实际上是一种用空间换时间的设计。它通过将内存划分成大小均匀的小块，从而提高处理器访问内存的效率。这种设计有助于减少访问内存时的性能开销，从而提高系统整体的性能。\",\"示例和内存布局\",\"考虑以下结构体：\",\"package main import ( \\\"fmt\\\" \\\"unsafe\\\" ) type MyStruct struct { a bool // 1 byte b int32 // 4 bytes c int64 // 8 bytes } func main() { var s MyStruct fmt.Printf(\\\"Size of MyStruct: %d bytes\\\\n\\\", unsafe.Sizeof(s)) fmt.Printf(\\\"Offset of a: %d\\\\n\\\", unsafe.Offsetof(s.a)) fmt.Printf(\\\"Offset of b: %d\\\\n\\\", unsafe.Offsetof(s.b)) fmt.Printf(\\\"Offset of c: %d\\\\n\\\", unsafe.Offsetof(s.c)) }\",\"运行上述代码，会得到以下输出（具体数值可能会因编译器和平台而异）：\",\"Size of MyStruct: 16 bytes Offset of a: 0 Offset of b: 4 Offset of c: 8\",\"内存布局解释\",\"a 是一个 bool 类型，占用 1 个字节，位于偏移量 0。\",\"为了对齐 b（int32），需要在 a 后面插入 3 个填充字节，因此 b 的偏移量是 4。\",\"c 是 int64 类型，需要对齐到 8 字节的边界，b 的大小正好是 4 字节且在 a 之后填充了 3 个字节，使得 b 的末尾与 c 的起始位置对齐在 8 字节边界，因此 c 的偏移量是 8。\",\"总的来说，MyStruct 的总大小是 16 个字节，包含了字段和填充字节。\",\"内存优化\",\"为了减少结构体的内存占用，可以重新排列字段的顺序，尽量减少填充字节。例如：\",\"type OptimizedStruct struct { c int64 // 8 bytes b int32 // 4 bytes a bool // 1 byte }\",\"重新排列后的结构体可能占用更少的内存，因为字段 c 和 b 已经按对齐要求排列，只有在 b 和 a 之间需要 3 个填充字节。这样优化后的结构体的总大小可能会减小（依旧取决于具体平台和编译器）。\",\"内存布局优化\",\"package main import ( \\\"fmt\\\" \\\"unsafe\\\" ) type OptimizedStruct struct { c int64 // 8 bytes b int32 // 4 bytes a bool // 1 byte } func main() { var s OptimizedStruct fmt.Printf(\\\"Size of OptimizedStruct: %d bytes\\\\n\\\", unsafe.Sizeof(s)) fmt.Printf(\\\"Offset of c: %d\\\\n\\\", unsafe.Offsetof(s.c)) fmt.Printf(\\\"Offset of b: %d\\\\n\\\", unsafe.Offsetof(s.b)) fmt.Printf(\\\"Offset of a: %d\\\\n\\\", unsafe.Offsetof(s.a)) }\",\"运行上述优化后的代码，输出可能是：\",\"Size of OptimizedStruct: 16 bytes Offset of c: 0 Offset of b: 8 Offset of a: 12\",\"这表明通过优化字段顺序，结构体的大小可能会更小，同时保证内存对齐。\",\"总结\",\"了解结构体在内存中的存储方式和对齐规则，有助于编写更高效的代码，尤其是在处理大量结构体或需要高性能内存访问的场景中。合理地排列结构体字段可以减少内存占用和提高访问效率。\"]},\"452\":{\"h\":\"3. 数据类型及变量\"},\"453\":{\"h\":\"数据类型\",\"t\":[\"数据类型用于声明变量，虽然在函数中也有所涉及，如 参数、返回值等，但本质上仍是变量，如参数变量，返回值变量。\",\"数据类型实际上是为了优化内存空间的占用而提出的概念，根据实际的数据需求，分配不同的数据类型，从而达到节约内存的作用。\",\"Golang 中的数据类型分为：基本数据类型 和 复合数据类型。\"]},\"454\":{\"h\":\"基本数据类型\",\"t\":[\"数值类型：整数类型 (int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64) 和浮点数类型 (float32, float64)、实数和虚数类型 （complex64、complex128）\",\"布尔类型：bool，Go 语言中不允许将布尔值类型强制转换为整型，也无法直接参与数值运算，也无法与其他类型转换。\",\"字符串类型：string\",\"基本类型的值，直接存在变量中。\"]},\"455\":{\"h\":\"复合数据类型\",\"t\":[\"数组类型：[n]T，表示拥有 n 个类型为 T 的元素的数组。数组是固定大小的连续内存块，其元素是存储在数组内存中的值，而不是地址。访问数组元素时，是直接访问内存中的数据。\",\"var arr [3]int = [3]int{1, 2, 3}\",\"切片类型：[]T，动态数组，可以增长和收缩。切片是一个动态数组，其底层结构包含一个指向数组的指针、长度和容量。切片本身包含了一个指向底层数组的指针，因此切片是通过地址引用数组元素的\",\"var slice []int = []int{1, 2, 3}\",\"映射类型：map[K]V，键值对集合。映射是一个哈希表，它是引用类型。映射中的键值对存储在内存中的某个位置，映射变量本身是一个指向哈希表的指针。\",\"var m map[string]int = map[string]int{\\\"a\\\": 1, \\\"b\\\": 2}\",\"结构体类型：struct，用于组织不同类型的字段。结构体是一个聚合数据类型，其字段是存储在结构体内存中的值，而不是地址。不过，结构体可以包含指针字段。\",\"type Person struct { Age int Name string } var p person = Person{ 18, \\\"CoderMast\\\" }\",\"指针类型：*T，用于声明一个指向类型 T 的指针。可使用 & 取地址符来获取指定变量的地址，使用 * 来取出指针所指向的地址的值。在 32 位系统上，指针为 4B，在 64 位系统上，指针为 8B。\",\"var i int = 10 var p *int = &i var j int = *p\",\"具体的变量信息如下：\",\"内存地址: 变量: 值: 0x0000 i 10 0x0004 p 0x0000(指向 i 的地址) 0x000C j 10\",\"Channel 类型，管道类型，用于在 goroutine 之间进行通信，从而控制 goroutine 的执行。操作符为 <-。var ch chan ChannelType 用于声明一个 channel 类型的变量 ch，且仅接受 ChannelType 类型的数据。\",\"ch := make(chan int) // 定义一个仅接受 int 类型的管道变量 ch ch <- 10 // 写入管道 i := <- ch // 读出管道\",\"管道中的值，读出即失效。 \",\"函数类型，在 Golang 中函数可像普通变量一样被传递、赋值和作为参数或者返回值。\",\"// 1. 函数类型声明 type Operator func(int, int) int // 2. 函数类型赋值 func add(a int,b int) int { return a + b } var operator Operator operator = add\",\"综上所述，在 Go 语言中\",\"数组元素直接存储在数组的内存块中。\",\"切片是引用类型，通过指针引用底层数组。\",\"映射是引用类型，通过指针引用底层哈希表。\",\"结构体字段直接存储在结构体内存块中，但结构体可以包含指针字段。\",\"这意味着在使用切片和映射时，实际操作的是底层数据的地址，而数组和结构体的操作是对其内存块中实际存储的数据进行操作。\"]},\"456\":{\"h\":\"变量\",\"t\":[\"在计算机中，数据都是存在内存中的二进制序列，可直接通过内存地址进行数据访问，但直接操作内存地址，不仅难度高、效率低，而且可能造成极其危险的后果，为了解决这个问题，引入了变量的概念，通过变量来访问数据。实际上变量的定义来源于数学，意思为可变化的量，通过变量名来访问变量的值。\",\"在 Golang 中变量可通过 var 关键字来声明，具体语法如下：\",\"变量的声明\",\"// 1. 声明单个变量 var variableName type // 2. 同时声明多个变量 var variableName1,variableName2 type\",\"该示例定义了一个数据类型为 type ，变量名为 identifier 的变量。\",\"该示例定义了两个数据类型为 type，变量名为 variableName1 和 variableName2 的变量。\",\"变量的初始化\",\"// 1. 初始化单个变量 var name string = \\\"友人\\\" // 2. 一次性初始化多个变量 var name, age = \\\"CoderMast\\\", 18\",\"Golang 提供了类型推导，可使得在不显式声明数据类型时，可直接初始化变量。\",\"var name = \\\"GolangNotes\\\"\",\"另外，Golang 还提供了一种简化变量声明和初始化的语法糖，可直接定义并初始化变量，已经被定义的变量无法使用该语法糖。\",\"name := \\\"CoderMast\\\"\",\"变量声明后如果没有给定初始值，则 Go 会默认给定对应的 零值，这里的零值并非等于 0，而是代指默认值。\"]},\"457\":{\"h\":\"常量\",\"t\":[\"变量是变化的量，那么常量即为不变的量，实际上就是这样。Golang 中常量和变量类似，只需要使用 const 关键字即可。\",\"// 单个变量 const url = \\\"https://www.golangnotes.com/\\\" // 多个变量 const ( name = \\\"CoderMast\\\" age = 18 ) // 同时声明多个常量时，如果省略了值则表示和上面一行的值相同 const ( n1 = 100 n2 n3 )\"]},\"458\":{\"h\":\"iota\",\"t\":[\"iota 是 Golang 中的一个特殊常量，可以被编译器修改。是 golang 中的常量计数器，在第一次使用 const 声明常量时初始化为 0，之后每声明一个常量则将 iota 加 1，也可将 iota 看做是常量的索引。\",\"const ( i = iota j = iota k = iota ) // fmt.Println(iota) 这样是错误的，不能直接把 iota 当做变量或常量使用 fmt.Println(i) fmt.Println(j) fmt.Println(k)\"]},\"459\":{\"h\":\"7. 并发安全和竞态条件\",\"t\":[\"在并发编程中，并发安全（Concurrency Safety）和竞态条件（Race Condition）是两个重要的概念。理解并解决这些问题对于编写高效和可靠的并发程序至关重要。\"]},\"460\":{\"h\":\"并发安全（Concurrency Safety）\",\"t\":[\"并发安全指的是程序在并发环境中运行时，能够正确地管理多个线程或 Goroutine 对共享资源的访问，确保程序的正确性和一致性。\"]},\"461\":{\"h\":\"常见的并发安全技术\",\"t\":[\"互斥锁（Mutex）：用于确保同一时刻只有一个 Goroutine 访问共享资源。\",\"读写锁（RWMutex）：允许多个 Goroutine 同时读取，但写操作是互斥的。\",\"原子操作（Atomic Operations）：提供一种无锁机制，用于对基本数据类型进行原子操作。\",\"通道（Channels）：Go 语言特有的用于在 Goroutine 之间安全地传递数据。\"]},\"462\":{\"h\":\"竞态条件（Race Condition）\",\"t\":[\"竞态条件指的是多个 Goroutine 并发访问和修改共享资源时，程序的运行结果依赖于 Goroutine 的执行顺序。这种情况下，程序可能产生不可预期的错误或不一致的数据。\",\"竞态条件发生在多个 Goroutine 并发写入共享变量而没有适当同步时。例如：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var count int func increment(wg *sync.WaitGroup) { defer wg.Done() for i := 0; i < 1000; i++ { count++ } } func main() { var wg sync.WaitGroup for i := 0; i < 10; i++ { wg.Add(1) go increment(&wg) } wg.Wait() fmt.Println(\\\"Final count:\\\", count) }\",\"在这个示例中，count 变量被多个 Goroutine 并发访问和修改，导致竞态条件，最终结果是不确定的。\"]},\"463\":{\"h\":\"解决竞态条件\",\"t\":[\"可以使用互斥锁（Mutex）来确保对共享变量的访问是安全的：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var ( count int mu sync.Mutex ) func increment(wg *sync.WaitGroup) { defer wg.Done() for i := 0; i < 1000; i++ { mu.Lock() count++ mu.Unlock() } } func main() { var wg sync.WaitGroup for i := 0; i < 10; i++ { wg.Add(1) go increment(&wg) } wg.Wait() fmt.Println(\\\"Final count:\\\", count) }\",\"通过使用互斥锁（mu.Lock() 和 mu.Unlock()），确保在同一时刻只有一个 Goroutine 能修改 count 变量，从而避免竞态条件。\"]},\"464\":{\"h\":\"使用原子操作\",\"t\":[\"对于简单的计数操作，可以使用原子操作来避免竞态条件：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" \\\"sync/atomic\\\" ) var count int32 func increment(wg *sync.WaitGroup) { defer wg.Done() for i := 0; i < 1000; i++ { atomic.AddInt32(&count, 1) } } func main() { var wg sync.WaitGroup for i := 0; i < 10; i++ { wg.Add(1) go increment(&wg) } wg.Wait() fmt.Println(\\\"Final count:\\\", count) }\"]},\"465\":{\"h\":\"使用通道\",\"t\":[\"使用 Go 的通道可以实现无锁并发编程，确保数据在 Goroutine 之间安全传递：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) func increment(wg *sync.WaitGroup, ch chan int) { defer wg.Done() for i := 0; i < 1000; i++ { ch <- 1 } } func main() { var wg sync.WaitGroup ch := make(chan int, 1000) go func() { wg.Wait() close(ch) }() for i := 0; i < 10; i++ { wg.Add(1) go increment(&wg, ch) } count := 0 for n := range ch { count += n } fmt.Println(\\\"Final count:\\\", count) }\",\"在这个示例中，通道 ch 用于在 Goroutine 之间传递数据，确保计数操作是并发安全的。\"]},\"466\":{\"h\":\"总结\",\"t\":[\"并发安全 是确保多个 Goroutine 并发访问共享资源时程序的正确性和一致性。\",\"竞态条件 是指程序的行为依赖于 Goroutine 的执行顺序，导致不可预期的结果。\",\"解决竞态条件 的方法包括使用互斥锁、原子操作和通道。\",\"通过理解和应用这些技术，可以编写出高效、安全的并发程序。\"]},\"467\":{\"h\":\"2. Channel 通道\",\"t\":[\"在Go语言中，通道（Channel）是一种数据类型，用于在多个 goroutine 之间进行通信和同步。通道提供了一种安全、高效的方式，用于传递 数据 和 控制信息 。以下是关于通道的一些重要特性和使用方法：\"]},\"468\":{\"h\":\"特性和概念\",\"t\":[\"并发安全性：\",\"通道本质上是并发安全的，多个goroutine可以安全地向通道发送（send）和接收（receive）数据，无需额外的显式同步操作。\",\"阻塞特性：\",\"发送和接收操作可以是阻塞的，这意味着当没有数据可发送或接收时，goroutine可能会暂时阻塞在发送或接收操作上，直到数据可用或者通道就绪。\",\"通信顺序：\",\"通道保证发送和接收操作的顺序是一致的，即发送的数据会按照发送的顺序被接收。\",\"关闭通道：\",\"可以通过 close() 函数关闭通道，关闭后的通道不再允许发送数据，但仍可以接收已有数据。关闭的通道可以用来通知接收方没有更多的数据。\",\"容量：\",\"通道可以是有限容量的，即在创建时可以指定通道能够缓存的元素数量。有容量的通道在缓存未满时允许发送操作立即完成，而无需等待接收方接收。\"]},\"469\":{\"h\":\"通道的创建\",\"t\":[\"通道可以使用 make 函数创建：\",\"ch := make(chan int)\",\"这个例子创建了一个可以传递 int 类型数据的无缓冲通道。\"]},\"470\":{\"h\":\"发送和接收数据\",\"t\":[\"通道使用 <- 操作符进行数据的发送和接收：\",\"// 发送数据到通道 ch <- 42 // 从通道接收数据 value := <-ch\"]},\"471\":{\"h\":\"无缓冲通道 vs. 带缓冲通道\"},\"472\":{\"h\":\"无缓冲通道\",\"t\":[\"无缓冲通道在没有接收者准备好接收数据时会阻塞发送操作，同样没有发送者时也会阻塞接收操作。这种方式确保了发送和接收的同步。\",\"ch := make(chan int) go func() { ch <- 42 // 发送者阻塞直到有接收者 }() value := <-ch // 接收者阻塞直到有发送者\"]},\"473\":{\"h\":\"带缓冲通道\",\"t\":[\"带缓冲通道可以容纳一定数量的元素，不会立即阻塞发送操作，直到缓冲区满。\",\"ch := make(chan int, 2) ch <- 42 ch <- 43 // 此时缓冲区已满，再次发送会阻塞\"]},\"474\":{\"h\":\"关闭通道\",\"t\":[\"通道可以被显式关闭，以通知接收者没有更多的数据将被发送：\",\"close(ch)\",\"关闭通道后，再发送数据会引发 panic，但接收操作会继续接收已存在的数据，直到缓冲区为空。可以使用以下方式检测通道是否关闭：\",\"value, ok := <-ch if !ok { fmt.Println(\\\"通道已关闭\\\") }\"]},\"475\":{\"h\":\"使用通道的示例\",\"t\":[\"以下是一个简单的使用通道在 Goroutines 之间传递数据的示例：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func worker(ch chan int) { for i := 0; i < 5; i++ { ch <- i time.Sleep(time.Second) } close(ch) } func main() { ch := make(chan int) go worker(ch) for val := range ch { fmt.Println(val) } }\",\"在这个例子中，worker 函数向通道 ch 发送数据，然后 main 函数从通道 ch 接收数据并打印。\"]},\"476\":{\"h\":\"Select 语句\",\"t\":[\"select 语句使得一个 Goroutine 能够等待多个通道操作。它类似于 switch 语句，但用于通道通信。\",\"func main() { ch1 := make(chan int) ch2 := make(chan int) go func() { time.Sleep(time.Second) ch1 <- 1 }() go func() { time.Sleep(2 * time.Second) ch2 <- 2 }() for i := 0; i < 2; i++ { select { case msg1 := <-ch1: fmt.Println(\\\"Received\\\", msg1) case msg2 := <-ch2: fmt.Println(\\\"Received\\\", msg2) } } }\",\"这个例子展示了如何使用 select 语句从多个通道接收数据。\"]},\"477\":{\"h\":\"通道的使用场景\",\"t\":[\"数据传递：在 Goroutines 之间传递数据。\",\"同步：确保 Goroutines 按预期顺序执行。\",\"通信：在并发任务之间进行协调。\",\"通道是 Go 语言中强大且灵活的并发编程工具，能够帮助开发者编写高效且易于维护的并发程序。\"]},\"478\":{\"h\":\"5. 并发模式\",\"t\":[\"并发模式是指在并发编程中常用的设计模式和方法，用于有效地管理和协调多个并发任务。以下是一些常见的并发模式，结合 Go 语言的示例代码来介绍它们的应用。\"]},\"479\":{\"h\":\"1. 工作池（Worker Pool）\",\"t\":[\"工作池模式通过一组固定数量的工作 Goroutine 来处理大量的任务，避免因为过多的 Goroutine 而导致资源的过度消耗。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" \\\"time\\\" ) // Worker 函数，模拟处理任务 func worker(id int, jobs <-chan int, results chan<- int, wg *sync.WaitGroup) { defer wg.Done() for j := range jobs { fmt.Printf(\\\"Worker %d started job %d\\\\n\\\", id, j) time.Sleep(time.Second) // 模拟工作 fmt.Printf(\\\"Worker %d finished job %d\\\\n\\\", id, j) results <- j * 2 // 返回结果 } } func main() { const numJobs = 5 const numWorkers = 3 jobs := make(chan int, numJobs) results := make(chan int, numJobs) var wg sync.WaitGroup // 启动 worker Goroutine for w := 1; w <= numWorkers; w++ { wg.Add(1) go worker(w, jobs, results, &wg) } // 发送任务到 jobs 通道 for j := 1; j <= numJobs; j++ { jobs <- j } close(jobs) // 等待所有 worker 完成 wg.Wait() close(results) // 打印结果 for result := range results { fmt.Println(\\\"Result:\\\", result) } }\"]},\"480\":{\"h\":\"2. 扇入（Fan-in）\",\"t\":[\"扇入模式将多个输入通道合并到一个通道，从而可以在单个 Goroutine 中处理来自多个来源的数据。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) // generator 生成一系列数据并发送到通道 func generator(start int, end int, c chan<- int) { for i := start; i <= end; i++ { c <- i time.Sleep(time.Millisecond * 500) // 模拟延迟 } close(c) } // fanIn 将多个通道合并为一个通道 func fanIn(channels ...<-chan int) <-chan int { out := make(chan int) var wg sync.WaitGroup output := func(c <-chan int) { for n := range c { out <- n } wg.Done() } for _, c := range channels { wg.Add(1) go output(c) } go func() { wg.Wait() close(out) }() return out } func main() { c1 := make(chan int) c2 := make(chan int) go generator(1, 5, c1) go generator(6, 10, c2) for n := range fanIn(c1, c2) { fmt.Println(n) } }\"]},\"481\":{\"h\":\"3. 扇出（Fan-out）\",\"t\":[\"扇出模式将一个输入通道的数据分发到多个 Goroutine 进行并行处理。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" \\\"time\\\" ) // worker 函数处理来自 jobs 通道的任务 func worker(id int, jobs <-chan int, wg *sync.WaitGroup) { defer wg.Done() for j := range jobs { fmt.Printf(\\\"Worker %d processing job %d\\\\n\\\", id, j) time.Sleep(time.Second) // 模拟工作 } } func main() { jobs := make(chan int, 10) var wg sync.WaitGroup // 启动 worker Goroutine for w := 1; w <= 3; w++ { wg.Add(1) go worker(w, jobs, &wg) } // 发送任务到 jobs 通道 for j := 1; j <= 10; j++ { jobs <- j } close(jobs) // 等待所有 worker 完成 wg.Wait() }\"]},\"482\":{\"h\":\"4. 管道（Pipeline）\",\"t\":[\"管道模式将任务分解为一系列的处理步骤，每个步骤由一个 Goroutine 处理，并将结果传递到下一个步骤的 Goroutine。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) // 生成器生成一系列数字 func generator(nums ...int) <-chan int { out := make(chan int) go func() { for _, n := range nums { out <- n } close(out) }() return out } // 阶段1：数字加倍 func doubler(in <-chan int) <-chan int { out := make(chan int) go func() { for n := range in { out <- n * 2 } close(out) }() return out } // 阶段2：数字平方 func squarer(in <-chan int) <-chan int { out := make(chan int) go func() { for n := range in { out <- n * n } close(out) }() return out } func main() { // 生成数据并通过管道传递 nums := generator(1, 2, 3, 4, 5) doubled := doubler(nums) squared := squarer(doubled) // 打印结果 for n := range squared { fmt.Println(n) } }\"]},\"483\":{\"h\":\"5. 多路复用（Multiplexing）\",\"t\":[\"多路复用模式通过 select 语句从多个通道中选择可用的通道进行处理。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) // 生成器函数生成数据并发送到通道 func generator(name string, interval time.Duration) <-chan string { c := make(chan string) go func() { for i := 1; ; i++ { c <- fmt.Sprintf(\\\"%s: %d\\\", name, i) time.Sleep(interval) } }() return c } func main() { c1 := generator(\\\"Channel 1\\\", 2*time.Second) c2 := generator(\\\"Channel 2\\\", 3*time.Second) for i := 0; i < 5; i++ { select { case msg1 := <-c1: fmt.Println(msg1) case msg2 := <-c2: fmt.Println(msg2) } } }\"]},\"484\":{\"h\":\"6. 生产者-消费者（Producer-Consumer）\",\"t\":[\"生产者-消费者模式通过缓冲通道协调生产者和消费者的工作，确保数据的安全传递和处理。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" \\\"time\\\" ) // 生产者函数生成数据并发送到通道 func producer(id int, jobs chan<- int, wg *sync.WaitGroup) { defer wg.Done() for j := 1; j <= 5; j++ { fmt.Printf(\\\"Producer %d producing job %d\\\\n\\\", id, j) jobs <- j time.Sleep(time.Millisecond * 500) } } // 消费者函数从通道接收数据并处理 func consumer(id int, jobs <-chan int, wg *sync.WaitGroup) { defer wg.Done() for j := range jobs { fmt.Printf(\\\"Consumer %d processing job %d\\\\n\\\", id, j) time.Sleep(time.Second) } } func main() { jobs := make(chan int, 10) var wg sync.WaitGroup // 启动生产者 Goroutine for p := 1; p <= 2; p++ { wg.Add(1) go producer(p, jobs, &wg) } // 启动消费者 Goroutine for c := 1; c <= 2; c++ { wg.Add(1) go consumer(c, jobs, &wg) } // 等待所有生产者完成 wg.Wait() close(jobs) }\",\"这些并发模式提供了一种结构化的方法来编写并发程序，通过合理使用这些模式，可以简化并发编程的复杂性，提高代码的可维护性和扩展性。\"]},\"485\":{\"h\":\"6. Context 上下文\",\"t\":[\"在 Go 语言中，context 包提供了一种用于在 API 边界上传递请求范围数据、取消信号和截止日期的方式。context 包主要用于在不同的 Goroutine 之间共享上下文信息，常用于处理请求生命周期管理、超时控制、取消信号传递等场景。下面是一些常见的用法示例以及详细解释。\"]},\"486\":{\"h\":\"基本用法\"},\"487\":{\"h\":\"创建上下文\",\"t\":[\"有几种方式可以创建一个上下文对象：\",\"context.Background()：返回一个空的上下文，通常在程序的主函数、初始化、测试中使用。\",\"context.TODO()：返回一个空的上下文，表示还没有明确的上下文要使用，通常用于暂时替代位置。\",\"ctx := context.Background()\"]},\"488\":{\"h\":\"传递上下文\",\"t\":[\"上下文对象通常作为函数的第一个参数进行传递。\",\"func DoSomething(ctx context.Context) { // 函数体 } func main() { ctx := context.Background() DoSomething(ctx) }\"]},\"489\":{\"h\":\"取消上下文\",\"t\":[\"可以使用 context.WithCancel 创建一个可以取消的上下文。当调用返回的取消函数时，所有派生自该上下文的操作都会收到取消信号。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func doWork(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"Work cancelled\\\") return default: fmt.Println(\\\"Working...\\\") time.Sleep(500 * time.Millisecond) } } } func main() { ctx, cancel := context.WithCancel(context.Background()) go doWork(ctx) time.Sleep(2 * time.Second) cancel() // 取消上下文 time.Sleep(1 * time.Second) }\"]},\"490\":{\"h\":\"超时上下文\",\"t\":[\"使用 context.WithTimeout 可以创建一个带有超时的上下文。当超时时间到达时，操作会自动取消。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func doWork(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"Work timed out\\\") return default: fmt.Println(\\\"Working...\\\") time.Sleep(500 * time.Millisecond) } } } func main() { ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second) defer cancel() go doWork(ctx) time.Sleep(3 * time.Second) }\"]},\"491\":{\"h\":\"截止时间上下文\",\"t\":[\"使用 context.WithDeadline 可以创建一个带有截止时间的上下文，与 WithTimeout 类似，但可以指定具体的时间点。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func doWork(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"Work deadline reached\\\") return default: fmt.Println(\\\"Working...\\\") time.Sleep(500 * time.Millisecond) } } } func main() { deadline := time.Now().Add(2 * time.Second) ctx, cancel := context.WithDeadline(context.Background(), deadline) defer cancel() go doWork(ctx) time.Sleep(3 * time.Second) }\"]},\"492\":{\"h\":\"带值上下文\",\"t\":[\"使用 context.WithValue 可以在上下文中存储键值对数据，适用于跨 API 边界传递请求范围的数据。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" ) func doWork(ctx context.Context) { key := \\\"myKey\\\" if value, ok := ctx.Value(key).(string); ok { fmt.Println(\\\"Value from context:\\\", value) } else { fmt.Println(\\\"Key not found in context\\\") } } func main() { ctx := context.WithValue(context.Background(), \\\"myKey\\\", \\\"myValue\\\") doWork(ctx) }\",\"综合示例\",\"下面是一个综合示例，展示了如何使用取消、超时和带值的上下文。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func doWork(ctx context.Context) { key := \\\"taskID\\\" if taskID, ok := ctx.Value(key).(string); ok { fmt.Printf(\\\"Started task with ID: %s\\\\n\\\", taskID) } for { select { case <-ctx.Done(): fmt.Println(\\\"Work cancelled or timed out\\\") return default: fmt.Println(\\\"Working...\\\") time.Sleep(500 * time.Millisecond) } } } func main() { // 创建一个带有超时的上下文 ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second) defer cancel() // 在上下文中添加值 ctx = context.WithValue(ctx, \\\"taskID\\\", \\\"1234\\\") go doWork(ctx) time.Sleep(3 * time.Second) }\"]},\"493\":{\"h\":\"总结\",\"t\":[\"在 Go 语言中，context 包提供了一种简洁而强大的方式来管理并发程序中的请求范围数据、取消信号和截止日期。通过正确地使用 context，可以更好地控制 Goroutine 的生命周期，避免资源泄漏，提高代码的可读性和维护性。\"]},\"494\":{\"h\":\"1. Goroutine 协程\",\"t\":[\"Go 协程（Goroutine）是 Go 语言提供的一种轻量级线程，由 Go 运行时来管理。是与其他函数同时运行的函数，它们是并发执行代码的基础。\",\"在函数调用前加上 go 关键字，这次调用就会在一个新的 goroutine 中并发执行。当被调用的函数返回时，这个 goroutine 也自动结束。\",\"需要注意的是，如果这个函数有返回值，那么这个返回值会被丢弃。\",\"Go 协程（Goroutine）之间通过通道（channel）进行通信，简单的说就是多个协程之间通信的管道。通道可以防止多个协程访问共享内存时发生资源争抢的问题。\"]},\"495\":{\"h\":\"启动 Goroutine\",\"t\":[\"要启动一个新的 Goroutine，只需要在函数调用前加上 go 关键字。例如：\",\"go myFunction()\",\"这行代码会启动一个新的 Goroutine 来执行 myFunction。\"]},\"496\":{\"h\":\"Goroutine 的特性\",\"t\":[\"轻量级：Goroutine 比传统线程更轻量级。每个 Goroutine 使用的内存非常少，启动速度也更快。\",\"调度：Goroutine 由 Go 运行时管理和调度，而不是操作系统。\",\"栈管理：Goroutine 的栈是动态增长的，初始大小一般较小（如 2KB），但可以根据需要动态扩展，最大可达 1GB。\"]},\"497\":{\"h\":\"同步和通信\",\"t\":[\"在 Go 中，同步和通信通常通过通道（channel）来实现。通道是 Go 语言提供的一种类型安全的通信机制。\"]},\"498\":{\"h\":\"创建通道\",\"t\":[\"可以使用 make 函数创建通道：\",\"ch := make(chan int)\"]},\"499\":{\"h\":\"发送和接收\",\"t\":[\"使用 <- 操作符可以发送和接收数据：\",\"// 发送数据到通道 ch <- 42 // 从通道接收数据 value := <-ch\"]},\"500\":{\"h\":\"带缓冲的通道\",\"t\":[\"创建带缓冲的通道：\",\"ch := make(chan int, 100)\",\"这样通道可以在不阻塞发送 Goroutine 的情况下缓冲一定数量的数据。\"]},\"501\":{\"h\":\"示例代码\",\"t\":[\"以下是一个简单的 Goroutine 和通道的示例：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func worker(ch chan int) { for i := 0; i < 5; i++ { ch <- i time.Sleep(time.Second) } close(ch) } func main() { ch := make(chan int) go worker(ch) for val := range ch { fmt.Println(val) } }\",\"在这个例子中，worker 函数向通道 ch 发送数据，然后 main 函数从通道 ch 接收数据并打印。\"]},\"502\":{\"h\":\"Goroutines 和主程序\",\"t\":[\"需要注意的是，如果主程序退出，所有未完成的 Goroutines 也会立即终止。因此，通常需要确保主程序等待所有 Goroutines 完成。例如，可以使用 sync.WaitGroup 来实现这一点：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) func worker(wg *sync.WaitGroup, id int) { defer wg.Done() fmt.Printf(\\\"Worker %d starting\\\\n\\\", id) // 模拟工作 time.Sleep(time.Second) fmt.Printf(\\\"Worker %d done\\\\n\\\", id) } func main() { var wg sync.WaitGroup for i := 1; i <= 5; i++ { wg.Add(1) go worker(&wg, i) } wg.Wait() fmt.Println(\\\"All workers done\\\") }\",\"这个示例使用 sync.WaitGroup 来等待所有的 Goroutines 完成。wg.Add(1) 用于增加计数，wg.Done() 在 Goroutine 完成时减少计数，wg.Wait() 则阻塞直到所有的 Goroutines 完成。\"]},\"503\":{\"h\":\"协程、线程、进程\",\"t\":[\"协程、线程和进程是并发和并行编程中的三种主要概念。它们有不同的特性和适用场景，以下是它们的主要区别：\"]},\"504\":{\"h\":\"进程 (Process)\",\"t\":[\"定义：\",\"进程是操作系统中资源分配的基本单位。\",\"每个进程都有自己的内存空间、文件描述符和其他资源。\",\"特点：\",\"隔离性：进程之间是相互独立的，一个进程的崩溃不会影响其他进程。\",\"开销大：进程之间切换的开销较大，需要保存和恢复大量上下文信息。\",\"通信复杂：进程间通信（IPC，如管道、消息队列、共享内存等）相对复杂。\",\"适用场景：\",\"适用于需要高度隔离和独立运行的任务。\",\"适用于不同编程语言和不同平台之间的并发处理。\"]},\"505\":{\"h\":\"线程 (Thread)\",\"t\":[\"定义：\",\"线程是进程中的一个执行单元，属于进程的一部分。\",\"同一进程中的线程共享该进程的内存和其他资源。\",\"特点：\",\"轻量级：相比进程，线程的创建和切换开销较小。\",\"共享资源：同一进程内的线程可以直接访问共享的内存和资源，但也因此带来了同步问题。\",\"并发执行：多个线程可以在多核 CPU 上并发执行。\",\"适用场景：\",\"适用于需要并行处理的任务，如多线程服务器、并行计算等。\",\"适用于需要频繁切换和低开销的场景。\"]},\"506\":{\"h\":\"协程 (Coroutine)\",\"t\":[\"定义：\",\"协程是一种用户态的轻量级线程，也称为微线程或纤程。\",\"协程由程序自身管理调度，而不是操作系统。\",\"特点：\",\"更轻量级：协程的创建和切换开销更小，因为不涉及内核态的切换。\",\"协作式调度：协程通过显式的让出操作（如 yield）来切换，控制权由程序员掌握。\",\"共享内存：同一线程内的协程可以共享内存，但需要注意同步问题。\",\"适用场景：\",\"适用于 I/O 密集型任务，如高并发网络服务器。\",\"适用于需要大量并发但对并行性要求不高的场景，如爬虫、异步编程等。\"]},\"507\":{\"h\":\"总结\",\"t\":[\"进程：资源隔离好，开销大，适用于独立运行的任务。\",\"线程：资源共享，开销较小，适用于需要并行处理的任务。\",\"协程：更轻量级，用户态调度，适用于大量并发的 I/O 密集型任务。\",\"各自的选择主要取决于具体的应用场景和性能需求。协程在现代编程中越来越受欢迎，尤其是在需要高并发和高效 I/O 操作的场景中。\"]},\"508\":{\"h\":\"8. 内存模型\",\"t\":[\"在并发编程中，内存模型描述了程序中线程或 Goroutine 如何与内存进行交互。了解内存模型对编写并发安全的程序至关重要。Go 语言的内存模型定义了对共享变量的访问顺序规则，确保在并发环境下的程序行为是可预测的。\"]},\"509\":{\"h\":\"Go 内存模型概述\",\"t\":[\"Go 的内存模型主要通过以下规则来保证内存操作的可见性和一致性：\",\"程序顺序规则：在单个 Goroutine 中，内存操作按程序顺序执行。\",\"传递性规则：如果操作 A 在操作 B 之前，且操作 B 在操作 C 之前，那么操作 A 必须在操作 C 之前。\",\"同步操作规则：通过 sync/atomic 包的原子操作和 sync 包的同步原语（如互斥锁、通道）来定义内存操作之间的同步关系。\"]},\"510\":{\"h\":\"关键概念\"},\"511\":{\"h\":\"Happens-Before\",\"t\":[\"\\\"Happens-Before\\\" 是一个关键概念，用于描述操作之间的内存顺序关系。如果一个操作 \\\"happens-before\\\" 另一个操作，那么第一个操作的结果对于第二个操作是可见的。\"]},\"512\":{\"h\":\"内存屏障\",\"t\":[\"内存屏障是一种 CPU 指令，用于控制内存操作的顺序。Go 编译器和运行时会在适当的位置插入内存屏障，以确保程序符合内存模型的要求。\"]},\"513\":{\"h\":\"同步原语\",\"t\":[\"Go 提供了多种同步原语来确保内存操作的顺序性和可见性：\"]},\"514\":{\"h\":\"互斥锁（Mutex）\",\"t\":[\"互斥锁确保在同一时间只有一个 Goroutine 可以访问共享资源。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var ( mu sync.Mutex count int ) func increment() { mu.Lock() count++ mu.Unlock() } func main() { var wg sync.WaitGroup for i := 0; i < 10; i++ { wg.Add(1) go func() { defer wg.Done() increment() }() } wg.Wait() fmt.Println(\\\"Final count:\\\", count) }\"]},\"515\":{\"h\":\"读写锁（RWMutex）\",\"t\":[\"读写锁允许多个 Goroutine 同时读取，但写操作是互斥的。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var ( mu sync.RWMutex count int ) func read() int { mu.RLock() defer mu.RUnlock() return count } func write() { mu.Lock() count++ mu.Unlock() } func main() { var wg sync.WaitGroup for i := 0; i < 10; i++ { wg.Add(1) go func() { defer wg.Done() write() }() } for i := 0; i < 10; i++ { wg.Add(1) go func() { defer wg.Done() fmt.Println(read()) }() } wg.Wait() fmt.Println(\\\"Final count:\\\", count) }\"]},\"516\":{\"h\":\"原子操作\",\"t\":[\"原子操作确保对基本数据类型的操作是不可分割的，无需加锁即可实现并发安全。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" \\\"sync/atomic\\\" ) var count int32 func increment() { atomic.AddInt32(&count, 1) } func main() { var wg sync.WaitGroup for i := 0; i < 10; i++ { wg.Add(1) go func() { defer wg.Done() increment() }() } wg.Wait() fmt.Println(\\\"Final count:\\\", count) }\"]},\"517\":{\"h\":\"通道（Channels）\",\"t\":[\"通道是 Go 特有的用于 Goroutine 间安全通信的机制，隐式地提供同步和内存可见性保证。\",\"package main import ( \\\"fmt\\\" ) func worker(done chan bool) { fmt.Println(\\\"Working...\\\") done <- true } func main() { done := make(chan bool) go worker(done) <-done fmt.Println(\\\"Work done\\\") }\"]},\"518\":{\"h\":\"内存模型规则\",\"t\":[\"程序顺序规则：单个 Goroutine 中的操作按程序顺序执行。\",\"解锁-加锁规则：对一个互斥锁的解锁操作 happens-before 该互斥锁的后续加锁操作。\",\"通道传递规则：向无缓冲通道发送一个值 happens-before 从该通道接收到这个值。\",\"闭包外规则：Go 程序中对 Goroutine 的启动 happens-before 这个 Goroutine 中的操作开始。\",\"示例分析\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var ( mu sync.Mutex value int ) func writer(wg *sync.WaitGroup) { defer wg.Done() mu.Lock() value = 42 mu.Unlock() } func reader(wg *sync.WaitGroup) { defer wg.Done() mu.Lock() defer mu.Unlock() fmt.Println(value) } func main() { var wg sync.WaitGroup wg.Add(2) go writer(&wg) go reader(&wg) wg.Wait() }\",\"在这个示例中，writer Goroutine 中的 mu.Unlock() happens-before reader Goroutine 中的 mu.Lock()，因此 reader 会看到 value 被设置为 42。\"]},\"519\":{\"h\":\"总结\",\"t\":[\"理解 Go 的内存模型是编写并发安全程序的基础。通过使用同步原语如互斥锁、读写锁、原子操作和通道，可以确保 Goroutine 之间的内存操作是可预测和一致的。明确 \\\"happens-before\\\" 关系和遵循内存模型规则有助于避免竞态条件和其他并发问题。\"]},\"520\":{\"h\":\"并发编程\"},\"521\":{\"h\":\"3. Select 语句\",\"t\":[\"在 Go 语言中，select 语句是一种控制结构，允许一个 Goroutine 同时等待多个通道操作。select 语句会阻塞，直到其中的一个 case 可以继续执行，然后执行该 case 中的语句。select 语句是处理并发任务时非常有用的工具，特别是需要处理多个通道的通信时。\"]},\"522\":{\"h\":\"语句的基本用法\",\"t\":[\"select { case val1 := <-ch1: // 当从 ch1 接收到数据时执行 case ch2 <- val2: // 当向 ch2 发送数据时执行 case <-time.After(time.Second): // 如果一秒内没有任何通道操作成功，则执行此 case default: // 如果没有任何通道操作成功，立即执行此 case }\"]},\"523\":{\"h\":\"示例代码\",\"t\":[\"下面是一些使用 select 语句的示例，以展示其灵活性和强大之处。\"]},\"524\":{\"h\":\"示例 1：从多个通道接收数据\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ch1 := make(chan int) ch2 := make(chan int) go func() { time.Sleep(time.Second) ch1 <- 1 }() go func() { time.Sleep(2 * time.Second) ch2 <- 2 }() for i := 0; i < 2; i++ { select { case msg1 := <-ch1: fmt.Println(\\\"Received\\\", msg1) case msg2 := <-ch2: fmt.Println(\\\"Received\\\", msg2) } } }\",\"这个示例中，两个 Goroutine 分别在不同的时间向 ch1 和 ch2 发送数据，select 语句能够处理哪个通道先接收到数据。\"]},\"525\":{\"h\":\"示例 2：实现超时机制\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ch := make(chan int) go func() { time.Sleep(2 * time.Second) ch <- 42 }() select { case msg := <-ch: fmt.Println(\\\"Received:\\\", msg) case <-time.After(1 * time.Second): fmt.Println(\\\"Timeout\\\") } }\",\"在这个示例中，select 语句中包含了一个超时机制，如果一秒内没有接收到数据，则会执行超时的 case。\"]},\"526\":{\"h\":\"示例 3：非阻塞的通道操作\",\"t\":[\"package main import \\\"fmt\\\" func main() { ch := make(chan int) select { case msg := <-ch: fmt.Println(\\\"Received:\\\", msg) default: fmt.Println(\\\"No data received\\\") } }\",\"在这个示例中，select 语句的 default 分支使得通道操作变得非阻塞，如果没有数据接收，则会立即执行 default 分支。\"]},\"527\":{\"h\":\"语句的注意事项\",\"t\":[\"随机选择：如果有多个 case 都可以执行，select 会随机选择一个执行。\",\"避免阻塞：使用 default 分支可以避免 select 语句阻塞。\",\"通道关闭：如果一个通道关闭且仍有数据在缓冲区中，select 语句可以正常接收到数据，但之后会立即返回零值。\"]},\"528\":{\"h\":\"高级用法\",\"t\":[\"你可以通过将多个通道操作组合在一起，使用 select 语句构建复杂的并发逻辑。例如，可以实现优先级通道、动态增加或减少通道的数量等。\",\"通过灵活运用 select 语句，Go 程序员能够高效地处理并发任务，使得代码更加简洁和易于维护。\"]},\"529\":{\"h\":\"4. 同步原语\",\"t\":[\"控制原语（Control Primitives）是并发编程中用于管理和协调多个线程或协程的基本构建块。它们帮助程序确保资源的正确使用和状态的一致性。以下是一些常见的控制原语：\"]},\"530\":{\"h\":\"1. 锁（Locks）\",\"t\":[\"锁用于确保在任何时刻，只有一个线程可以访问某个资源，从而避免数据竞争和不一致性。常见的锁类型有：\",\"互斥锁（Mutex）：用于保护临界区，确保一次只有一个线程执行。\",\"读写锁（RWMutex）：允许多个线程同时读取资源，但在写入时独占资源。\",\"Go 语言中的互斥锁和读写锁使用示例：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var ( mu sync.Mutex // 互斥锁，用于保护共享资源 count int // 共享资源 ) // increment 函数使用互斥锁来确保对共享资源的安全访问 func increment() { mu.Lock() // 加锁，进入临界区 defer mu.Unlock() // 函数结束时解锁 count++ // 修改共享资源 } func main() { var wg sync.WaitGroup // WaitGroup 用于等待所有 Goroutine 完成 // 启动 1000 个 Goroutine，每个 Goroutine 调用 increment 函数 for i := 0; i < 1000; i++ { wg.Add(1) // 增加 WaitGroup 计数 go func() { defer wg.Done() // 函数结束时减少 WaitGroup 计数 increment() }() } wg.Wait() // 等待所有 Goroutine 完成 fmt.Println(\\\"Final count:\\\", count) // 打印最终结果 }\"]},\"531\":{\"h\":\"2. 条件变量（Condition Variables）\",\"t\":[\"条件变量用于阻塞线程，直到某个特定条件为真。它们通常与互斥锁结合使用，用于实现更复杂的同步场景。\",\"Go 语言中使用条件变量：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) var ( mu sync.Mutex // 互斥锁，用于保护共享资源 cond = sync.NewCond(&mu) // 条件变量 ready = false // 条件变量的条件 ) // waitCondition 函数等待条件变量满足条件 func waitCondition() { mu.Lock() // 加锁，进入临界区 for !ready { cond.Wait() // 等待条件变量满足条件 } fmt.Println(\\\"Condition met, proceeding\\\") mu.Unlock() // 解锁，离开临界区 } // signalCondition 函数设置条件变量，并通知等待的 Goroutine func signalCondition() { mu.Lock() // 加锁，进入临界区 ready = true // 修改条件 cond.Signal() // 通知等待的 Goroutine mu.Unlock() // 解锁，离开临界区 } func main() { var wg sync.WaitGroup // WaitGroup 用于等待所有 Goroutine 完成 wg.Add(1) go func() { defer wg.Done() waitCondition() }() signalCondition() wg.Wait() }\"]},\"532\":{\"h\":\"3. 信号量（Semaphores）\",\"t\":[\"信号量是一个计数器，用于限制对资源的访问次数。它可以控制同时访问某个资源的线程数。\",\"Go 语言中没有直接的信号量实现，可以使用带缓冲的通道来模拟：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) // worker 函数模拟工作，通过信号量控制并发数 func worker(sem chan struct{}, id int) { sem <- struct{}{} // 获取信号量，进入临界区 fmt.Printf(\\\"Worker %d is working\\\\n\\\", id) time.Sleep(time.Second) // 模拟工作 fmt.Printf(\\\"Worker %d is done\\\\n\\\", id) <-sem // 释放信号量，离开临界区 } func main() { const maxWorkers = 3 // 最大并发数 sem := make(chan struct{}, maxWorkers) // 带缓冲通道作为信号量 // 启动 10 个 Goroutine，每个 Goroutine 调用 worker 函数 for i := 0; i < 10; i++ { go worker(sem, i) } time.Sleep(5 * time.Second) // 等待所有 worker 完成 }\"]},\"533\":{\"h\":\"4. 事件（Events）\",\"t\":[\"事件用于通知线程某个条件已经发生，可以继续执行。通常在等待某个操作完成时使用。\",\"Go 语言中可以使用通道来实现事件机制：\",\"package main import \\\"fmt\\\" // worker 函数完成后通过通道通知 main 函数 func worker(done chan bool) { fmt.Println(\\\"Worker is working\\\") done <- true // 发送完成信号 } func main() { done := make(chan bool) // 创建通道 go worker(done) // 启动 worker Goroutine <-done // 等待 worker 完成 fmt.Println(\\\"Worker is done\\\") }\"]},\"534\":{\"h\":\"5. 栅栏（Barriers）\",\"t\":[\"栅栏用于使一组线程在某个点上同步，只有当所有线程都到达这个点时，它们才会继续执行。\",\"Go 语言中没有直接的栅栏实现，但可以通过 sync.WaitGroup 模拟：\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) // worker 函数模拟工作 func worker(id int, wg *sync.WaitGroup) { defer wg.Done() // 函数结束时减少 WaitGroup 计数 fmt.Printf(\\\"Worker %d is working\\\\n\\\", id) } func main() { var wg sync.WaitGroup // WaitGroup 用于等待所有 Goroutine 完成 numWorkers := 5 // 启动 numWorkers 个 Goroutine，每个 Goroutine 调用 worker 函数 for i := 0; i < numWorkers; i++ { wg.Add(1) // 增加 WaitGroup 计数 go worker(i, &wg) } wg.Wait() // 等待所有 Goroutine 完成 fmt.Println(\\\"All workers are done\\\") }\"]},\"535\":{\"h\":\"6. 原子操作（Atomic Operations）\",\"t\":[\"原子操作是不可分割的操作，用于确保在多线程环境下变量的操作是安全的。\",\"Go 语言中的原子操作：\",\"package main import ( \\\"fmt\\\" \\\"sync/atomic\\\" ) func main() { var count int32 = 0 // 使用 int32 类型的计数器 // 启动 1000 个 Goroutine，每个 Goroutine 执行原子加操作 for i := 0; i < 1000; i++ { go func() { atomic.AddInt32(&count, 1) // 原子加操作 }() } // 在实际使用中，可以使用 sync.WaitGroup 等待所有 Goroutine 完成 // 这里为了简单，直接打印结果 fmt.Println(\\\"Final count:\\\", atomic.LoadInt32(&count)) // 读取计数器值 }\",\"控制原语是并发编程的基础，通过合理使用这些原语，可以有效地管理并发程序的复杂性，确保数据一致性和程序的正确性。\"]},\"536\":{\"h\":\"网络编程\"},\"537\":{\"h\":\"1. Gin 简介与环境搭建\"},\"538\":{\"h\":\"1. 什么是Gin框架？\",\"t\":[\"Gin是一个用Go语言编写的轻量级、高性能的Web框架。它具有以下特点：\",\"速度快：Gin的性能非常出色，适合高并发场景。\",\"API友好：Gin提供了简洁的API，易于使用。\",\"中间件支持：Gin支持中间件机制，方便扩展功能。\",\"错误处理：内置错误处理机制，简化了开发工作。\"]},\"539\":{\"h\":\"2. 安装Gin框架\",\"t\":[\"在开始使用Gin之前，你需要安装Go语言环境。如果你还没有安装Go，可以在Go官网下载并安装最新版本。\",\"安装好Go后，可以使用以下命令安装Gin：\",\"go get -u github.com/gin-gonic/gin\",\"这条命令会从GitHub上下载Gin框架，并将其添加到你的Go工作区中。\"]},\"540\":{\"h\":\"3. 创建第一个Gin项目\",\"t\":[\"现在我们可以创建一个简单的Gin项目。我们将编写一个Hello World应用来演示Gin的基本用法。\",\"步骤1：创建项目目录\",\"首先，创建一个新的目录用于存放我们的项目代码：\",\"mkdir gin-hello-world cd gin-hello-world\",\"步骤2：创建Go模块\",\"在项目目录中，初始化一个新的Go模块：\",\"go mod init gin-hello-world\",\"这将创建一个go.mod文件，用于管理项目的依赖关系。\",\"步骤3：编写代码\",\"在项目目录中，创建一个名为main.go的文件，并在其中编写以下代码：\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" ) func main() { // 创建一个默认的Gin路由器 r := gin.Default() // 定义一个GET请求的路由和处理函数 r.GET(\\\"/hello\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"Hello, World!\\\", }) }) // 启动Gin服务器，默认监听8080端口 r.Run() // 监听并在0.0.0.0:8080上启动服务 }\",\"步骤4：运行代码\",\"在项目目录中，运行以下命令来启动应用：\",\"go run main.go\",\"你应该会看到输出如下：\",\"[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] GET /hello --> main.main.func1 (3 handlers) [GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value to Config.TrustedProxies. [GIN-debug] [WARNING] Running in \\\"debug\\\" mode. Switch to \\\"release\\\" mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] Listening and serving HTTP on :8080\",\"打开浏览器，访问http://localhost:8080/hello，你应该会看到以下JSON响应：\",\"{ \\\"message\\\": \\\"Hello, World!\\\" }\"]},\"541\":{\"h\":\"总结\",\"t\":[\"到这里，你已经成功地安装了 Gin 框架，并创建了一个简单的 Hello World 应用。你学到了如何创建一个Gin路由器，定义一个路由和处理函数，以及如何启动 Gin 服务器。接下来，可以深入学习Gin的更多功能，例如路由参数、中间件、请求处理和响应处理等。\"]},\"542\":{\"h\":\"5. 中间件\",\"t\":[\"中间件是 Gin 框架中非常重要的部分。中间件是处理请求的函数，可以在请求到达路由处理函数之前或在响应发送给客户端之前执行一些操作。中间件可以用于各种用途，如验证用户身份、记录日志、处理跨域请求等。\",\"Gin 框架允许你全局应用中间件、对特定路由应用中间件或对路由组应用中间件。\"]},\"543\":{\"h\":\"1. 自定义中间件\",\"t\":[\"编写自定义中间件的基本形式是一个返回 gin.HandlerFunc 的函数。中间件函数接受一个 *gin.Context 参数。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" \\\"github.com/gin-gonic/gin\\\" ) // Logger 中间件示例 func Logger() gin.HandlerFunc { return func(c *gin.Context) { // 开始时间 startTime := time.Now() // 处理请求 c.Next() // 计算响应时间 endTime := time.Now() latency := endTime.Sub(startTime) fmt.Printf(\\\"Request processed in %v\\\\n\\\", latency) } } func main() { r := gin.Default() // 全局应用 Logger 中间件 r.Use(Logger()) r.GET(\\\"/ping\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"pong\\\", }) }) r.Run(\\\":8080\\\") }\"]},\"544\":{\"h\":\"2. 路由组中应用中间件\",\"t\":[\"Gin 允许你对特定的路由组应用中间件，这样可以将中间件的作用范围限定在特定的路由组内。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) // AuthRequired 中间件示例 func AuthRequired() gin.HandlerFunc { return func(c *gin.Context) { // 模拟身份验证 token := c.GetHeader(\\\"Authorization\\\") if token != \\\"valid-token\\\" { c.JSON(http.StatusUnauthorized, gin.H{\\\"error\\\": \\\"unauthorized\\\"}) c.Abort() return } c.Next() } } func main() { r := gin.Default() // 路由组 auth := r.Group(\\\"/auth\\\") { // 路由组中应用 AuthRequired 中间件 auth.Use(AuthRequired()) auth.GET(\\\"/profile\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"user\\\": \\\"john\\\", \\\"role\\\": \\\"admin\\\", }) }) auth.GET(\\\"/settings\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"settings\\\": \\\"user settings\\\", }) }) } r.Run(\\\":8080\\\") }\",\"在这个示例中，/auth 路由组中的所有路由都会应用 AuthRequired 中间件。\"]},\"545\":{\"h\":\"3. 处理跨域请求（CORS）\",\"t\":[\"处理跨域请求是中间件的一个常见用途。可以使用第三方库（如 github.com/gin-contrib/cors）来简化 CORS 中间件的实现。\",\"package main import ( \\\"github.com/gin-contrib/cors\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 使用 cors.Default() 中间件处理跨域请求 r.Use(cors.Default()) r.GET(\\\"/ping\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"pong\\\", }) }) r.Run(\\\":8080\\\") }\"]},\"546\":{\"h\":\"总结\",\"t\":[\"学习 Gin 框架中的中间件是理解和使用 Gin 的关键。中间件可以用于：\",\"记录日志\",\"身份验证\",\"错误处理\",\"处理跨域请求\",\"通过掌握中间件的使用方法，可以大大提高 Gin 应用的可维护性和扩展性。\"]},\"547\":{\"h\":\"Gin 框架\"},\"548\":{\"h\":\"3. 请求参数\"},\"549\":{\"h\":\"Get 参数\",\"t\":[\"Get 请求的参数会显式的展示在 URL 中，通过 ？来和资源路径区分。\",\"例如 http://localhost:8080/search?page=1&keyword=golang 的 Get 请求传递了两个参数 page 和 keyword。\",\"Get 请求的参数不具有任何安全性，明文传输，且能传输的信息量较少，故一般用来传递一些非敏感信息。\"]},\"550\":{\"h\":\"1. 普通参数\",\"t\":[\"请求 URL ：http://localhost:8080/search?page=1&keyword=golang\",\"参数获取：\",\"r.GET(\\\"/search\\\", func(ctx *gin.Context) { page := ctx.Query(\\\"page\\\") keyword := ctx.Query(\\\"keyword\\\") ctx.JSON(200, gin.H{ \\\"page\\\": page, \\\"keyword\\\": keyword, }) })\",\"除直接获取以外，Gin 还提供了一些常见的 API\",\"Query : 直接获取，不存在则返回 \\\"\\\" 空字符串。\",\"DefaultQuery : 默认值回去，不存在则返回指定的默认值。\",\"GetQuery : 获取并判断参数是否存在，两个返回值，如果不存在则返回 \\\"\\\" 和 err。\",\"API 源码\",\"// Query returns the keyed url query value if it exists, // otherwise it returns an empty string `(\\\"\\\")`. // It is shortcut for `c.Request.URL.Query().Get(key)` // // GET /path?id=1234&name=Manu&value= // c.Query(\\\"id\\\") == \\\"1234\\\" // c.Query(\\\"name\\\") == \\\"Manu\\\" // c.Query(\\\"value\\\") == \\\"\\\" // c.Query(\\\"wtf\\\") == \\\"\\\" func (c *Context) Query(key string) (value string) { value, _ = c.GetQuery(key) return } // DefaultQuery returns the keyed url query value if it exists, // otherwise it returns the specified defaultValue string. // See: Query() and GetQuery() for further information. // // GET /?name=Manu&lastname= // c.DefaultQuery(\\\"name\\\", \\\"unknown\\\") == \\\"Manu\\\" // c.DefaultQuery(\\\"id\\\", \\\"none\\\") == \\\"none\\\" // c.DefaultQuery(\\\"lastname\\\", \\\"none\\\") == \\\"\\\" func (c *Context) DefaultQuery(key, defaultValue string) string { if value, ok := c.GetQuery(key); ok { return value } return defaultValue } // GetQuery is like Query(), it returns the keyed url query value // if it exists `(value, true)` (even when the value is an empty string), // otherwise it returns `(\\\"\\\", false)`. // It is shortcut for `c.Request.URL.Query().Get(key)` // // GET /?name=Manu&lastname= // (\\\"Manu\\\", true) == c.GetQuery(\\\"name\\\") // (\\\"\\\", false) == c.GetQuery(\\\"id\\\") // (\\\"\\\", true) == c.GetQuery(\\\"lastname\\\") func (c *Context) GetQuery(key string) (string, bool) { if values, ok := c.GetQueryArray(key); ok { return values[0], ok } return \\\"\\\", false }\"]},\"551\":{\"h\":\"2. 数组参数\",\"t\":[\"请求 URL ：http://localhost:8080/items?id=1&id=2&id=3\",\"参数获取：\",\"r.GET(\\\"/items\\\", func(c *gin.Context) { // 使用 QueryArray 方法获取数组参数 ids := c.QueryArray(\\\"id\\\") // 返回解析后的数组数据 c.JSON(http.StatusOK, gin.H{ \\\"ids\\\": ids, }) }) r.GET(\\\"/items\\\", func(c *gin.Context) { // 使用 QueryArray 方法获取数组参数 ids,ok := c.GetQueryArray(\\\"id\\\") // 检查参数是否存在 if !ok { // 返回解析后的数组数据 c.JSON(http.StatusOK, gin.H{ \\\"msg\\\": \\\"参数不存在！\\\", }) return } // 返回解析后的数组数据 c.JSON(http.StatusOK, gin.H{ \\\"ids\\\": ids, }) })\",\"获取数组，Gin 提供了两个直接 API，同时也可以使用后续结构体中的 Bind 方法。\",\"QueryArray : 直接获取，不存在则返回空字符串数组，实际上底层调用的是 GetQueryArray\",\"GetQueryArray : 获取并判断参数是否存在，两个返回值，如果不存在则返回空字符串数组 和 ok。\",\"API 源码\",\"// QueryArray returns a slice of strings for a given query key. // The length of the slice depends on the number of params with the given key. func (c *Context) QueryArray(key string) (values []string) { values, _ = c.GetQueryArray(key) return } // GetQueryArray returns a slice of strings for a given query key, plus // a boolean value whether at least one value exists for the given key. func (c *Context) GetQueryArray(key string) (values []string, ok bool) { c.initQueryCache() values, ok = c.queryCache[key] return }\"]},\"552\":{\"h\":\"3. Map 参数\",\"t\":[\"请求 URL ：http://localhost:8080/user/save?userMap[username]=GolangNotes&userMap[age]=18\",\"获取参数：\",\"r.GET(\\\"/user\\\", func(ctx *gin.Context) { // 使用 QueryMap 方法将嵌套查询参数解析为 map userMap := ctx.QueryMap(\\\"userMap\\\") ctx.JSON(http.StatusOK, userMap) }) r.GET(\\\"/user\\\", func(ctx *gin.Context) { // 使用 QueryMap 方法将嵌套查询参数解析为 map userMap := ctx.GetQueryMap(\\\"userMap\\\") ctx.JSON(http.StatusOK, userMap) })\",\"获取 Map，Gin 提供了两个直接 API，Bind 方法不能直接解析，只能先转换为结构体，再将结构体转换为 Map\",\"QueryMap : 直接获取指定前缀的所有查询参数并解析为 map，如果参数不存在，返回一个空 map。实际上底层调用的是 GetQueryMap\",\"GetQueryMap : 获取指定前缀的所有查询参数并解析为 map，同时返回一个布尔值，指示该前缀的查询参数是否存在。\",\"API 源码\",\"// QueryMap returns a map for a given query key. func (c *Context) QueryMap(key string) (dicts map[string]string) { dicts, _ = c.GetQueryMap(key) return } // GetQueryMap returns a map for a given query key, plus a boolean value // whether at least one value exists for the given key. func (c *Context) GetQueryMap(key string) (map[string]string, bool) { c.initQueryCache() return c.get(c.queryCache, key) }\"]},\"553\":{\"h\":\"4. 结构体参数\",\"t\":[\"当需要将客户端请求中携带的参数直接解析为指定的结构体时，需要使用第一中方法手动构建，但是手动构建效率差，故 Gin 提供了封装方法，可以使用 BindQuery 和 ShouldBindQuery。\",\"请求 URL ：http://localhost:8080/example?name=John&age=30\",\"参数获取：\",\"type QueryParams struct { Name string `form:\\\"name\\\" binding:\\\"required\\\"` Age int `form:\\\"age\\\" binding:\\\"required\\\"` } r.GET(\\\"/bindquery\\\", func(c *gin.Context) { var queryParams QueryParams if err := c.BindQuery(&queryParams); err != nil { // 在绑定失败时自动返回 HTTP 400 状态码和错误信息 return } c.JSON(http.StatusOK, queryParams) }) r.GET(\\\"/shouldbindquery\\\", func(c *gin.Context) { var queryParams QueryParams if err := c.ShouldBindQuery(&queryParams); err != nil { // 手动处理错误 c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } c.JSON(http.StatusOK, queryParams) })\",\"BindQuery 和 ShouldBindQuery 都用于绑定查询参数到结构体。但 BindQuery 方法在绑定失败后会自动返回 HTTP 400 状态码和错误信息，而 ShouldBindQuery 不会自动返回错误的响应，而是仅在程序中返回错误信息，开发者需要手动处理错误。\",\"这种方式也可以解析数组，定义一个数组的结构体即可\",\"// 定义接收查询参数的结构体 type ItemsRequest struct { IDs []string `form:\\\"id\\\"` } // 处理 GET 请求 r.GET(\\\"/items\\\", func(c *gin.Context) { var req ItemsRequest if err := c.BindQuery(&req); err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } // 返回解析后的数组数据 c.JSON(http.StatusOK, gin.H{ \\\"ids\\\": req.IDs, }) })\"]},\"554\":{\"h\":\"Post 参数\",\"t\":[\"在 Gin 框架中，处理 POST 请求的参数通常涉及解析请求体中的数据，这些数据可以是 JSON 格式、表单数据等。\"]},\"555\":{\"h\":\"1. JSON 数据\",\"t\":[\"如果客户端发送的是 JSON 格式的 POST 请求体，可以使用 BindJSON 方法将请求体中的 JSON 数据解析到一个结构体中。\",\"type User struct { Username string `json:\\\"username\\\"` Password string `json:\\\"password\\\"` } // 处理 POST 请求 r.POST(\\\"/user\\\", func(c *gin.Context) { var user User if err := c.BindJSON(&user); err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } // 处理接收到的用户数据 c.JSON(http.StatusOK, user) })\"]},\"556\":{\"h\":\"2. 表单数据\",\"t\":[\"如果客户端发送的是表单数据，可以使用 Bind 方法将其解析为结构体或使用 PostForm 方法直接获取单个表单字段的值。\",\"type FormData struct { Name string `form:\\\"name\\\"` Email string `form:\\\"email\\\"` Message string `form:\\\"message\\\"` } // 处理 POST 请求 r.POST(\\\"/form\\\", func(c *gin.Context) { var formData FormData if err := c.Bind(&formData); err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } // 处理接收到的表单数据 c.JSON(http.StatusOK, formData) })\"]},\"557\":{\"h\":\"路径参数\",\"t\":[\"在 Gin 框架中，路径参数用于在 URL 路径中传递参数，这些参数可以通过 Param 方法在处理函数中获取。路径参数通常用于 RESTful API 中，便于标识资源或传递动态数据。\",\"实际上这种方式也可以看做是 Get 请求参数的一种，是记录在 URL 资源部分中的参数，但是又和实际的参数有所区别。在路由章节也有提及。\",\"请求 URL ：http://localhost:8080/user/123\",\"// 定义带路径参数的路由 r.GET(\\\"/user/:id\\\", func(c *gin.Context) { // 获取路径参数 id := c.Param(\\\"id\\\") c.JSON(http.StatusOK, gin.H{\\\"userID\\\": id}) })\"]},\"558\":{\"h\":\"文件上传\",\"t\":[\"如果需要处理文件上传或其他类型的多部分表单数据，可以使用 FormFile 方法来获取文件，或者结合 MultipartForm 方法处理整个多部分表单请求。\"]},\"559\":{\"h\":\"单文件\",\"t\":[\"我们使用 c.FormFile(\\\"file\\\") 来获取上传的单个文件，并使用 c.SaveUploadedFile(file, destination) 将文件保存到指定目录。\",\"r.POST(\\\"/upload\\\", func(c *gin.Context) { file, err := c.FormFile(\\\"file\\\") if err != nil { c.JSON(400, gin.H{\\\"error\\\": \\\"No file is received\\\"}) return } c.SaveUploadedFile(file, \\\"./uploads/\\\"+file.Filename) c.JSON(200, gin.H{ \\\"message\\\": \\\"File uploaded successfully!\\\", \\\"filename\\\": file.Filename, }) })\"]},\"560\":{\"h\":\"多文件\",\"t\":[\"对于多文件上传，我们使用c.MultipartForm()来获取所有文件，并遍历保存。\",\"r.POST(\\\"/upload/multiple\\\", func(c *gin.Context) { form, _ := c.MultipartForm() files := form.File[\\\"files\\\"] for _, file := range files { c.SaveUploadedFile(file, \\\"./uploads/\\\"+file.Filename) } c.JSON(200, gin.H{ \\\"message\\\": fmt.Sprintf(\\\"%d files uploaded!\\\", len(files)), }) })\"]},\"561\":{\"h\":\"4. 响应\",\"t\":[\"在 Gin 框架中，处理 HTTP 响应有多种方法，可以返回 JSON、XML、HTML、纯文本等格式的数据。\"]},\"562\":{\"h\":\"JSON\",\"t\":[\"使用 c.JSON 方法可以返回 JSON 格式的响应数据。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.GET(\\\"/json\\\", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{ \\\"message\\\": \\\"Hello, JSON\\\", \\\"status\\\": 200, }) }) r.Run(\\\":8080\\\") }\"]},\"563\":{\"h\":\"XML\",\"t\":[\"使用 c.XML 方法可以返回 XML 格式的响应数据。\",\"示例代码\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.GET(\\\"/xml\\\", func(c *gin.Context) { c.XML(http.StatusOK, gin.H{ \\\"message\\\": \\\"Hello, XML\\\", \\\"status\\\": 200, }) }) r.Run(\\\":8080\\\") }\"]},\"564\":{\"h\":\"HTML\",\"t\":[\"使用 c.HTML 方法可以返回 HTML 格式的响应数据。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.LoadHTMLGlob(\\\"templates/*\\\") r.GET(\\\"/html\\\", func(c *gin.Context) { c.HTML(http.StatusOK, \\\"index.html\\\", gin.H{ \\\"title\\\": \\\"Hello, HTML\\\", }) }) r.Run(\\\":8080\\\") }\",\"html 模板\",\"<!DOCTYPE html> <html> <head> <title>{{ .title }}</title> </head> <body> <h1>{{ .title }}</h1> </body> </html>\"]},\"565\":{\"h\":\"纯文本\",\"t\":[\"使用 c.String 方法可以返回纯文本格式的响应数据。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.GET(\\\"/string\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"Hello, Plain Text\\\") }) r.Run(\\\":8080\\\") }\"]},\"566\":{\"h\":\"文件\",\"t\":[\"使用 c.File 方法可以返回文件。\",\"这里以我的个人头像为例，实际除了图片，还可以传递多种文件格式的文件。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.GET(\\\"/file\\\", func(c *gin.Context) { c.File(\\\"path/to/file.txt\\\") }) r.Run(\\\":8080\\\") }\"]},\"567\":{\"h\":\"自定义响应头\",\"t\":[\"可以使用 c.Header 方法设置自定义的响应头。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.GET(\\\"/header\\\", func(c *gin.Context) { c.Header(\\\"X-Custom-Header\\\", \\\"CustomValue\\\") c.JSON(http.StatusOK, gin.H{ \\\"message\\\": \\\"Custom Header Set\\\", }) }) r.Run(\\\":8080\\\") }\"]},\"568\":{\"h\":\"重定向\",\"t\":[\"重定向是一种将客户端请求引导到另一个 URL 的方法。这在处理 URL 重写、跨域请求或其他需要改变请求目标的情况下非常有用。Gin 提供了多种方法来实现 HTTP 重定向，包括临时重定向、永久重定向和重定向到内部路由。\"]},\"569\":{\"h\":\"1.临时重定向\",\"t\":[\"使用 c.Redirect 方法可以实现临时重定向。临时重定向使用 HTTP 状态码 302。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 定义一个路由，访问 \\\"/old\\\" 时将临时重定向到 \\\"/new\\\" r.GET(\\\"/old\\\", func(c *gin.Context) { c.Redirect(http.StatusFound, \\\"/new\\\") }) // 新的路由 r.GET(\\\"/new\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"This is the new route.\\\") }) r.Run(\\\":8080\\\") }\",\"当你访问 http://localhost:8080/old 时，服务器将返回一个 HTTP 302 重定向响应，客户端会被引导到 http://localhost:8080/new。\"]},\"570\":{\"h\":\"2.永久重定向\",\"t\":[\"使用 c.Redirect 方法并设置状态码为 301 可以实现永久重定向。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 定义一个路由，访问 \\\"/old-permanent\\\" 时将永久重定向到 \\\"/new-permanent\\\" r.GET(\\\"/old-permanent\\\", func(c *gin.Context) { c.Redirect(http.StatusMovedPermanently, \\\"/new-permanent\\\") }) // 新的路由 r.GET(\\\"/new-permanent\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"This is the new permanent route.\\\") }) r.Run(\\\":8080\\\") }\",\"当你访问 http://localhost:8080/old-permanent 时，服务器将返回一个 HTTP 301 重定向响应，客户端会被引导到 http://localhost:8080/new-permanent。\"]},\"571\":{\"h\":\"3.内部重定向\",\"t\":[\"Gin 还允许你在内部重定向到另一个路由处理函数。使用 c.Request.URL.Path 和 r.HandleContext 方法可以实现这种重定向。\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 定义一个路由，访问 \\\"/internal\\\" 时将重定向到 \\\"/target\\\" 路由处理函数 r.GET(\\\"/internal\\\", func(c *gin.Context) { c.Request.URL.Path = \\\"/target\\\" r.HandleContext(c) }) // 目标路由 r.GET(\\\"/target\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"This is the target route.\\\") }) r.Run(\\\":8080\\\") }\",\"当你访问 http://localhost:8080/internal 时，Gin 将内部重定向到 http://localhost:8080/target 路由的处理函数，而无需客户端感知到重定向。\"]},\"572\":{\"h\":\"响应类型列表\",\"t\":[\"实际上 Gin 不仅仅支持这几种格式，还支持其他格式，这里仅演示了常用的响应格式，其他可参考下述列表。\",\"Gin 框架提供了一些内置的方法来简化响应的生成，支持多种数据格式。以下是 Gin 框架内置的响应方法：\",\"JSON：返回 JSON 格式的数据。\",\"c.JSON(code int, obj interface{})\",\"XML：返回 XML 格式的数据。\",\"c.XML(code int, obj interface{})\",\"YAML：返回 YAML 格式的数据。\",\"c.YAML(code int, obj interface{})\",\"ProtoBuf：返回 Protocol Buffers 格式的数据。\",\"c.ProtoBuf(code int, obj interface{})\",\"String：返回纯文本字符串。\",\"c.String(code int, format string, values ...interface{})\",\"HTML：返回渲染后的 HTML 页面。\",\"c.HTML(code int, name string, obj interface{})\",\"File：发送文件到客户端。\",\"c.File(filepath string)\",\"FileAttachment：发送文件到客户端，并指定文件名。\",\"c.FileAttachment(filepath, filename string)\",\"FileFromFS：从指定的文件系统中发送文件到客户端。\",\"c.FileFromFS(filepath string, fs http.FileSystem)\",\"Data：发送原始二进制数据。\",\"c.Data(code int, contentType string, data []byte)\",\"Redirect：发送重定向响应。\",\"c.Redirect(code int, location string)\",\"IndentedJSON：返回缩进格式的 JSON 数据（便于阅读）。\",\"c.IndentedJSON(code int, obj interface{})\",\"SecureJSON：返回安全的 JSON 数据，防止 JSON 劫持。\",\"c.SecureJSON(code int, obj interface{})\",\"AsciJSON：返回 ASCII 格式的 JSON 数据。\",\"c.AsciiJSON(code int, obj interface{})\",\"JSONP：返回 JSONP 格式的数据，支持跨域请求。\",\"c.JSONP(code int, obj interface{})\",\"这些方法使得在 Gin 框架中生成各种格式的响应变得非常简单和直接。根据具体需求选择合适的方法来处理和返回响应数据。\"]},\"573\":{\"h\":\"2. 路由\"},\"574\":{\"h\":\"Restful API\",\"t\":[\"RESTful API 的规范建议我们使用特定的 HTTP 方法来对服务器上的资源进行操作。\",\"Get：获取信息\",\"Post：新增信息\",\"Delete：删除信息\",\"Put：更新信息\",\"Patch：更新部分信息\",\"如对 users 用户资源来操作时，get users 代表查询用户，post users 代表新增用户、put user 代表更新用户，delete user 代表删除用户，其他操作类似。\",\"// 获取指定用户 r.GET(\\\"/users/:id\\\", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{\\\"data\\\": users}) }) // 更新指定用户 r.PUT(\\\"/users/:id\\\", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{\\\"data\\\": users}) }) // 删除指定用户 r.DELETE(\\\"/users/:id\\\", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{\\\"data\\\": users}) }) // 添加用户 r.POST(\\\"/users\\\", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{\\\"data\\\": users}) })\"]},\"575\":{\"h\":\"基本路由\",\"t\":[\"在Gin框架中，路由是 Web 应用的核心部分，它将客户端请求映射到处理函数。下面我们将详细介绍如何定义基本路由、处理路径参数和查询参数，以及如何使用路由组（Router Group）来组织和管理路由。\",\"在实际的请求发送中，Gin 实际上已经帮我们封装好了大部分内容，需要我们去填的主要是路径和参数两部分内容\",\"静态url：静态 URL 是指不包含任何变量或通配符的 URL，直接匹配指定的路径。在 Gin 中，可以通过 GET、POST、PUT、DELETE 等方法定义静态 URL。\",\"r.GET(\\\"/hello\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"Hello, World!\\\") })\",\"路径参数：路径参数允许在 URL 中使用变量来表示动态的资源标识符或参数。在 Gin 中，路径参数使用 :param 语法来定义，并可以通过 Param 方法获取参数的值。\",\"// 路径参数 r.GET(\\\"/users/:id\\\", func(c *gin.Context) { id := c.Param(\\\"id\\\") c.String(http.StatusOK, \\\"User ID: %s\\\", id) })\",\"查询参数：查询参数是指在 URL 中以 ? 开头的部分，用于传递特定的参数给服务器。通常情况下，查询参数用于过滤、排序或传递额外的信息。在 Gin 中，可以通过 Query 方法来获取请求中的查询参数。\",\"// 定义查询参数路由 r.GET(\\\"/search\\\", func(c *gin.Context) { // 获取查询参数 query := c.Query(\\\"q\\\") // 获取单个查询参数 page := c.DefaultQuery(\\\"page\\\", \\\"1\\\") // 获取单个查询参数并设置默认值 // 返回查询参数信息 c.JSON(http.StatusOK, gin.H{ \\\"query\\\": query, \\\"page\\\": page, }) })\",\"访问 http://localhost:8080/search 会返回{ \\\"page\\\": \\\"1\\\", \\\"query\\\": \\\"\\\" }，\",\"而访问http://localhost:8080/search?q=golang会返回{ \\\"page\\\": \\\"1\\\", \\\"query\\\": \\\"golang\\\" }。\",\"模糊匹配：可以使用通配符来实现模糊匹配的路由，用于匹配某种模式下的路径。通配符在 Gin 中使用 * 符号来表示。\",\"// 使用 * 通配符匹配所有 /users/** 路径 r.GET(\\\"/users/*action\\\", func(c *gin.Context) { action := c.Param(\\\"action\\\") c.String(http.StatusOK, \\\"Matching /users/%s\\\", action) }) // 使用 Any 方法匹配所有 HTTP 方法和路径 r.Any(\\\"/\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"Hello, Gin!\\\") }) // 匹配所有的 URL r.Any(\\\"/*path\\\", func(c *gin.Context) { path := c.Param(\\\"path\\\") c.String(http.StatusOK, \\\"Path: %s\\\", path) })\",\"注意事项\",\"使用 * 通配符时，可以匹配任意长度的路径段，但不能跨越 / 分隔符。\",\"在路由定义中，通配符必须作为路径的最后一个元素，例如 /users/*action 是有效的，但 /users/*action/more 是无效的。\"]},\"576\":{\"h\":\"路由组（Router Group）\",\"t\":[\"路由组（Route Groups）是一种组织和管理路由的有效方式。通过路由组，可以将相关的路由归类到一个组中，共享相同的中间件或前缀，特别是在需要对一组路由应用相同的中间件时。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 定义一个路由组 v1 := r.Group(\\\"/v1\\\") { v1.GET(\\\"/users\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"List of users in v1\\\", }) }) v1.GET(\\\"/products\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"List of products in v1\\\", }) }) } // 定义另一个路由组 v2 := r.Group(\\\"/v2\\\") { v2.GET(\\\"/users\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"List of users in v2\\\", }) }) v2.GET(\\\"/products\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"List of products in v2\\\", }) }) } // 启动Gin服务器 r.Run() }\",\"在这个示例中：\",\"我们创建了两个路由组：/v1和/v2。\",\"每个路由组都有各自的路由，方便对不同版本的API进行管理。\",\"访问http://localhost:8080/v1/users会返回{\\\"message\\\": \\\"List of users in v1\\\"}\",\"而访问http://localhost:8080/v2/users会返回{\\\"message\\\": \\\"List of users in v2\\\"}\"]},\"577\":{\"h\":\"总结\",\"t\":[\"通过上述内容，我们学习了如何在 Gin 中定义基本路由、处理路径参数和查询参数，以及如何使用路由组来组织和管理路由。这些知识是使用 Gin 框架开发 Web 应用的基础。接下来，可以学习 Gin 的中间件、请求处理和响应处理等高级功能。\"]},\"578\":{\"h\":\"7. 会话\",\"t\":[\"在 HTTP 中，会话（Session）是一种在客户端和服务器之间跟踪状态的机制。HTTP 是一种无状态协议，每次请求都是独立的，服务器不会自动跟踪用户的状态。会话机制通过在客户端和服务器之间传递标识符来维护状态，使得服务器可以识别和跟踪同一个用户的多个请求。\"]},\"579\":{\"h\":\"HTTP 会话的基本工作原理\",\"t\":[\"会话标识符（Session Identifier）： 通常会话标识符是一个唯一的字符串，可以通过 Cookie 或 URL 参数发送到客户端。在后续的请求中，客户端会携带这个标识符，使得服务器可以识别用户。\",\"Cookie 机制： 最常见的实现方式是使用 Cookie 来存储会话标识符。服务器在响应中设置一个名为 sessionID 的 Cookie，客户端在后续的每个请求中都会携带这个 Cookie。服务器通过解析 Cookie 中的 sessionID 来识别用户。\",\"URL 重写（URL Rewriting）： 在某些情况下，会话标识符可以直接通过 URL 参数传递，而不是通过 Cookie。这种方式被称为 URL 重写，不太常见。\",\"会话管理： 服务器通常会维护一个会话管理器来处理会话的创建、销毁和状态跟踪。会话管理器将会话数据存储在服务器端，并根据需要进行检索和更新。\"]},\"580\":{\"h\":\"Gin 中的会话管理\",\"t\":[\"在 Gin 框架中，由于其设计初衷是作为轻量级的 Web 框架，不提供内置的会话管理功能。开发者通常需要使用第三方库来实现会话管理，比如：\",\"Session 模块： Gin 框架本身没有提供官方的会话管理模块，但可以集成第三方的 session 中间件来实现，如 github.com/gin-contrib/sessions。\",\"JWT（JSON Web Token）： 一种不同的身份验证机制，通过生成和验证签名的 Token 来实现状态管理。Gin 也支持 JWT 的集成，如 github.com/appleboy/gin-jwt/v2。\"]},\"581\":{\"h\":\"Cookie\"},\"582\":{\"h\":\"1. 什么是 Cookie？\",\"t\":[\"Cookie 是由服务器发送到客户端并存储在客户端的一小段数据。客户端（通常是浏览器）会在后续请求中将 Cookie 发送回服务器，从而实现状态维持。\"]},\"583\":{\"h\":\"2. Cookie 的特性\",\"t\":[\"存储在客户端： Cookie 数据存储在客户端的浏览器中，每个 Cookie 的大小限制通常为 4KB。\",\"生命周期： Cookie 可以设置有效期。如果不设置有效期，浏览器关闭时 Cookie 就会被删除（称为会话 Cookie）。设置了有效期的 Cookie 会在指定时间后失效（称为持久性 Cookie）。\",\"访问控制： 通过设置 Cookie 的 HttpOnly 属性，可以防止 JavaScript 访问 Cookie，提高安全性。通过 Secure 属性，可以确保 Cookie 仅通过 HTTPS 传输。\",\"同源策略： Cookie 受同源策略限制，仅能被设置它的域名和路径访问。\"]},\"584\":{\"h\":\"3. 在 Gin 中使用 Cookie\",\"t\":[\"Gin 提供了方便的方法来操作 Cookie。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"net/http\\\" ) func main() { r := gin.Default() // 设置 Cookie r.GET(\\\"/set_cookie\\\", func(c *gin.Context) { c.SetCookie(\\\"username\\\", \\\"John\\\", 3600, \\\"/\\\", \\\"localhost\\\", false, true) c.String(http.StatusOK, \\\"Cookie set\\\") }) // 获取 Cookie r.GET(\\\"/get_cookie\\\", func(c *gin.Context) { username, err := c.Cookie(\\\"username\\\") if err != nil { c.String(http.StatusBadRequest, \\\"Cookie not found\\\") return } c.String(http.StatusOK, \\\"Cookie value: %s\\\", username) }) r.Run(\\\":8080\\\") }\"]},\"585\":{\"h\":\"Session\"},\"586\":{\"h\":\"1. 什么是 Session？\",\"t\":[\"Session 是一种服务器端的状态管理机制。服务器为每个会话创建一个唯一的会话标识符（Session ID），并将会话数据存储在服务器端。客户端通过 Cookie 或 URL 参数将 Session ID 发送回服务器，服务器通过 Session ID 识别和检索会话数据。\"]},\"587\":{\"h\":\"2. Session 的特性\",\"t\":[\"存储在服务器端： 会话数据存储在服务器上，安全性较高。\",\"生命周期： 会话数据的生命周期通常是短暂的，一旦会话结束或超时，数据就会被删除。\",\"依赖 Cookie： 通常会使用 Cookie 来存储 Session ID，但也可以通过 URL 参数传递。\",\"安全性： 由于数据存储在服务器端，避免了客户端篡改数据的风险。\"]},\"588\":{\"h\":\"3. 在 Gin 中使用 Session\",\"t\":[\"可以使用 github.com/gin-contrib/sessions 库来管理 Session。\",\"package main import ( \\\"github.com/gin-contrib/sessions\\\" \\\"github.com/gin-contrib/sessions/cookie\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 初始化 Session 存储（使用 Cookie 存储 Session ID） store := cookie.NewStore([]byte(\\\"secret\\\")) r.Use(sessions.Sessions(\\\"mysession\\\", store)) // 设置 Session 数据 r.GET(\\\"/set_session\\\", func(c *gin.Context) { session := sessions.Default(c) session.Set(\\\"username\\\", \\\"John\\\") session.Save() c.String(http.StatusOK, \\\"Session set\\\") }) // 获取 Session 数据 r.GET(\\\"/get_session\\\", func(c *gin.Context) { session := sessions.Default(c) username := session.Get(\\\"username\\\") if username == nil { c.String(http.StatusBadRequest, \\\"Session not found\\\") return } c.String(http.StatusOK, \\\"Session value: %s\\\", username) }) r.Run(\\\":8080\\\") }\"]},\"589\":{\"h\":\"Cookie 和 Session 的比较\",\"t\":[\"特性\",\"Cookie\",\"Session\",\"存储位置\",\"客户端（浏览器）\",\"服务器端\",\"安全性\",\"相对较低，数据易被篡改\",\"相对较高，数据存储在服务器\",\"数据容量\",\"小（通常不超过 4KB）\",\"大（由服务器存储空间决定）\",\"生命周期\",\"由设置的有效期决定，支持持久性存储\",\"通常是短暂的，会话结束或超时即删除\",\"依赖性\",\"无需依赖其他机制\",\"依赖 Cookie 或 URL 参数传递 Session ID\",\"访问方式\",\"客户端和服务器均可访问\",\"仅服务器可访问\",\"Cookie：适用于需要在客户端存储少量数据的场景，数据量小，安全性较低。\",\"Session：适用于需要在服务器端存储会话数据的场景，安全性较高，数据量大。\"]},\"590\":{\"h\":\"使用第三方库管理会话示例\",\"t\":[\"以下是一个使用 github.com/gin-contrib/sessions 实现会话管理的简单示例：\",\"package main import ( \\\"github.com/gin-contrib/sessions\\\" \\\"github.com/gin-contrib/sessions/cookie\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 初始化 session 中间件 store := cookie.NewStore([]byte(\\\"secret\\\")) r.Use(sessions.Sessions(\\\"mysession\\\", store)) // 设置一个 session 数据 r.GET(\\\"/setSession\\\", func(c *gin.Context) { session := sessions.Default(c) session.Set(\\\"user\\\", \\\"John\\\") session.Save() c.JSON(200, gin.H{\\\"message\\\": \\\"Session set\\\"}) }) // 获取 session 数据 r.GET(\\\"/getSession\\\", func(c *gin.Context) { session := sessions.Default(c) user := session.Get(\\\"user\\\") if user != nil { c.JSON(200, gin.H{\\\"user\\\": user}) } else { c.JSON(200, gin.H{\\\"message\\\": \\\"Session not found\\\"}) } }) r.Run(\\\":8080\\\") }\",\"在这个示例中，通过 github.com/gin-contrib/sessions 中间件创建了一个基于 Cookie 的会话存储。通过 session.Set 设置会话数据，并通过 session.Get 获取会话数据。\",\"HTTP 会话是一种在无状态的 HTTP 协议中跟踪用户状态的机制，通过标识符（通常是 Cookie）来实现。在 Gin 框架中，可以使用第三方库来实现会话管理，从而实现用户状态的跟踪和管理。\",\"Cookie 和 Session 都是用来在客户端和服务器之间维持会话状态的机制，但它们有不同的工作原理和用途。\",\"JSON Web Token（JWT）是一种用于在网络应用之间安全传递声明的开放标准（RFC 7519）。在 Web 应用中，JWT 被广泛用于认证授权，它具有自包含性、可扩展性和基于标准的特性。\"]},\"591\":{\"h\":\"使用 Gin 实现 JWT 会话控制示例\",\"t\":[\"在 Gin 中，可以使用第三方库 github.com/appleboy/gin-jwt/v2 来实现 JWT 的认证和会话控制。下面是一个简单的示例，演示如何在 Gin 应用中使用 JWT：\",\"如果还不了解 JWT 请参考：\",\"JWT 介绍\",\"JSON Web Token（JWT）是一种开放标准（RFC 7519），用于在网络应用间安全地传输声明。JWT 可以通过数字签名来验证数据的完整性，并且由于是基于 JSON 格式的，因此可以安全地在用户和服务器之间传递数据。\"]},\"592\":{\"h\":\"JWT 的结构\",\"t\":[\"一个 JWT 由三部分组成，通过点号 . 分隔，分别是：\",\"Header（头部）： 包含了 Token 的元数据和签名算法信息。\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" }\",\"Payload（载荷）： 包含了 Token 的声明（Claims），是 JWT 的主体信息，可以存放一些关键性的信息。\",\"{ \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true }\",\"Payload 中包含了一些预定义的标准声明（Registered Claims），例如 sub（subject）、iss（issuer）、exp（expiration time）等，同时也可以包含自定义的声明。\",\"Signature（签名）： 将 Header 和 Payload 使用一定的算法（例如 HMAC SHA256 或 RSA）进行签名生成的一段字符串，用于验证数据的完整性和身份。\"]},\"593\":{\"h\":\"JWT 的工作流程\",\"t\":[\"认证： 用户通过用户名和密码等方式向服务器发送认证请求。\",\"生成 JWT： 服务器验证用户身份成功后，生成一个 JWT 并返回给客户端。\",\"服务器使用私钥对 Header 和 Payload 进行签名生成 Signature。\",\"客户端收到 JWT 后可以在后续的请求中携带这个 Token。\",\"验证 JWT： 客户端将 JWT 放在 HTTP 请求的 Authorization Header 中发送到服务器。\",\"服务器使用相同的算法和密钥解密 JWT，验证其完整性和真实性。\",\"如果验证成功，服务器可以信任 JWT 中的声明信息。\"]},\"594\":{\"h\":\"JWT 的优势\",\"t\":[\"无状态性（Stateless）： JWT 本身包含了所有需要的信息，服务器不需要在本地存储会话信息，因此可以很好地支持分布式和扩展性。\",\"安全性： JWT 使用签名来保证数据的完整性和真实性，可以防止数据被篡改。\",\"跨域使用： 可以在不同域名和服务之间安全传递信息。\"]},\"595\":{\"h\":\"使用场景\",\"t\":[\"认证授权： 常用于身份验证，生成用户登录后的令牌，以及授权访问特定资源。\",\"信息交换： 作为安全的 JSON 数据传输格式，可以在客户端和服务端之间安全地传递信息。\"]},\"596\":{\"h\":\"总结\",\"t\":[\"JWT 是一种简单而强大的身份验证和信息交换机制，通过签名保证数据的安全性和完整性，适用于 Web 应用程序中的各种场景，如用户身份验证、API 访问控制等。\"]},\"597\":{\"h\":\"1. 安装依赖库\",\"t\":[\"首先，确保安装了 github.com/appleboy/gin-jwt/v2：\",\"go get github.com/appleboy/gin-jwt/v2\"]},\"598\":{\"h\":\"2. 示例代码\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"net/http\\\" \\\"time\\\" \\\"github.com/appleboy/gin-jwt/v2\\\" \\\"github.com/gin-gonic/gin\\\" ) var identityKey = \\\"id\\\" type User struct { UserName string `json:\\\"username\\\"` Password string `json:\\\"password\\\"` } // 假设的用户数据 var users = map[string]string{ \\\"user1\\\": \\\"password1\\\", \\\"user2\\\": \\\"password2\\\", } func main() { r := gin.Default() // JWT 中间件 authMiddleware, err := jwt.New(&jwt.GinJWTMiddleware{ Realm: \\\"test zone\\\", Key: []byte(\\\"secret key\\\"), Timeout: time.Hour, MaxRefresh: time.Hour, IdentityKey: identityKey, PayloadFunc: func(data interface{}) jwt.MapClaims { if v, ok := data.(*User); ok { return jwt.MapClaims{ identityKey: v.UserName, } } return jwt.MapClaims{} }, Authenticator: func(c *gin.Context) (interface{}, error) { var user User if err := c.ShouldBind(&user); err != nil { return \\\"\\\", jwt.ErrMissingLoginValues } if pwd, ok := users[user.UserName]; ok && pwd == user.Password { return &User{ UserName: user.UserName, Password: user.Password, }, nil } return nil, jwt.ErrFailedAuthentication }, Unauthorized: func(c *gin.Context, code int, message string) { c.JSON(code, gin.H{ \\\"code\\\": code, \\\"message\\\": message, }) }, TokenLookup: \\\"header: Authorization\\\", TokenHeadName: \\\"Bearer\\\", TimeFunc: time.Now, }) if err != nil { fmt.Println(\\\"JWT Error:\\\" + err.Error()) } // 用户登录 r.POST(\\\"/login\\\", authMiddleware.LoginHandler) // 使用 JWT 进行保护的路由示例 auth := r.Group(\\\"/auth\\\") auth.Use(authMiddleware.MiddlewareFunc()) { auth.GET(\\\"/refresh_token\\\", authMiddleware.RefreshHandler) auth.GET(\\\"/ping\\\", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{\\\"message\\\": \\\"pong\\\"}) }) } r.Run(\\\":8080\\\") }\"]},\"599\":{\"h\":\"3. 示例说明\",\"t\":[\"认证函数 Authenticator： 在这个函数中，进行用户身份验证。根据用户名和密码从预定义的 users map 中验证用户。\",\"JWT 中间件配置 jwt.GinJWTMiddleware：\",\"Key：用于签署和验证 JWT 的密钥。\",\"Timeout 和 MaxRefresh：Token 的过期时间和最大刷新时间。\",\"IdentityKey：用于标识用户身份的键名。\",\"PayloadFunc：用于生成 JWT 载荷的函数，这里将用户名作为 JWT 载荷的一部分。\",\"登录路由 /login： 用户提交用户名和密码进行登录，成功则返回带有 JWT 的 JSON 响应。\",\"保护的路由组 /auth： 使用 authMiddleware.MiddlewareFunc() 中间件保护的路由组，需要在请求中包含有效的 JWT。\",\"Token 刷新 /auth/refresh_token： 用于刷新 JWT 的路由。\"]},\"600\":{\"h\":\"4. 使用示例\",\"t\":[\"使用 POST 请求提交用户名和密码到 /login 路由获取 JWT Token。\",\"使用获取的 Token 访问受保护的 /auth/ping 路由。\"]},\"601\":{\"h\":\"6. 模板渲染\",\"t\":[\"模板渲染是将动态数据嵌入到 HTML 模板中，使得服务器可以动态生成并返回 HTML 内容给客户端。在 Gin 框架中，可以通过加载 HTML 模板文件并将数据传递给模板来实现渲染。\",\"其实在响应这一章节就已经展示了模板渲染的案例，这里对其进行详细说明。\"]},\"602\":{\"h\":\"1. 加载模板文件\",\"t\":[\"首先，需要加载存放 HTML 模板文件的目录。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 加载 HTML 模板文件，templates 目录下的所有 .html 文件 r.LoadHTMLGlob(\\\"templates/*\\\") // 或者加载单个 HTML 模板文件 // r.LoadHTMLFiles(\\\"templates/index.html\\\") r.Run(\\\":8080\\\") }\"]},\"603\":{\"h\":\"2. 定义路由和处理函数\",\"t\":[\"定义一个路由，当用户访问该路由时，向客户端返回渲染后的 HTML 内容。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"net/http\\\" ) func main() { r := gin.Default() // 加载 HTML 模板文件 r.LoadHTMLGlob(\\\"templates/*\\\") // 定义路由，渲染 index.html 模板 r.GET(\\\"/index\\\", func(c *gin.Context) { // 渲染 HTML 模板，并传递数据 c.HTML(http.StatusOK, \\\"index.html\\\", gin.H{ \\\"title\\\": \\\"Home Page\\\", }) }) r.Run(\\\":8080\\\") }\"]},\"604\":{\"h\":\"3. 编写 HTML 模板文件\",\"t\":[\"在 templates 目录下创建一个 index.html 文件，编写模板内容。\",\"<!DOCTYPE html> <html> <head> <title>{{ .title }}</title> </head> <body> <h1>Welcome to {{ .title }}</h1> </body> </html>\"]},\"605\":{\"h\":\"4. 渲染模板并传递数据\",\"t\":[\"在处理函数中使用 c.HTML 方法渲染模板，并传递一个 gin.H 对象作为模板的数据上下文。在模板文件中，使用 {{ .变量名 }} 的方式来访问传递的数据。\"]},\"606\":{\"h\":\"注意事项\",\"t\":[\"模板路径问题： 确保 LoadHTMLGlob 或 LoadHTMLFiles 方法正确加载了模板文件的路径。\",\"数据传递： 使用 gin.H 传递数据时，模板中可以直接访问 gin.H 中定义的字段。\",\"模板语法： Gin 使用 Go 的 html/template 包作为模板引擎，默认支持 Go 模板的语法和特性。\",\"通过使用模板渲染，可以在 Gin 应用中动态生成 HTML 内容，将后端处理的数据有效地展示给用户。这对于构建动态网页和 web 应用是非常有帮助的。\"]},\"607\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"608\":{\"h\":\"Cloud Native\"}},\"dirtCount\":0,\"index\":[[\"渲染模板并传递数据\",{\"0\":{\"605\":1}}],[\"渲染\",{\"1\":{\"603\":2}}],[\"刷新\",{\"1\":{\"599\":1}}],[\"假设的用户数据\",{\"1\":{\"598\":1}}],[\"信息交换\",{\"1\":{\"595\":1}}],[\"信号量是一个计数器\",{\"1\":{\"532\":1}}],[\"信号量\",{\"0\":{\"532\":1}}],[\"放在\",{\"1\":{\"593\":1}}],[\"放在变量名前\",{\"1\":{\"433\":1,\"434\":1}}],[\"载荷的一部分\",{\"1\":{\"599\":1}}],[\"载荷的函数\",{\"1\":{\"599\":1}}],[\"载荷\",{\"1\":{\"592\":1}}],[\"头部\",{\"1\":{\"592\":1}}],[\"演示如何在\",{\"1\":{\"591\":1}}],[\"演示了如何使用\",{\"1\":{\"162\":1,\"164\":1}}],[\"浏览器\",{\"1\":{\"589\":1}}],[\"浏览器关闭时\",{\"1\":{\"583\":1}}],[\"库来管理\",{\"1\":{\"588\":1}}],[\"识别和检索会话数据\",{\"1\":{\"586\":1}}],[\"受同源策略限制\",{\"1\":{\"583\":1}}],[\"传输\",{\"1\":{\"583\":1}}],[\"传递数据时\",{\"1\":{\"606\":1}}],[\"传递性规则\",{\"1\":{\"509\":1}}],[\"传递上下文\",{\"0\":{\"488\":1}}],[\"传递给一个函数或赋值给另一个变量\",{\"1\":{\"421\":1}}],[\"传递给函数的是该指针的副本\",{\"1\":{\"363\":1}}],[\"传递指针时\",{\"1\":{\"396\":1}}],[\"传递的是切片结构的副本\",{\"1\":{\"366\":1}}],[\"传递的是数组的副本而不是引用\",{\"1\":{\"365\":1}}],[\"传递的是数组值的拷贝\",{\"1\":{\"358\":1}}],[\"传递的是这个切片的副本\",{\"1\":{\"363\":1}}],[\"属性\",{\"1\":{\"583\":2}}],[\"属于进程的一部分\",{\"1\":{\"505\":1}}],[\"称为持久性\",{\"1\":{\"583\":1}}],[\"称为会话\",{\"1\":{\"583\":1}}],[\"销毁和状态跟踪\",{\"1\":{\"579\":1}}],[\"机制\",{\"1\":{\"579\":1}}],[\"机器上\",{\"1\":{\"70\":1}}],[\"匹配所有的\",{\"1\":{\"575\":1}}],[\"静态\",{\"1\":{\"575\":1}}],[\"静态url\",{\"1\":{\"575\":1}}],[\"劫持\",{\"1\":{\"572\":1}}],[\"防止\",{\"1\":{\"572\":1}}],[\"页面\",{\"1\":{\"572\":1}}],[\"永久重定向\",{\"0\":{\"570\":1}}],[\"永久重定向和重定向到内部路由\",{\"1\":{\"568\":1}}],[\"新增信息\",{\"1\":{\"574\":1}}],[\"新的路由\",{\"1\":{\"569\":1,\"570\":1}}],[\"新建一个名为\",{\"1\":{\"59\":1}}],[\"状态码\",{\"1\":{\"569\":1}}],[\"状态码和错误信息\",{\"1\":{\"553\":2}}],[\"临时重定向使用\",{\"1\":{\"569\":1}}],[\"临时重定向\",{\"0\":{\"569\":1}}],[\"跨域使用\",{\"1\":{\"594\":1}}],[\"跨域请求或其他需要改变请求目标的情况下非常有用\",{\"1\":{\"568\":1}}],[\"跨平台\",{\"1\":{\"371\":1}}],[\"跨平台性\",{\"1\":{\"71\":1}}],[\"纯文本\",{\"0\":{\"565\":1}}],[\"纯文本等格式的数据\",{\"1\":{\"561\":1}}],[\"响应类型列表\",{\"0\":{\"572\":1}}],[\"响应有多种方法\",{\"1\":{\"561\":1}}],[\"响应\",{\"0\":{\"561\":1},\"1\":{\"599\":1}}],[\"单文件\",{\"0\":{\"559\":1}}],[\"单个\",{\"1\":{\"518\":1}}],[\"单个变量\",{\"1\":{\"457\":1}}],[\"便于阅读\",{\"1\":{\"572\":1}}],[\"便于标识资源或传递动态数据\",{\"1\":{\"557\":1}}],[\"便于管理\",{\"1\":{\"116\":1}}],[\"表单数据\",{\"0\":{\"556\":1}}],[\"表单数据等\",{\"1\":{\"554\":1}}],[\"表示还没有明确的上下文要使用\",{\"1\":{\"487\":1}}],[\"表示拥有\",{\"1\":{\"455\":1}}],[\"表示一个事件的发生\",{\"1\":{\"450\":1}}],[\"表示如果该字段的值为空\",{\"1\":{\"448\":1}}],[\"表示如果该字段为空\",{\"1\":{\"447\":1}}],[\"表示在进行\",{\"1\":{\"448\":2}}],[\"表示在序列化和反序列化时忽略该字段\",{\"1\":{\"447\":1}}],[\"表示取该变量的地址\",{\"1\":{\"434\":1}}],[\"表示这是一个指针类型的变量\",{\"1\":{\"433\":1}}],[\"表示任意类型\",{\"1\":{\"400\":1}}],[\"表示\",{\"1\":{\"90\":1,\"91\":1}}],[\"表示点赞\",{\"1\":{\"82\":1}}],[\"表示镜像的仓库源\",{\"1\":{\"81\":1}}],[\"表示当前目录\",{\"1\":{\"66\":1}}],[\"表示当前版本\",{\"1\":{\"24\":2}}],[\"表示从标准输入读取\",{\"1\":{\"64\":1}}],[\"表示注释\",{\"1\":{\"61\":1}}],[\"手动处理错误\",{\"1\":{\"553\":1}}],[\"源码\",{\"1\":{\"550\":1,\"551\":1,\"552\":1}}],[\"普通参数\",{\"0\":{\"550\":1}}],[\"明文传输\",{\"1\":{\"549\":1}}],[\"明确\",{\"1\":{\"519\":1}}],[\"明确性\",{\"1\":{\"397\":1}}],[\"身份验证\",{\"1\":{\"546\":1}}],[\"路由获取\",{\"1\":{\"600\":1}}],[\"路由是\",{\"1\":{\"575\":1}}],[\"路由\",{\"0\":{\"573\":1},\"1\":{\"600\":1}}],[\"路由的处理函数\",{\"1\":{\"571\":1}}],[\"路由处理函数\",{\"1\":{\"571\":1}}],[\"路由组中的所有路由都会应用\",{\"1\":{\"544\":1}}],[\"路由组中应用\",{\"1\":{\"544\":1}}],[\"路由组中应用中间件\",{\"0\":{\"544\":1}}],[\"路由组\",{\"0\":{\"576\":1},\"1\":{\"544\":1,\"576\":1}}],[\"路径中传递参数\",{\"1\":{\"557\":1}}],[\"路径参数使用\",{\"1\":{\"575\":1}}],[\"路径参数允许在\",{\"1\":{\"575\":1}}],[\"路径参数通常用于\",{\"1\":{\"557\":1}}],[\"路径参数用于在\",{\"1\":{\"557\":1}}],[\"路径参数\",{\"0\":{\"557\":1},\"1\":{\"575\":2}}],[\"路径\",{\"1\":{\"66\":1,\"575\":1}}],[\"全局应用\",{\"1\":{\"543\":1}}],[\"步骤4\",{\"1\":{\"540\":1}}],[\"步骤3\",{\"1\":{\"540\":1}}],[\"步骤2\",{\"1\":{\"540\":1}}],[\"步骤1\",{\"1\":{\"540\":1}}],[\"易于使用\",{\"1\":{\"538\":1}}],[\"易于理解的方式来管理文件的状态\",{\"1\":{\"27\":1}}],[\"什么是\",{\"0\":{\"582\":1,\"586\":1}}],[\"什么是gin框架\",{\"0\":{\"538\":1}}],[\"什么是docker镜像\",{\"0\":{\"78\":1}}],[\"什么是dockerfile\",{\"0\":{\"58\":1}}],[\"栅栏用于使一组线程在某个点上同步\",{\"1\":{\"534\":1}}],[\"栅栏\",{\"0\":{\"534\":1}}],[\"释放信号量\",{\"1\":{\"532\":1}}],[\"离开临界区\",{\"1\":{\"531\":2,\"532\":1}}],[\"离线工作\",{\"1\":{\"29\":1}}],[\"条件变量的条件\",{\"1\":{\"531\":1}}],[\"条件变量用于阻塞线程\",{\"1\":{\"531\":1}}],[\"条件变量\",{\"0\":{\"531\":1},\"1\":{\"531\":1}}],[\"增加\",{\"1\":{\"530\":1,\"534\":1}}],[\"增强了\",{\"1\":{\"113\":1}}],[\"锁用于确保在任何时刻\",{\"1\":{\"530\":1}}],[\"锁\",{\"0\":{\"530\":1}}],[\"立即执行此\",{\"1\":{\"522\":1}}],[\"隐式地提供同步和内存可见性保证\",{\"1\":{\"517\":1}}],[\"间安全通信的机制\",{\"1\":{\"517\":1}}],[\"尤其是在需要高并发和高效\",{\"1\":{\"507\":1}}],[\"尤其是在处理大量结构体或需要高性能内存访问的场景中\",{\"1\":{\"451\":1}}],[\"异步编程等\",{\"1\":{\"506\":1}}],[\"密集型任务\",{\"1\":{\"506\":1,\"507\":1}}],[\"密钥对\",{\"0\":{\"179\":1,\"184\":1}}],[\"控制原语是并发编程的基础\",{\"1\":{\"535\":1}}],[\"控制原语\",{\"1\":{\"529\":1}}],[\"控制权由程序员掌握\",{\"1\":{\"506\":1}}],[\"控制信息\",{\"1\":{\"467\":1}}],[\"消息队列\",{\"1\":{\"504\":1}}],[\"消费者函数从通道接收数据并处理\",{\"1\":{\"484\":1}}],[\"消费者模式通过缓冲通道协调生产者和消费者的工作\",{\"1\":{\"484\":1}}],[\"消费者\",{\"0\":{\"484\":1}}],[\"线程的创建和切换开销较小\",{\"1\":{\"505\":1}}],[\"线程是进程中的一个执行单元\",{\"1\":{\"505\":1}}],[\"线程和进程是并发和并行编程中的三种主要概念\",{\"1\":{\"503\":1}}],[\"线程\",{\"0\":{\"503\":1,\"505\":1},\"1\":{\"507\":1}}],[\"栈管理\",{\"1\":{\"496\":1}}],[\"栈或者其他需要动态管理元素顺序的数据结构\",{\"1\":{\"163\":1}}],[\"调度\",{\"1\":{\"496\":1}}],[\"调用嵌入的\",{\"1\":{\"450\":1}}],[\"调用时需要使用到该接收者\",{\"1\":{\"396\":1}}],[\"调用根据后进先出的顺序执行\",{\"1\":{\"394\":1}}],[\"调用\",{\"1\":{\"385\":1,\"397\":1,\"530\":1,\"532\":1,\"534\":1}}],[\"由三部分组成\",{\"1\":{\"592\":1}}],[\"由设置的有效期决定\",{\"1\":{\"589\":1}}],[\"由服务器存储空间决定\",{\"1\":{\"589\":1}}],[\"由\",{\"1\":{\"494\":1,\"496\":1}}],[\"由于数据存储在服务器端\",{\"1\":{\"587\":1}}],[\"由于其设计初衷是作为轻量级的\",{\"1\":{\"580\":1}}],[\"由于其高并发处理能力和小内存占用\",{\"1\":{\"372\":1}}],[\"由于其高性能和简洁性\",{\"1\":{\"372\":1}}],[\"由于扩容的性能消耗\",{\"1\":{\"361\":1}}],[\"由于\",{\"1\":{\"29\":1,\"418\":1,\"420\":1}}],[\"协议中跟踪用户状态的机制\",{\"1\":{\"590\":1}}],[\"协议开源\",{\"1\":{\"70\":1}}],[\"协作式调度\",{\"1\":{\"506\":1}}],[\"协程在现代编程中越来越受欢迎\",{\"1\":{\"507\":1}}],[\"协程通过显式的让出操作\",{\"1\":{\"506\":1}}],[\"协程的创建和切换开销更小\",{\"1\":{\"506\":1}}],[\"协程由程序自身管理调度\",{\"1\":{\"506\":1}}],[\"协程是一种用户态的轻量级线程\",{\"1\":{\"506\":1}}],[\"协程\",{\"0\":{\"494\":1,\"503\":1,\"506\":1},\"1\":{\"494\":2,\"503\":1,\"507\":1}}],[\"综合示例\",{\"1\":{\"492\":1}}],[\"综上所述\",{\"1\":{\"450\":1,\"455\":1}}],[\"截止时间上下文\",{\"0\":{\"491\":1}}],[\"截止时间等\",{\"1\":{\"138\":1}}],[\"边界传递请求范围的数据\",{\"1\":{\"492\":1}}],[\"边界上传递请求范围数据\",{\"1\":{\"485\":1}}],[\"边界和\",{\"1\":{\"138\":1}}],[\"阶段2\",{\"1\":{\"482\":1}}],[\"阶段1\",{\"1\":{\"482\":1}}],[\"扇出模式将一个输入通道的数据分发到多个\",{\"1\":{\"481\":1}}],[\"扇出\",{\"0\":{\"481\":1}}],[\"扇入模式将多个输入通道合并到一个通道\",{\"1\":{\"480\":1}}],[\"扇入\",{\"0\":{\"480\":1}}],[\"完成时减少计数\",{\"1\":{\"502\":1}}],[\"完成\",{\"1\":{\"479\":1,\"481\":1,\"502\":3,\"530\":2,\"531\":1,\"532\":1,\"533\":1,\"534\":2,\"535\":1}}],[\"完整的意思可以解释为\",{\"1\":{\"45\":1}}],[\"启动gin服务器\",{\"1\":{\"540\":1,\"576\":1}}],[\"启动速度也更快\",{\"1\":{\"496\":1}}],[\"启动消费者\",{\"1\":{\"484\":1}}],[\"启动生产者\",{\"1\":{\"484\":1}}],[\"启动\",{\"0\":{\"495\":1},\"1\":{\"479\":1,\"481\":1,\"530\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1}}],[\"启动并运行整个应用\",{\"1\":{\"50\":1}}],[\"模块\",{\"1\":{\"580\":1}}],[\"模糊匹配\",{\"1\":{\"575\":1}}],[\"模板的语法和特性\",{\"1\":{\"606\":1}}],[\"模板语法\",{\"1\":{\"606\":1}}],[\"模板路径问题\",{\"1\":{\"606\":1}}],[\"模板中可以直接访问\",{\"1\":{\"606\":1}}],[\"模板中\",{\"1\":{\"601\":1}}],[\"模板渲染是将动态数据嵌入到\",{\"1\":{\"601\":1}}],[\"模板渲染\",{\"0\":{\"601\":1}}],[\"模板\",{\"1\":{\"564\":1,\"603\":2}}],[\"模板文件的目录\",{\"1\":{\"602\":1}}],[\"模板文件并将数据传递给模板来实现渲染\",{\"1\":{\"601\":1}}],[\"模板文件\",{\"0\":{\"604\":1},\"1\":{\"47\":1,\"602\":2,\"603\":1}}],[\"模拟身份验证\",{\"1\":{\"544\":1}}],[\"模拟\",{\"1\":{\"534\":1}}],[\"模拟延迟\",{\"1\":{\"480\":1}}],[\"模拟工作\",{\"1\":{\"479\":1,\"481\":1,\"502\":1,\"532\":1}}],[\"模拟处理任务\",{\"1\":{\"479\":1}}],[\"避免了客户端篡改数据的风险\",{\"1\":{\"587\":1}}],[\"避免了复杂的访问控制规则\",{\"1\":{\"397\":1}}],[\"避免阻塞\",{\"1\":{\"527\":1}}],[\"避免资源泄漏\",{\"1\":{\"493\":1}}],[\"避免因为过多的\",{\"1\":{\"479\":1}}],[\"按预期顺序执行\",{\"1\":{\"477\":1}}],[\"按位取反\",{\"1\":{\"431\":1}}],[\"按位异或赋值\",{\"1\":{\"429\":1}}],[\"按位异或\",{\"1\":{\"428\":1,\"431\":1}}],[\"按位或赋值\",{\"1\":{\"429\":1}}],[\"按位或\",{\"1\":{\"428\":1,\"431\":1}}],[\"按位与赋值\",{\"1\":{\"429\":1}}],[\"按位与\",{\"1\":{\"428\":1,\"431\":1}}],[\"阻塞特性\",{\"1\":{\"468\":1}}],[\"安全性较低\",{\"1\":{\"589\":1}}],[\"安全性较高\",{\"1\":{\"587\":1,\"589\":1}}],[\"安全性\",{\"1\":{\"587\":1,\"589\":1,\"594\":1}}],[\"安全的并发程序\",{\"1\":{\"466\":1}}],[\"安装好go后\",{\"1\":{\"539\":1}}],[\"安装好之后\",{\"1\":{\"44\":1}}],[\"安装gin框架\",{\"0\":{\"539\":1}}],[\"安装图文教程\",{\"1\":{\"76\":1}}],[\"安装软件等\",{\"1\":{\"59\":1}}],[\"安装应用程序依赖\",{\"1\":{\"59\":1}}],[\"安装依赖库\",{\"0\":{\"597\":1}}],[\"安装依赖\",{\"1\":{\"59\":1}}],[\"安装\",{\"0\":{\"74\":1,\"129\":1},\"1\":{\"33\":1}}],[\"程序员能够高效地处理并发任务\",{\"1\":{\"528\":1}}],[\"程序顺序规则\",{\"1\":{\"509\":1,\"518\":1}}],[\"程序可能产生不可预期的错误或不一致的数据\",{\"1\":{\"462\":1}}],[\"程序的运行结果依赖于\",{\"1\":{\"462\":1}}],[\"程序中对\",{\"1\":{\"518\":1}}],[\"程序中进行各种数学计算\",{\"1\":{\"306\":1}}],[\"程序中进行日志记录\",{\"1\":{\"299\":1}}],[\"程序中处理时间和日期相关的操作\",{\"1\":{\"352\":1}}],[\"程序中处理\",{\"1\":{\"200\":1,\"214\":1,\"229\":1}}],[\"程序中实现各种加密和解密操作\",{\"1\":{\"185\":1}}],[\"竞态条件发生在多个\",{\"1\":{\"462\":1}}],[\"竞态条件指的是多个\",{\"1\":{\"462\":1}}],[\"竞态条件\",{\"0\":{\"462\":1},\"1\":{\"466\":1}}],[\"互斥锁确保在同一时间只有一个\",{\"1\":{\"514\":1}}],[\"互斥锁\",{\"0\":{\"514\":1},\"1\":{\"461\":1,\"530\":2,\"531\":1}}],[\"互不影响\",{\"1\":{\"79\":1}}],[\"理解\",{\"1\":{\"519\":1}}],[\"理解并解决这些问题对于编写高效和可靠的并发程序至关重要\",{\"1\":{\"459\":1}}],[\"理解docker\",{\"1\":{\"51\":1}}],[\"看做是常量的索引\",{\"1\":{\"458\":1}}],[\"友人\",{\"1\":{\"456\":1}}],[\"意思为可变化的量\",{\"1\":{\"456\":1}}],[\"意味着它从右向左结合\",{\"1\":{\"431\":1}}],[\"效率低\",{\"1\":{\"456\":1}}],[\"读写锁允许多个\",{\"1\":{\"515\":1}}],[\"读写锁\",{\"0\":{\"515\":1},\"1\":{\"461\":1,\"519\":1,\"530\":1}}],[\"读出即失效\",{\"1\":{\"455\":1}}],[\"读出管道\",{\"1\":{\"455\":1}}],[\"读取计数器值\",{\"1\":{\"535\":1}}],[\"读取并将读取的数据写入\",{\"1\":{\"280\":1}}],[\"读取器\",{\"1\":{\"188\":1}}],[\"读取\",{\"0\":{\"187\":1},\"1\":{\"208\":1,\"222\":1}}],[\"读取数据\",{\"0\":{\"262\":1},\"1\":{\"157\":1}}],[\"读取直到指定的分隔符\",{\"1\":{\"146\":1,\"147\":1}}],[\"读取操作\",{\"0\":{\"144\":1}}],[\"变量名\",{\"1\":{\"605\":1}}],[\"变量名为\",{\"1\":{\"456\":2}}],[\"变量被多个\",{\"1\":{\"462\":1}}],[\"变量是变化的量\",{\"1\":{\"457\":1}}],[\"变量声明后如果没有给定初始值\",{\"1\":{\"456\":1}}],[\"变量的初始化\",{\"1\":{\"456\":1}}],[\"变量的声明\",{\"1\":{\"456\":1}}],[\"变量\",{\"0\":{\"456\":1},\"1\":{\"455\":1,\"463\":1}}],[\"变成两倍\",{\"1\":{\"396\":1}}],[\"动态增加或减少通道的数量等\",{\"1\":{\"528\":1}}],[\"动态数组\",{\"1\":{\"455\":1}}],[\"动态长度\",{\"1\":{\"366\":1}}],[\"布尔类型\",{\"1\":{\"454\":1}}],[\"布尔值\",{\"1\":{\"238\":1}}],[\"整数类型\",{\"1\":{\"454\":1}}],[\"整体性\",{\"1\":{\"29\":1}}],[\"合理地排列结构体字段可以减少内存占用和提高访问效率\",{\"1\":{\"451\":1}}],[\"合并远程分支数据到本地\",{\"1\":{\"36\":1}}],[\"合并不了的抛出\",{\"1\":{\"16\":1}}],[\"合并中间态\",{\"1\":{\"16\":1}}],[\"合并冲突\",{\"0\":{\"15\":1}}],[\"合并分支\",{\"0\":{\"14\":1}}],[\"尽量减少填充字节\",{\"1\":{\"451\":1}}],[\"占用\",{\"1\":{\"451\":1}}],[\"占用更少的系统资源\",{\"1\":{\"71\":1}}],[\"填充和空洞\",{\"1\":{\"451\":1}}],[\"嵌入其他结构体中\",{\"1\":{\"450\":1}}],[\"嵌套结构的编码和解码\",{\"0\":{\"214\":1,\"226\":1}}],[\"序列化和反序列化\",{\"1\":{\"449\":1}}],[\"序列化和反序列化时忽略该字段\",{\"1\":{\"448\":1}}],[\"序列化和反序列化时\",{\"1\":{\"448\":1}}],[\"序列化\",{\"1\":{\"449\":1}}],[\"反序列化为结构体\",{\"1\":{\"447\":1}}],[\"反余弦和反正切值\",{\"1\":{\"303\":1}}],[\"标记等场景中使用\",{\"1\":{\"450\":1}}],[\"标签外\",{\"1\":{\"449\":1}}],[\"标签\",{\"1\":{\"447\":1,\"449\":3}}],[\"标准库中的许多函数都会返回一个结果值和一个错误值\",{\"1\":{\"381\":1}}],[\"标准库中的错误处理\",{\"0\":{\"381\":1}}],[\"标准库中的\",{\"1\":{\"306\":1}}],[\"标准库模块及其功能的概述\",{\"1\":{\"135\":1}}],[\"标准库\",{\"0\":{\"135\":1}}],[\"详解\",{\"1\":{\"444\":1}}],[\"交换两个数的值\",{\"1\":{\"436\":1}}],[\"交互式还原\",{\"1\":{\"27\":1}}],[\"符号来表示\",{\"1\":{\"575\":1}}],[\"符号\",{\"1\":{\"433\":1,\"434\":1}}],[\"考虑以下结构体\",{\"1\":{\"451\":1}}],[\"考虑到这一点\",{\"1\":{\"432\":1}}],[\"考虑使用其他数据结构或转换策略来处理这些值\",{\"1\":{\"423\":1}}],[\"赋值和作为参数或者返回值\",{\"1\":{\"455\":1}}],[\"赋值运算符\",{\"0\":{\"429\":1},\"1\":{\"431\":1}}],[\"赋给\",{\"1\":{\"431\":1}}],[\"复合数据类型\",{\"0\":{\"455\":1},\"1\":{\"453\":1}}],[\"复合赋值运算符\",{\"1\":{\"431\":1}}],[\"复制文件或目录到容器中\",{\"1\":{\"62\":1}}],[\"复制文件等\",{\"1\":{\"58\":1}}],[\"复制当前目录下的所有文件到工作目录\",{\"1\":{\"59\":1}}],[\"乘性运算符\",{\"1\":{\"431\":1}}],[\"乘法运算符\",{\"1\":{\"431\":1}}],[\"乘法赋值\",{\"1\":{\"429\":1}}],[\"乘法\",{\"1\":{\"425\":1,\"431\":1}}],[\"二进制\",{\"1\":{\"428\":7}}],[\"右移赋值\",{\"1\":{\"429\":1}}],[\"右移\",{\"1\":{\"428\":1,\"431\":1}}],[\"左移赋值\",{\"1\":{\"429\":1}}],[\"左移\",{\"1\":{\"428\":1,\"431\":1}}],[\"^=\",{\"1\":{\"429\":1,\"431\":1}}],[\"^\",{\"1\":{\"428\":2,\"431\":2}}],[\"位系统上\",{\"1\":{\"455\":2}}],[\"位于偏移量\",{\"1\":{\"451\":1}}],[\"位移运算符\",{\"1\":{\"431\":1}}],[\"位运算符\",{\"0\":{\"428\":1},\"1\":{\"431\":1}}],[\"位置参数\",{\"1\":{\"233\":1}}],[\"逻辑或\",{\"1\":{\"431\":1}}],[\"逻辑与\",{\"1\":{\"431\":1}}],[\"逻辑非\",{\"1\":{\"431\":1}}],[\"逻辑运算符\",{\"0\":{\"427\":1},\"1\":{\"431\":2}}],[\"逻辑控制语句\",{\"0\":{\"413\":1}}],[\"小\",{\"1\":{\"589\":1}}],[\"小于等于\",{\"1\":{\"426\":1,\"431\":1}}],[\"小于\",{\"1\":{\"426\":1,\"431\":1}}],[\"小写字母开头\",{\"1\":{\"397\":1}}],[\"关系和遵循内存模型规则有助于避免竞态条件和其他并发问题\",{\"1\":{\"519\":1}}],[\"关系运算符\",{\"0\":{\"426\":1}}],[\"关键概念\",{\"0\":{\"510\":1}}],[\"关键字即可\",{\"1\":{\"457\":1}}],[\"关键字来声明\",{\"1\":{\"456\":1}}],[\"关键字后没有表达式\",{\"1\":{\"415\":1}}],[\"关键字和\",{\"1\":{\"407\":1}}],[\"关键字\",{\"0\":{\"417\":1},\"1\":{\"387\":1,\"407\":1,\"443\":1,\"494\":1,\"495\":1}}],[\"关键字定义和管理数据卷\",{\"1\":{\"112\":1}}],[\"关闭的通道可以用来通知接收方没有更多的数据\",{\"1\":{\"468\":1}}],[\"关闭后的通道不再允许发送数据\",{\"1\":{\"468\":1}}],[\"关闭通道后\",{\"1\":{\"474\":1}}],[\"关闭通道\",{\"0\":{\"474\":1},\"1\":{\"468\":1}}],[\"求余赋值\",{\"1\":{\"429\":1}}],[\"求余\",{\"1\":{\"425\":1}}],[\"求两数之和\",{\"1\":{\"399\":1}}],[\"取消上下文\",{\"0\":{\"489\":1},\"1\":{\"489\":1}}],[\"取消信号和截止日期\",{\"1\":{\"493\":1}}],[\"取消信号和截止日期的方式\",{\"1\":{\"485\":1}}],[\"取消信号传递等场景\",{\"1\":{\"485\":1}}],[\"取地址符来获取指定变量的地址\",{\"1\":{\"455\":1}}],[\"取出指针并获取值\",{\"1\":{\"430\":1}}],[\"取址运算符\",{\"1\":{\"430\":1}}],[\"取模\",{\"1\":{\"425\":1,\"431\":1}}],[\"取决于所迭代的数据结构\",{\"1\":{\"417\":1}}],[\"减法赋值\",{\"1\":{\"429\":1}}],[\"减法\",{\"1\":{\"425\":1,\"431\":1}}],[\"减少了重复代码\",{\"1\":{\"405\":1}}],[\"减少了运行时错误\",{\"1\":{\"405\":1}}],[\"减少了学习和使用的难度\",{\"1\":{\"371\":1}}],[\"算术运算符\",{\"0\":{\"425\":1}}],[\"运算符有不同的优先级\",{\"1\":{\"431\":1}}],[\"运算符的优先级决定了表达式中各部分的计算顺序\",{\"1\":{\"431\":1}}],[\"运算符的优先级\",{\"0\":{\"431\":1}}],[\"运算符\",{\"0\":{\"424\":1}}],[\"运行以下命令来启动应用\",{\"1\":{\"540\":1}}],[\"运行代码\",{\"1\":{\"540\":1}}],[\"运行上述优化后的代码\",{\"1\":{\"451\":1}}],[\"运行上述代码\",{\"1\":{\"451\":1}}],[\"运行程序时可以这样使用\",{\"1\":{\"231\":1}}],[\"运行一个web应用\",{\"0\":{\"118\":1}}],[\"运行这个镜像的容器\",{\"1\":{\"102\":1,\"103\":1}}],[\"运行效率\",{\"1\":{\"72\":1}}],[\"运行时管理和调度\",{\"1\":{\"496\":1}}],[\"运行时来管理\",{\"1\":{\"494\":1}}],[\"运行时\",{\"1\":{\"71\":1}}],[\"运行命令\",{\"1\":{\"67\":1}}],[\"运行和\",{\"1\":{\"43\":1}}],[\"运行安装程序后\",{\"1\":{\"31\":1}}],[\"运行\",{\"1\":{\"25\":1,\"79\":1}}],[\"尝试使用另外一个\",{\"1\":{\"423\":1}}],[\"尝试使用\",{\"1\":{\"423\":1}}],[\"尝试从注册表中拉取最新版本的基础镜像\",{\"1\":{\"65\":1}}],[\"展示为什么不能使用\",{\"1\":{\"423\":1}}],[\"展示了如何使用取消\",{\"1\":{\"492\":1}}],[\"展示了如何设置一个\",{\"1\":{\"132\":1}}],[\"展示了如何连接到\",{\"1\":{\"131\":1}}],[\"存储位置\",{\"1\":{\"589\":1}}],[\"存储\",{\"1\":{\"588\":2}}],[\"存储在服务器端\",{\"1\":{\"587\":1}}],[\"存储在客户端\",{\"1\":{\"583\":1}}],[\"存储的内容都是指针\",{\"1\":{\"440\":1}}],[\"存储的是一个指向底层数组的指针\",{\"1\":{\"363\":1}}],[\"存储到内存中的值也必然会占用内存\",{\"1\":{\"439\":1}}],[\"存储值\",{\"1\":{\"422\":1}}],[\"零值\",{\"1\":{\"421\":1,\"448\":1,\"456\":1}}],[\"键值对集合\",{\"1\":{\"455\":1}}],[\"键名\",{\"1\":{\"448\":1}}],[\"键的类型包括\",{\"1\":{\"423\":1}}],[\"键的类型\",{\"1\":{\"421\":1}}],[\"键和值\",{\"1\":{\"417\":1}}],[\"集合数据结构中的占位符\",{\"1\":{\"450\":1}}],[\"集合的长度\",{\"1\":{\"421\":1}}],[\"集合\",{\"0\":{\"419\":1}}],[\"集中式\",{\"1\":{\"29\":1}}],[\"了解内存模型对编写并发安全的程序至关重要\",{\"1\":{\"508\":1}}],[\"了解结构体在内存中的存储方式和对齐规则\",{\"1\":{\"451\":1}}],[\"了解并熟练使用\",{\"1\":{\"418\":1}}],[\"了解到这些之后\",{\"1\":{\"396\":1}}],[\"准备好\",{\"1\":{\"418\":1}}],[\"准确来说是head指针指向的分支修改的内容\",{\"1\":{\"17\":1}}],[\"索引和unicode码点\",{\"1\":{\"417\":1}}],[\"索引和元素值\",{\"1\":{\"417\":1}}],[\"迭代通道\",{\"1\":{\"417\":1}}],[\"迭代映射\",{\"1\":{\"417\":1}}],[\"迭代字符串\",{\"1\":{\"417\":1}}],[\"迭代数组和切片\",{\"1\":{\"417\":1}}],[\"应避免其与方法名重复\",{\"1\":{\"443\":1}}],[\"应该放\",{\"1\":{\"417\":1}}],[\"应用是非常有帮助的\",{\"1\":{\"606\":1}}],[\"应用中动态生成\",{\"1\":{\"606\":1}}],[\"应用中使用\",{\"1\":{\"591\":1}}],[\"应用中\",{\"1\":{\"590\":1}}],[\"应用的基础\",{\"1\":{\"577\":1}}],[\"应用的核心部分\",{\"1\":{\"575\":1}}],[\"应用的可维护性和扩展性\",{\"1\":{\"546\":1}}],[\"应用和\",{\"1\":{\"372\":1}}],[\"应用容器\",{\"1\":{\"122\":1}}],[\"应用程序中的各种场景\",{\"1\":{\"596\":1}}],[\"应用程序\",{\"1\":{\"48\":2,\"78\":2,\"117\":1}}],[\"应用程序的工具\",{\"1\":{\"47\":1}}],[\"应用\",{\"0\":{\"372\":1},\"1\":{\"43\":1,\"541\":1}}],[\"括起来\",{\"1\":{\"416\":1}}],[\"映射是引用类型\",{\"1\":{\"455\":1}}],[\"映射是一个哈希表\",{\"1\":{\"455\":1}}],[\"映射变量本身是一个指向哈希表的指针\",{\"1\":{\"455\":1}}],[\"映射中的键值对存储在内存中的某个位置\",{\"1\":{\"455\":1}}],[\"映射类型\",{\"1\":{\"455\":1}}],[\"映射的迭代顺序是随机的\",{\"1\":{\"417\":1}}],[\"映射\",{\"1\":{\"417\":1}}],[\"映射等数据结构\",{\"1\":{\"416\":1}}],[\"映射到了该\",{\"1\":{\"119\":1}}],[\"映射到宿主机的\",{\"1\":{\"49\":1}}],[\"到这里\",{\"1\":{\"541\":1}}],[\"到\",{\"1\":{\"416\":2}}],[\"直到某个特定条件为真\",{\"1\":{\"531\":1}}],[\"直到其中的一个\",{\"1\":{\"521\":1}}],[\"直到缓冲区为空\",{\"1\":{\"474\":1}}],[\"直到缓冲区满\",{\"1\":{\"473\":1}}],[\"直到数据可用或者通道就绪\",{\"1\":{\"468\":1}}],[\"直到通道关闭\",{\"1\":{\"417\":1}}],[\"直到\",{\"1\":{\"416\":1}}],[\"直到指定的条件不再满足为止\",{\"1\":{\"416\":1}}],[\"直接匹配指定的路径\",{\"1\":{\"575\":1}}],[\"直接获取指定前缀的所有查询参数并解析为\",{\"1\":{\"552\":1}}],[\"直接获取\",{\"1\":{\"550\":1,\"551\":1}}],[\"直接打印结果\",{\"1\":{\"535\":1}}],[\"直接存在变量中\",{\"1\":{\"454\":1}}],[\"直接在\",{\"1\":{\"82\":1}}],[\"直接使用如下命令即可\",{\"1\":{\"7\":1}}],[\"被广泛用于认证授权\",{\"1\":{\"590\":1}}],[\"被广泛应用于云计算平台和工具的开发\",{\"1\":{\"372\":1}}],[\"被设置为\",{\"1\":{\"518\":1}}],[\"被分配为\",{\"1\":{\"415\":1}}],[\"块\",{\"1\":{\"415\":1}}],[\"特性\",{\"1\":{\"589\":1}}],[\"特性和概念\",{\"0\":{\"468\":1}}],[\"特有的用于\",{\"1\":{\"517\":1}}],[\"特点\",{\"1\":{\"504\":1,\"505\":1,\"506\":1}}],[\"特点与注意事项\",{\"1\":{\"415\":1,\"418\":1}}],[\"特殊情况nan\",{\"0\":{\"423\":1}}],[\"特别是需要处理多个通道的通信时\",{\"1\":{\"521\":1}}],[\"特别是用于从多个通信通道中选择和执行不同的\",{\"1\":{\"418\":1}}],[\"特别是在需要对一组路由应用相同的中间件时\",{\"1\":{\"576\":1}}],[\"特别是在使用和传递时的行为有所不同\",{\"1\":{\"364\":1}}],[\"特别是在处理用户输入或从外部数据源读取数据时\",{\"1\":{\"326\":1}}],[\"特别是在处理大量数据时\",{\"1\":{\"105\":1}}],[\"特别是在处理大型仓库\",{\"1\":{\"29\":1}}],[\"特别适合需要持久化状态或者捕获动态变化的场景\",{\"1\":{\"391\":1}}],[\"替代多个\",{\"1\":{\"415\":1}}],[\"空字符串\",{\"1\":{\"550\":1}}],[\"空结构体在\",{\"1\":{\"450\":1}}],[\"空结构体在信号传递\",{\"1\":{\"450\":1}}],[\"空结构体不消耗任何内存空间\",{\"1\":{\"450\":1}}],[\"空结构体可以嵌入到其他结构体中\",{\"1\":{\"450\":1}}],[\"空结构体可以作为一种占位符\",{\"1\":{\"450\":1}}],[\"空结构体可以用于将方法注入到其他结构体中\",{\"1\":{\"450\":1}}],[\"空结构体可以用作\",{\"1\":{\"450\":2}}],[\"空结构体通常用于以下几种场景\",{\"1\":{\"450\":1}}],[\"空结构体的声明如下\",{\"1\":{\"450\":1}}],[\"空结构体\",{\"0\":{\"450\":1},\"1\":{\"450\":1}}],[\"空\",{\"1\":{\"415\":1}}],[\"空接口对于需要处理未知类型的数据非常有用\",{\"1\":{\"410\":1}}],[\"空接口\",{\"0\":{\"410\":1},\"1\":{\"410\":1}}],[\"空指针时执行\",{\"1\":{\"438\":1}}],[\"空指针判断\",{\"1\":{\"438\":1}}],[\"空指针\",{\"0\":{\"438\":1},\"1\":{\"361\":1}}],[\"顺序可能不同\",{\"1\":{\"403\":1}}],[\"顺序读取\",{\"1\":{\"275\":1}}],[\"约束\",{\"1\":{\"402\":1}}],[\"很容易造成系统崩溃\",{\"1\":{\"437\":1}}],[\"很好\",{\"1\":{\"399\":1}}],[\"很简单\",{\"1\":{\"399\":1}}],[\"确实\",{\"1\":{\"399\":1}}],[\"确保安装了\",{\"1\":{\"597\":1}}],[\"确保一次只有一个线程执行\",{\"1\":{\"530\":1}}],[\"确保数据一致性和程序的正确性\",{\"1\":{\"535\":1}}],[\"确保数据的安全传递和处理\",{\"1\":{\"484\":1}}],[\"确保数据在\",{\"1\":{\"465\":1}}],[\"确保\",{\"1\":{\"477\":1,\"606\":1}}],[\"确保计数操作是并发安全的\",{\"1\":{\"465\":1}}],[\"确保在并发环境下的程序行为是可预测的\",{\"1\":{\"508\":1}}],[\"确保在同一时刻只有一个\",{\"1\":{\"463\":1}}],[\"确保在容器重启或删除后数据不丢失\",{\"1\":{\"111\":1}}],[\"确保程序的正确性和一致性\",{\"1\":{\"460\":1}}],[\"确保程序在面对异常情况时能够安全和可靠地执行\",{\"1\":{\"384\":1}}],[\"没错\",{\"1\":{\"399\":1}}],[\"没有指定数组的数据\",{\"1\":{\"356\":1}}],[\"没有被合并\",{\"1\":{\"17\":1}}],[\"再将结构体转换为\",{\"1\":{\"552\":1}}],[\"再发送数据会引发\",{\"1\":{\"474\":1}}],[\"再写一个函数确实可以实现这个需求\",{\"1\":{\"399\":1}}],[\"再写一个函数不就行了吗\",{\"1\":{\"399\":1}}],[\"再次发送会阻塞\",{\"1\":{\"473\":1}}],[\"再次打印轮转后的环形链表的所有值\",{\"1\":{\"165\":1}}],[\"再次遍历链表并打印元素\",{\"1\":{\"162\":1}}],[\"泛型提供了编译时的类型检查\",{\"1\":{\"405\":1}}],[\"泛型允许编写通用函数和数据结构\",{\"1\":{\"405\":1}}],[\"泛型的优势\",{\"0\":{\"405\":1}}],[\"泛型不仅可以用于函数\",{\"1\":{\"401\":1}}],[\"泛型类型\",{\"0\":{\"401\":1}}],[\"泛型函数和类型可以有多个类型参数\",{\"1\":{\"403\":1}}],[\"泛型函数\",{\"0\":{\"400\":1}}],[\"泛型通过类型参数和类型约束实现\",{\"1\":{\"398\":1}}],[\"泛型\",{\"0\":{\"398\":1}}],[\"辅助函数\",{\"1\":{\"397\":1}}],[\"大\",{\"1\":{\"589\":1}}],[\"大于等于\",{\"1\":{\"426\":1,\"431\":1}}],[\"大于\",{\"1\":{\"426\":1,\"431\":1}}],[\"大写字母开头\",{\"1\":{\"397\":1}}],[\"大大提高开发效率\",{\"1\":{\"376\":1}}],[\"转换为了\",{\"1\":{\"396\":1}}],[\"帮我们做了引用\",{\"1\":{\"396\":1}}],[\"帮助信息\",{\"1\":{\"232\":1}}],[\"帮助我们实现多个相关联的\",{\"1\":{\"47\":1}}],[\"依旧取决于具体平台和编译器\",{\"1\":{\"451\":1}}],[\"依次类推\",{\"1\":{\"439\":1}}],[\"依然可以通过接口访问其功能\",{\"1\":{\"397\":1}}],[\"依然能够修改成功\",{\"1\":{\"396\":1}}],[\"依赖性\",{\"1\":{\"589\":1}}],[\"依赖\",{\"1\":{\"587\":1,\"589\":1}}],[\"依赖库等\",{\"1\":{\"78\":1}}],[\"依赖库\",{\"1\":{\"78\":1}}],[\"依赖关系\",{\"1\":{\"51\":2}}],[\"事件用于通知线程某个条件已经发生\",{\"1\":{\"533\":1}}],[\"事件\",{\"0\":{\"533\":1}}],[\"事实上\",{\"1\":{\"396\":1}}],[\"事务是一旦发生错误\",{\"1\":{\"16\":1}}],[\"zone\",{\"1\":{\"598\":1}}],[\"z\",{\"1\":{\"396\":6}}],[\"zero\",{\"1\":{\"395\":1,\"415\":1}}],[\"zh\",{\"1\":{\"33\":1}}],[\"延迟执行\",{\"0\":{\"394\":1},\"1\":{\"394\":1}}],[\"区别\",{\"1\":{\"391\":1}}],[\"闭包外规则\",{\"1\":{\"518\":1}}],[\"闭包是指一个函数值\",{\"1\":{\"391\":1}}],[\"闭包\",{\"0\":{\"391\":1},\"1\":{\"391\":1}}],[\"闭包等方面的详细说明\",{\"1\":{\"385\":1}}],[\"命名返回值\",{\"1\":{\"388\":1}}],[\"命令行参数解析\",{\"1\":{\"136\":1}}],[\"命令行配置\",{\"1\":{\"44\":1}}],[\"命令将自己的镜像推送到\",{\"1\":{\"116\":1}}],[\"命令删除不再需要的数据卷\",{\"1\":{\"110\":1}}],[\"命令列出所有的数据卷\",{\"1\":{\"109\":1}}],[\"命令创建一个数据卷\",{\"1\":{\"107\":1}}],[\"命令管理数据卷\",{\"1\":{\"105\":1}}],[\"命令为镜像添加一个新的标签\",{\"1\":{\"87\":1}}],[\"命令和\",{\"1\":{\"68\":1}}],[\"命令的详细解释\",{\"1\":{\"63\":1}}],[\"命令的常见用法\",{\"1\":{\"35\":1}}],[\"命令用于基于\",{\"1\":{\"63\":1}}],[\"命令用于删除文件\",{\"1\":{\"25\":1}}],[\"命令转换为\",{\"1\":{\"49\":1}}],[\"命令来启动并运行整个应用程序\",{\"1\":{\"47\":1}}],[\"命令来在容器内运行一个应用程序\",{\"1\":{\"45\":1}}],[\"命令\",{\"1\":{\"7\":1,\"27\":1,\"35\":1,\"37\":1,\"38\":1,\"129\":1}}],[\"命令会自动将远程仓库的所有分支和历史记录复制到本地\",{\"1\":{\"7\":1}}],[\"匿名函数是指没有名称的函数\",{\"1\":{\"391\":1}}],[\"匿名函数和闭包有啥区别\",{\"1\":{\"391\":1}}],[\"匿名函数可以访问其外层作用域中的变量\",{\"1\":{\"391\":1}}],[\"匿名函数\",{\"0\":{\"390\":1},\"1\":{\"385\":1,\"390\":1}}],[\"继续处理结果\",{\"1\":{\"383\":1}}],[\"无状态性\",{\"1\":{\"594\":1}}],[\"无缓冲通道在没有接收者准备好接收数据时会阻塞发送操作\",{\"1\":{\"472\":1}}],[\"无缓冲通道\",{\"0\":{\"471\":1,\"472\":1}}],[\"无序\",{\"1\":{\"421\":1}}],[\"无限循环体\",{\"1\":{\"416\":1}}],[\"无限循环\",{\"1\":{\"416\":1}}],[\"无需依赖其他机制\",{\"1\":{\"589\":1}}],[\"无需加锁即可实现并发安全\",{\"1\":{\"516\":1}}],[\"无需额外的显式同步操作\",{\"1\":{\"468\":1}}],[\"无需使用\",{\"1\":{\"415\":1}}],[\"无需精神内耗\",{\"1\":{\"378\":1}}],[\"无需其他配置\",{\"1\":{\"378\":1}}],[\"无论是传递指针结构体还是值结构体\",{\"1\":{\"446\":1}}],[\"无论是\",{\"1\":{\"373\":1}}],[\"无论是获取当前时间\",{\"1\":{\"352\":1}}],[\"无论是基本的算术运算\",{\"1\":{\"306\":1}}],[\"无论是基本的日志记录\",{\"1\":{\"299\":1}}],[\"无论是简单的数据结构还是复杂的嵌套对象\",{\"1\":{\"214\":1,\"229\":1}}],[\"无论是简单的数据读写\",{\"1\":{\"200\":1}}],[\"无论是在开发\",{\"1\":{\"71\":1}}],[\"功能全靠插件\",{\"1\":{\"378\":1}}],[\"功能\",{\"1\":{\"378\":1}}],[\"较为麻烦\",{\"1\":{\"378\":1}}],[\"且能传输的信息量较少\",{\"1\":{\"549\":1}}],[\"且操作\",{\"1\":{\"509\":1}}],[\"且仅接受\",{\"1\":{\"455\":1}}],[\"且必须按照声明的顺序初始化\",{\"1\":{\"444\":1}}],[\"且只有自定义类型能够拥有方法\",{\"1\":{\"396\":1}}],[\"且有\",{\"1\":{\"378\":1}}],[\"且价格较高\",{\"1\":{\"378\":1}}],[\"且存储的数据类型相同\",{\"1\":{\"354\":1}}],[\"免费开源\",{\"1\":{\"378\":1}}],[\"插件\",{\"1\":{\"377\":1}}],[\"插入和更新操作是相同的\",{\"1\":{\"421\":1}}],[\"插入和删除操作\",{\"1\":{\"419\":1}}],[\"插入或更新\",{\"1\":{\"421\":1}}],[\"插入元素\",{\"1\":{\"161\":1}}],[\"插入\",{\"1\":{\"44\":1}}],[\"插入如下配置即可\",{\"1\":{\"44\":1}}],[\"工具的数据库字段映射\",{\"1\":{\"449\":1}}],[\"工欲善其事\",{\"1\":{\"376\":1}}],[\"工作池模式通过一组固定数量的工作\",{\"1\":{\"479\":1}}],[\"工作池\",{\"0\":{\"479\":1}}],[\"工作原理\",{\"0\":{\"39\":1}}],[\"工作区\",{\"1\":{\"39\":1}}],[\"工作区文件内容保持不变\",{\"1\":{\"24\":1}}],[\"工作区和暂存区的差别\",{\"1\":{\"22\":1}}],[\"仍无法通过\",{\"1\":{\"375\":1}}],[\"跳过即可\",{\"1\":{\"374\":1}}],[\"跳过标题行\",{\"1\":{\"200\":1}}],[\"都用于绑定查询参数到结构体\",{\"1\":{\"553\":1}}],[\"都是用来在客户端和服务器之间维持会话状态的机制\",{\"1\":{\"590\":1}}],[\"都是传递对应的副本\",{\"1\":{\"446\":1}}],[\"都是可选的\",{\"1\":{\"416\":1}}],[\"都会随机选择一个满足条件的\",{\"1\":{\"418\":1}}],[\"都不满足时执行\",{\"1\":{\"418\":1}}],[\"都不匹配时执行的代码块\",{\"1\":{\"415\":1}}],[\"都描述了一个通信操作\",{\"1\":{\"418\":1}}],[\"都为\",{\"1\":{\"414\":1}}],[\"都能提供强大的支持\",{\"1\":{\"373\":1}}],[\"都可以执行\",{\"1\":{\"527\":1}}],[\"都可以修改内部的值\",{\"1\":{\"396\":1}}],[\"都可以通过这些\",{\"1\":{\"200\":1,\"214\":1,\"229\":1,\"299\":1,\"306\":1,\"352\":1}}],[\"都可以使用相同的容器\",{\"1\":{\"71\":1}}],[\"k\",{\"1\":{\"403\":6,\"455\":1,\"458\":2}}],[\"kubernetes\",{\"1\":{\"372\":1}}],[\"ken\",{\"1\":{\"370\":1}}],[\"keyed\",{\"1\":{\"550\":3}}],[\"keyword\",{\"1\":{\"549\":1,\"550\":4}}],[\"keyword=golang\",{\"1\":{\"549\":1,\"550\":1}}],[\"keys\",{\"1\":{\"403\":6}}],[\"key\",{\"1\":{\"132\":3,\"177\":3,\"179\":5,\"180\":6,\"182\":2,\"184\":6,\"185\":6,\"318\":3,\"417\":3,\"420\":1,\"422\":2,\"423\":5,\"449\":1,\"450\":2,\"492\":5,\"550\":8,\"551\":8,\"552\":7,\"598\":2,\"599\":1}}],[\"云计算\",{\"1\":{\"372\":1,\"373\":1}}],[\"微服务架构\",{\"1\":{\"372\":1,\"373\":1}}],[\"涵盖网络\",{\"1\":{\"371\":1}}],[\"涵盖了从基本数据类型到高级网络和并发编程的各个方面\",{\"1\":{\"135\":1}}],[\"丰富的标准库\",{\"1\":{\"371\":1}}],[\"轻松处理大量并发任务\",{\"1\":{\"371\":1}}],[\"轻量级\",{\"1\":{\"71\":1,\"378\":1,\"496\":1,\"505\":1}}],[\"简化了开发工作\",{\"1\":{\"538\":1}}],[\"简化代码\",{\"1\":{\"405\":1}}],[\"简单的说就是多个协程之间通信的管道\",{\"1\":{\"494\":1}}],[\"简单赋值\",{\"1\":{\"429\":1,\"431\":1}}],[\"简单易读\",{\"1\":{\"371\":1}}],[\"简洁性\",{\"1\":{\"397\":1}}],[\"简介与环境搭建\",{\"0\":{\"537\":1}}],[\"简介\",{\"0\":{\"128\":1}}],[\"旨在提高编程效率\",{\"1\":{\"370\":1}}],[\"设计理念主要有以下几个方面\",{\"1\":{\"397\":1}}],[\"设计\",{\"1\":{\"370\":1}}],[\"设置会话数据\",{\"1\":{\"590\":1}}],[\"设置一个\",{\"1\":{\"590\":1}}],[\"设置\",{\"1\":{\"584\":1,\"588\":1}}],[\"设置了有效期的\",{\"1\":{\"583\":1}}],[\"设置了工作目录\",{\"1\":{\"59\":1}}],[\"设置种子\",{\"1\":{\"306\":2}}],[\"设置日志格式和输出目标\",{\"1\":{\"299\":1}}],[\"设置日志记录的输出目标\",{\"1\":{\"297\":1}}],[\"设置日志记录的前缀\",{\"1\":{\"295\":1}}],[\"设置日志记录的标志\",{\"1\":{\"294\":1}}],[\"设置构建的目标阶段\",{\"1\":{\"65\":1}}],[\"设置构建时的网络模式\",{\"1\":{\"65\":1}}],[\"设置构建时的变量\",{\"1\":{\"65\":1}}],[\"设置执行后续命令的用户或\",{\"1\":{\"62\":1}}],[\"设置工作目录\",{\"1\":{\"59\":1,\"62\":1,\"67\":1}}],[\"设置环境变量的值\",{\"1\":{\"318\":1}}],[\"设置环境变量\",{\"1\":{\"58\":1,\"62\":1,\"318\":1}}],[\"首次发布于2009年\",{\"1\":{\"370\":1}}],[\"首先\",{\"1\":{\"540\":1,\"597\":1,\"602\":1}}],[\"首先需要了解切片的底层结构\",{\"1\":{\"363\":1}}],[\"首先进行数组定义\",{\"1\":{\"356\":1}}],[\"首先从本地主机上查找镜像是否存在\",{\"1\":{\"45\":1}}],[\"首先获取远程分支数据\",{\"1\":{\"36\":1}}],[\"背景\",{\"0\":{\"370\":1}}],[\"引入了变量的概念\",{\"1\":{\"456\":1}}],[\"引用传递的数据结构\",{\"1\":{\"368\":1}}],[\"引用传递\",{\"1\":{\"366\":1}}],[\"引擎\",{\"1\":{\"68\":1}}],[\"引擎读取\",{\"1\":{\"58\":1}}],[\"固定长度\",{\"1\":{\"365\":1}}],[\"答案依然是不会变化\",{\"1\":{\"363\":1}}],[\"答案是\",{\"1\":{\"396\":1}}],[\"答案是自动扩容的\",{\"1\":{\"361\":1}}],[\"答案是可以的\",{\"1\":{\"96\":1}}],[\"原子加操作\",{\"1\":{\"535\":1}}],[\"原子操作是不可分割的操作\",{\"1\":{\"535\":1}}],[\"原子操作确保对基本数据类型的操作是不可分割的\",{\"1\":{\"516\":1}}],[\"原子操作和通道\",{\"1\":{\"466\":1,\"519\":1}}],[\"原子操作\",{\"0\":{\"516\":1,\"535\":1},\"1\":{\"138\":1,\"461\":1}}],[\"原因是指针运算比较危险\",{\"1\":{\"437\":1}}],[\"原因如下\",{\"1\":{\"396\":1}}],[\"原数据也会发生改变\",{\"1\":{\"436\":1}}],[\"原切片中的指针指向的还是原来的底层数组\",{\"1\":{\"363\":1}}],[\"原切片底层的存储数组没有发生变化\",{\"1\":{\"363\":1}}],[\"+file\",{\"1\":{\"559\":1,\"560\":1}}],[\"++p\",{\"1\":{\"437\":1}}],[\"++i\",{\"1\":{\"437\":1}}],[\"+=\",{\"1\":{\"389\":1,\"404\":1,\"416\":1,\"429\":2,\"431\":1,\"465\":1}}],[\"+\",{\"1\":{\"362\":1,\"387\":1,\"390\":1,\"393\":1,\"399\":2,\"408\":1,\"425\":2,\"429\":1,\"431\":3,\"437\":1,\"455\":1,\"598\":1}}],[\"+v\",{\"1\":{\"200\":1,\"206\":1,\"208\":1,\"212\":1,\"214\":1,\"220\":1,\"222\":1,\"226\":1,\"229\":1,\"238\":1,\"447\":1}}],[\"作为安全的\",{\"1\":{\"595\":1}}],[\"作为信号传递的占位符\",{\"1\":{\"450\":1}}],[\"作为参数\",{\"0\":{\"436\":1}}],[\"作为参数传递\",{\"1\":{\"421\":1}}],[\"作为参数传递时会传递数组的副本\",{\"1\":{\"396\":1}}],[\"作为键来获取值\",{\"1\":{\"423\":1}}],[\"作为键\",{\"1\":{\"423\":1}}],[\"作为\",{\"1\":{\"423\":3,\"448\":1}}],[\"作为特殊情况\",{\"1\":{\"362\":1}}],[\"作为构建的起点\",{\"1\":{\"62\":1}}],[\"否则就会产生歧义\",{\"1\":{\"444\":1}}],[\"否则会无限递归\",{\"1\":{\"392\":1}}],[\"否则会直接报错\",{\"1\":{\"356\":1}}],[\"否则\",{\"1\":{\"362\":1,\"381\":1}}],[\"具体语法如下\",{\"1\":{\"456\":1}}],[\"具体的变量信息如下\",{\"1\":{\"455\":1}}],[\"具体数值可能会因编译器和平台而异\",{\"1\":{\"451\":1}}],[\"具体来说\",{\"1\":{\"451\":1}}],[\"具体如下\",{\"1\":{\"362\":1,\"387\":1}}],[\"具体底层就是同一个镜像的不同引用而已\",{\"1\":{\"87\":1}}],[\"那要是我将该指针指向另外一个新切片呢\",{\"1\":{\"363\":1}}],[\"那到底是可以自动扩容呢\",{\"1\":{\"361\":1}}],[\"那么第一个操作的结果对于第二个操作是可见的\",{\"1\":{\"511\":1}}],[\"那么操作\",{\"1\":{\"509\":1}}],[\"那么这个返回值会被丢弃\",{\"1\":{\"494\":1}}],[\"那么这些更改将会被暂存或者丢弃\",{\"1\":{\"11\":1}}],[\"那么常量即为不变的量\",{\"1\":{\"457\":1}}],[\"那么再来看下面的这个例子\",{\"1\":{\"445\":1}}],[\"那么再加一些需求\",{\"1\":{\"399\":1}}],[\"那么不同类型的数据可通过结构体来进行存储和组织\",{\"1\":{\"442\":1}}],[\"那么它将作为一个\",{\"1\":{\"415\":1}}],[\"那么要是求两个浮点数的和呢\",{\"1\":{\"399\":1}}],[\"那么要是减少切片长度呢\",{\"1\":{\"363\":1}}],[\"那么\",{\"1\":{\"356\":1}}],[\"那么docker\",{\"1\":{\"114\":1}}],[\"那么能不能直接删除正在运行中的容器呢\",{\"1\":{\"96\":1}}],[\"那么此时我们怎么进入容器呢\",{\"1\":{\"94\":1}}],[\"那么在删除该镜像之前\",{\"1\":{\"84\":1}}],[\"那么在部署容器的时候就需要一个一个进行部署\",{\"1\":{\"46\":1}}],[\"那么就必须要初始化所有字段\",{\"1\":{\"444\":1}}],[\"那么就必须先删除使用该镜像的所有容器\",{\"1\":{\"84\":1}}],[\"那么就会报错\",{\"1\":{\"84\":1}}],[\"那么会直接使用这些镜像\",{\"1\":{\"60\":1}}],[\"那么有没有一种更为简单的方法呢\",{\"1\":{\"46\":1}}],[\"容量\",{\"1\":{\"361\":1,\"363\":1,\"468\":1}}],[\"容器名称重启\",{\"1\":{\"123\":1}}],[\"容器名称停止\",{\"1\":{\"122\":1}}],[\"容器中的端口直接映射到某个指定的网络\",{\"1\":{\"120\":1}}],[\"容器中的\",{\"1\":{\"117\":1,\"119\":1}}],[\"容器在生产环境中的适用性和可靠性\",{\"1\":{\"113\":1}}],[\"容器错误日志\",{\"0\":{\"99\":1}}],[\"容器别名及操作\",{\"0\":{\"98\":1}}],[\"容器进行导出\",{\"1\":{\"95\":1}}],[\"容器导出和导入\",{\"0\":{\"95\":1}}],[\"容器会停止运行\",{\"1\":{\"94\":1}}],[\"容器id\",{\"1\":{\"94\":2}}],[\"容器重启\",{\"1\":{\"93\":1}}],[\"容器停止\",{\"1\":{\"93\":1}}],[\"容器停止和重启\",{\"0\":{\"93\":1}}],[\"容器再启动\",{\"0\":{\"92\":1}}],[\"容器查看\",{\"0\":{\"91\":1}}],[\"容器启动后会进入后台\",{\"1\":{\"94\":1}}],[\"容器启动\",{\"0\":{\"90\":1}}],[\"容器内容有变化\",{\"1\":{\"88\":1}}],[\"容器时\",{\"1\":{\"87\":1}}],[\"容器上进行修改\",{\"1\":{\"85\":1}}],[\"容器包含了运行应用程序所需的所有组件\",{\"1\":{\"78\":1}}],[\"容器是对镜像的一个实例化\",{\"1\":{\"79\":1}}],[\"容器是\",{\"1\":{\"78\":1}}],[\"容器是代码的隔离环境\",{\"1\":{\"78\":1}}],[\"容器是完全使用沙箱机制\",{\"1\":{\"70\":1}}],[\"容器可以在任何支持docker的环境中运行\",{\"1\":{\"71\":1}}],[\"容器化应用程序\",{\"1\":{\"71\":1}}],[\"容器建立了互联关系\",{\"1\":{\"56\":1}}],[\"容器和数据进行分离\",{\"1\":{\"104\":1}}],[\"容器和\",{\"1\":{\"56\":1}}],[\"容器和本地以及网络中的端口进行连接起来\",{\"1\":{\"53\":1}}],[\"容器命名\",{\"0\":{\"54\":1}}],[\"容器互联\",{\"0\":{\"53\":1}}],[\"容器的导入\",{\"1\":{\"95\":1}}],[\"容器的导出\",{\"1\":{\"95\":1}}],[\"容器的相关操作\",{\"1\":{\"89\":1}}],[\"容器的所有内容\",{\"1\":{\"85\":1}}],[\"容器的\",{\"1\":{\"84\":1,\"96\":1,\"121\":1}}],[\"容器的说明\",{\"1\":{\"78\":1}}],[\"容器的名称\",{\"1\":{\"54\":1}}],[\"容器的端口映射\",{\"1\":{\"53\":1}}],[\"容器的过程集中管理起来\",{\"1\":{\"49\":1}}],[\"容器的快速部署\",{\"1\":{\"47\":1}}],[\"容器\",{\"0\":{\"77\":1,\"78\":1,\"79\":1},\"1\":{\"43\":3,\"78\":1,\"79\":2,\"84\":2,\"85\":2,\"95\":1,\"101\":1,\"119\":1,\"122\":2,\"123\":1}}],[\"长度和容量\",{\"1\":{\"455\":1}}],[\"长度\",{\"1\":{\"361\":1,\"363\":1}}],[\"修改条件\",{\"1\":{\"531\":1}}],[\"修改共享资源\",{\"1\":{\"530\":1}}],[\"修改结构体字段\",{\"1\":{\"445\":2}}],[\"修改形参并不会对原值曹成变化\",{\"1\":{\"396\":1}}],[\"修改操作都是通过该指针来进行的\",{\"1\":{\"363\":1}}],[\"修改切片内的数组\",{\"1\":{\"362\":1}}],[\"修改\",{\"1\":{\"362\":1,\"363\":3}}],[\"修改数据\",{\"1\":{\"357\":1}}],[\"修改指定远程仓库的\",{\"1\":{\"35\":1}}],[\"列表初始化\",{\"1\":{\"356\":1}}],[\"列出当前仓库中已配置的远程仓库\",{\"1\":{\"35\":2}}],[\"除直接获取以外\",{\"1\":{\"550\":1}}],[\"除了\",{\"1\":{\"449\":1}}],[\"除了优先级外\",{\"1\":{\"431\":1}}],[\"除了使用\",{\"1\":{\"233\":1}}],[\"除法赋值\",{\"1\":{\"429\":1}}],[\"除法\",{\"1\":{\"425\":1,\"431\":1}}],[\"除此之外\",{\"1\":{\"353\":1}}],[\"休眠指定时间\",{\"1\":{\"344\":1}}],[\"定时器和计时器\",{\"0\":{\"343\":1}}],[\"定义路由\",{\"1\":{\"603\":1}}],[\"定义路由和处理函数\",{\"0\":{\"603\":1}}],[\"定义另一个路由组\",{\"1\":{\"576\":1}}],[\"定义查询参数路由\",{\"1\":{\"575\":1}}],[\"定义带路径参数的路由\",{\"1\":{\"557\":1}}],[\"定义接收查询参数的结构体\",{\"1\":{\"553\":1}}],[\"定义\",{\"1\":{\"504\":1,\"505\":1,\"506\":1}}],[\"定义一个路由组\",{\"1\":{\"576\":1}}],[\"定义一个路由\",{\"1\":{\"569\":1,\"570\":1,\"571\":1,\"603\":1}}],[\"定义一个路由和处理函数\",{\"1\":{\"541\":1}}],[\"定义一个数组的结构体即可\",{\"1\":{\"553\":1}}],[\"定义一个get请求的路由和处理函数\",{\"1\":{\"540\":1}}],[\"定义一个仅接受\",{\"1\":{\"455\":1}}],[\"定义一个结构体\",{\"1\":{\"444\":1,\"447\":1}}],[\"定义一个rectangle结构体实现shape接口\",{\"1\":{\"408\":1}}],[\"定义一个接口number\",{\"1\":{\"404\":1}}],[\"定义命令行参数时\",{\"1\":{\"232\":1}}],[\"定义命令行参数\",{\"1\":{\"231\":1}}],[\"定义构建时的变量\",{\"1\":{\"62\":1}}],[\"定义构成应用程序的服务\",{\"1\":{\"47\":1}}],[\"定义容器启动时要执行的默认命令\",{\"1\":{\"62\":2}}],[\"定义了容器启动时要执行的默认命令\",{\"1\":{\"59\":1}}],[\"定义启动命令\",{\"1\":{\"59\":1}}],[\"定义应用程序的环境\",{\"1\":{\"47\":1}}],[\"日上进行加减操作\",{\"1\":{\"340\":1}}],[\"日志格式和标志\",{\"0\":{\"293\":1}}],[\"日志级别\",{\"0\":{\"286\":1}}],[\"日志记录器方法\",{\"0\":{\"298\":1}}],[\"日志记录\",{\"1\":{\"141\":1}}],[\"月\",{\"1\":{\"340\":1}}],[\"经常会用到\",{\"1\":{\"330\":1}}],[\"经过以上步骤\",{\"1\":{\"8\":1}}],[\"结构\",{\"1\":{\"415\":1}}],[\"结构体参数\",{\"0\":{\"553\":1}}],[\"结构体字段直接存储在结构体内存块中\",{\"1\":{\"455\":1}}],[\"结构体可以包含指针字段\",{\"1\":{\"455\":1}}],[\"结构体是一个聚合数据类型\",{\"1\":{\"455\":1}}],[\"结构体是由一系列具有相同类型或不同类型的数据构成的数据集合\",{\"1\":{\"442\":1}}],[\"结构体的大小可能会更小\",{\"1\":{\"451\":1}}],[\"结构体的存储\",{\"0\":{\"451\":1}}],[\"结构体标签解释\",{\"0\":{\"448\":1}}],[\"结构体标签使用案例\",{\"1\":{\"447\":1}}],[\"结构体标签的具体使用如下\",{\"1\":{\"447\":1}}],[\"结构体标签\",{\"0\":{\"447\":1}}],[\"结构体做参数时\",{\"1\":{\"446\":1}}],[\"结构体指针做参数\",{\"1\":{\"446\":1}}],[\"结构体值做参数\",{\"1\":{\"446\":1}}],[\"结构体作为参数\",{\"0\":{\"446\":1}}],[\"结构体为例\",{\"1\":{\"445\":1}}],[\"结构体内部的字段名也遵循首字母大小写命名暴露的方式\",{\"1\":{\"443\":1}}],[\"结构体中不仅可以使用\",{\"1\":{\"443\":1}}],[\"结构体定义需要使用\",{\"1\":{\"443\":1}}],[\"结构体成员访问\",{\"1\":{\"430\":1}}],[\"结构体类型也能作为参数传递给函数\",{\"1\":{\"446\":1}}],[\"结构体类型\",{\"1\":{\"423\":1,\"455\":1}}],[\"结构体\",{\"0\":{\"442\":1},\"1\":{\"397\":1,\"421\":1}}],[\"结构体和\",{\"1\":{\"325\":1}}],[\"结论\",{\"0\":{\"373\":1}}],[\"结果是依然没有变化\",{\"1\":{\"363\":1}}],[\"结果为\",{\"1\":{\"356\":1}}],[\"结合\",{\"1\":{\"157\":1,\"418\":1,\"478\":1}}],[\"9\",{\"0\":{\"395\":1,\"442\":1},\"1\":{\"322\":2,\"363\":1}}],[\"99\",{\"1\":{\"306\":1}}],[\"排序或传递额外的信息\",{\"1\":{\"575\":1}}],[\"排序稳定性\",{\"0\":{\"324\":1}}],[\"排序函数\",{\"0\":{\"322\":1}}],[\"排序算法\",{\"1\":{\"137\":1}}],[\"改变\",{\"1\":{\"363\":3}}],[\"改变当前工作目录\",{\"1\":{\"320\":2}}],[\"改为你的\",{\"1\":{\"116\":1}}],[\"终止当前进程\",{\"1\":{\"319\":1}}],[\"终止当前进程并返回指定的状态码\",{\"1\":{\"319\":1}}],[\"递归\",{\"1\":{\"392\":1}}],[\"递归函数\",{\"0\":{\"392\":1}}],[\"递归创建目录\",{\"1\":{\"317\":1}}],[\"递归创建多层目录\",{\"1\":{\"317\":1}}],[\"递归删除目录\",{\"1\":{\"317\":1}}],[\"递归删除一个目录及其子目录\",{\"1\":{\"317\":1}}],[\"递归删除\",{\"1\":{\"25\":1}}],[\"重写\",{\"1\":{\"568\":1,\"579\":2}}],[\"重定向响应\",{\"1\":{\"569\":1,\"570\":1}}],[\"重定向是一种将客户端请求引导到另一个\",{\"1\":{\"568\":1}}],[\"重定向\",{\"0\":{\"568\":1},\"1\":{\"568\":1}}],[\"重新排列后的结构体可能占用更少的内存\",{\"1\":{\"451\":1}}],[\"重置指针回到数组的第一个元素\",{\"1\":{\"437\":1}}],[\"重命名一个文件\",{\"1\":{\"317\":1}}],[\"重启\",{\"1\":{\"123\":1}}],[\"重启web应用容器\",{\"0\":{\"123\":1}}],[\"检查参数是否存在\",{\"1\":{\"551\":1}}],[\"检查元素是否存在\",{\"1\":{\"450\":1}}],[\"检查\",{\"1\":{\"423\":1}}],[\"检查错误类型是否为临时错误或超时错误\",{\"1\":{\"315\":1}}],[\"检查镜像是否生效\",{\"1\":{\"44\":1}}],[\"记录日志\",{\"1\":{\"542\":1,\"546\":1}}],[\"记录\",{\"1\":{\"313\":1}}],[\"记录一条格式化的日志并调用\",{\"1\":{\"288\":1,\"290\":1}}],[\"记录一条格式化的日志\",{\"1\":{\"285\":1}}],[\"记录一条日志并调用\",{\"1\":{\"287\":1,\"289\":1}}],[\"记录一条日志\",{\"1\":{\"283\":1,\"284\":1,\"299\":1}}],[\"域名解析\",{\"0\":{\"313\":1}}],[\"类方法\",{\"1\":{\"396\":1}}],[\"类型数据的无缓冲通道\",{\"1\":{\"469\":1}}],[\"类型开关\",{\"1\":{\"415\":1}}],[\"类型安全\",{\"1\":{\"405\":1}}],[\"类型参数可以有约束条件\",{\"1\":{\"402\":1}}],[\"类型约束\",{\"0\":{\"402\":1}}],[\"类型的计数器\",{\"1\":{\"535\":1}}],[\"类型的管道变量\",{\"1\":{\"455\":1}}],[\"类型的数据\",{\"1\":{\"455\":1}}],[\"类型的变量\",{\"1\":{\"455\":1}}],[\"类型的字段必须对齐到\",{\"1\":{\"451\":2}}],[\"类型的\",{\"1\":{\"396\":1}}],[\"类型的零值是\",{\"1\":{\"421\":2}}],[\"类型的零值\",{\"1\":{\"356\":1}}],[\"类型进行错误处理\",{\"1\":{\"395\":1}}],[\"类型来实现按照姓名排序的需求\",{\"1\":{\"325\":1}}],[\"类型用于表示\",{\"1\":{\"312\":1}}],[\"类型\",{\"1\":{\"312\":1,\"397\":1,\"451\":2,\"455\":1}}],[\"类似与\",{\"1\":{\"410\":1}}],[\"类似的辅助函数\",{\"1\":{\"397\":1}}],[\"类似于栈\",{\"1\":{\"394\":1}}],[\"类似于\",{\"1\":{\"100\":1,\"396\":1,\"416\":1}}],[\"类似于代码仓库\",{\"1\":{\"78\":1}}],[\"类似于提供一个整体的虚拟环境\",{\"1\":{\"72\":1}}],[\"类似于copy\",{\"1\":{\"62\":1}}],[\"类似\",{\"1\":{\"70\":1,\"82\":1,\"114\":1,\"491\":1}}],[\"监听并在0\",{\"1\":{\"540\":1}}],[\"监听\",{\"1\":{\"310\":1}}],[\"监听指定网络地址的连接\",{\"1\":{\"309\":1}}],[\"地址解析为\",{\"1\":{\"312\":1}}],[\"地址处理\",{\"0\":{\"312\":1}}],[\"地址列表\",{\"1\":{\"308\":1}}],[\"地址\",{\"1\":{\"308\":1,\"310\":2,\"312\":1}}],[\"虽然在函数中也有所涉及\",{\"1\":{\"453\":1}}],[\"虽然在\",{\"1\":{\"437\":1}}],[\"虽然结构体字段可以是未导出的\",{\"1\":{\"397\":1}}],[\"虽然\",{\"1\":{\"306\":1,\"432\":1}}],[\"虽然docker\",{\"1\":{\"52\":1}}],[\"随机选择\",{\"1\":{\"527\":1}}],[\"随机数\",{\"0\":{\"306\":1}}],[\"随后才能删除该容器\",{\"1\":{\"96\":1}}],[\"随后就可以使用该镜像创建\",{\"1\":{\"85\":1}}],[\"π\",{\"1\":{\"303\":3}}],[\"余弦和正切值\",{\"1\":{\"303\":1}}],[\"三角函数\",{\"0\":{\"303\":1},\"1\":{\"306\":1}}],[\"四舍五入后的整数值\",{\"1\":{\"302\":1}}],[\"次方和\",{\"1\":{\"304\":1}}],[\"次方\",{\"1\":{\"302\":1}}],[\"返回查询参数信息\",{\"1\":{\"575\":1}}],[\"返回安全的\",{\"1\":{\"572\":1}}],[\"返回缩进格式的\",{\"1\":{\"572\":1}}],[\"返回渲染后的\",{\"1\":{\"572\":1}}],[\"返回纯文本字符串\",{\"1\":{\"572\":1}}],[\"返回一个空\",{\"1\":{\"552\":1}}],[\"返回一个空的上下文\",{\"1\":{\"487\":2}}],[\"返回解析后的数组数据\",{\"1\":{\"551\":3,\"553\":1}}],[\"返回结果\",{\"1\":{\"479\":1}}],[\"返回该类型的零值\",{\"1\":{\"421\":1}}],[\"返回值变量\",{\"1\":{\"453\":1}}],[\"返回值等\",{\"1\":{\"453\":1}}],[\"返回值以及高级用法\",{\"1\":{\"397\":1}}],[\"返回值类型\",{\"1\":{\"387\":1}}],[\"返回值\",{\"1\":{\"385\":1}}],[\"返回更新的切片\",{\"1\":{\"362\":1}}],[\"返回系统的网络接口列表\",{\"1\":{\"311\":1}}],[\"返回两个数中的最大值和最小值\",{\"1\":{\"305\":1}}],[\"返回大于或等于\",{\"1\":{\"302\":1}}],[\"返回\",{\"1\":{\"302\":3,\"303\":2,\"304\":2,\"572\":6}}],[\"返回浮点数的绝对值\",{\"1\":{\"302\":1}}],[\"返回自定义错误\",{\"0\":{\"260\":1}}],[\"计数\",{\"1\":{\"530\":2,\"534\":2}}],[\"计数读取\",{\"0\":{\"279\":1}}],[\"计算响应时间\",{\"1\":{\"543\":1}}],[\"计算两个时间之间的差值\",{\"1\":{\"339\":1}}],[\"计算数据的\",{\"1\":{\"168\":1,\"171\":1,\"174\":1}}],[\"限制读取\",{\"0\":{\"277\":1}}],[\"管道模式将任务分解为一系列的处理步骤\",{\"1\":{\"482\":1}}],[\"管道中的值\",{\"1\":{\"455\":1}}],[\"管道类型\",{\"1\":{\"455\":1}}],[\"管道\",{\"0\":{\"272\":1,\"482\":1}}],[\"管理数据卷\",{\"0\":{\"112\":1}}],[\"管理的是\",{\"1\":{\"100\":1}}],[\"管理的是代码\",{\"1\":{\"100\":1}}],[\"向客户端返回渲染后的\",{\"1\":{\"603\":1}}],[\"向无缓冲通道发送一个值\",{\"1\":{\"518\":1}}],[\"向切片中添加元素需要使用\",{\"1\":{\"362\":1}}],[\"向\",{\"1\":{\"268\":1}}],[\"拷贝到一个\",{\"1\":{\"265\":1}}],[\"拷贝远程仓库时我们需要知道远程仓库的url地址\",{\"1\":{\"7\":1}}],[\"拷贝远程仓库\",{\"0\":{\"7\":1}}],[\"错误链\",{\"0\":{\"384\":1}}],[\"错误值被用来指示函数执行过程中是否出现了问题\",{\"1\":{\"381\":1}}],[\"错误接口\",{\"0\":{\"380\":1}}],[\"错误\",{\"0\":{\"379\":1},\"1\":{\"379\":1}}],[\"错误响应\",{\"1\":{\"260\":1}}],[\"错误处理\",{\"0\":{\"259\":1,\"315\":1,\"395\":1},\"1\":{\"329\":1,\"395\":1,\"538\":1,\"546\":1}}],[\"错误输出\",{\"0\":{\"241\":1}}],[\"发送回服务器\",{\"1\":{\"582\":1,\"586\":1}}],[\"发送重定向响应\",{\"1\":{\"572\":1}}],[\"发送原始二进制数据\",{\"1\":{\"572\":1}}],[\"发送文件到客户端\",{\"1\":{\"572\":2}}],[\"发送完成信号\",{\"1\":{\"533\":1}}],[\"发送任务到\",{\"1\":{\"479\":1,\"481\":1}}],[\"发送数据时执行\",{\"1\":{\"522\":1}}],[\"发送数据\",{\"1\":{\"475\":1,\"501\":1,\"524\":1}}],[\"发送数据到通道\",{\"1\":{\"470\":1,\"499\":1}}],[\"发送者阻塞直到有接收者\",{\"1\":{\"472\":1}}],[\"发送和接收\",{\"0\":{\"499\":1}}],[\"发送和接收数据\",{\"0\":{\"470\":1}}],[\"发送和接收操作可以是阻塞的\",{\"1\":{\"468\":1}}],[\"发送信号\",{\"1\":{\"450\":1}}],[\"发起一个\",{\"1\":{\"249\":1,\"250\":1}}],[\"发起\",{\"0\":{\"249\":1,\"250\":1}}],[\"发生冲突的文件产生冲突\",{\"1\":{\"16\":1}}],[\"方便对不同版本的api进行管理\",{\"1\":{\"576\":1}}],[\"方便扩展功能\",{\"1\":{\"538\":1}}],[\"方便维护\",{\"1\":{\"415\":1}}],[\"方便用户部署和后续维护\",{\"1\":{\"49\":1}}],[\"方法正确加载了模板文件的路径\",{\"1\":{\"606\":1}}],[\"方法渲染模板\",{\"1\":{\"605\":1}}],[\"方法和路径\",{\"1\":{\"575\":1}}],[\"方法和函数的却别\",{\"1\":{\"396\":1}}],[\"方法和函数的区别\",{\"1\":{\"396\":1}}],[\"方法匹配所有\",{\"1\":{\"575\":1}}],[\"方法获取参数的值\",{\"1\":{\"575\":1}}],[\"方法获取数组参数\",{\"1\":{\"551\":2}}],[\"方法并设置状态码为\",{\"1\":{\"570\":1}}],[\"方法设置自定义的响应头\",{\"1\":{\"567\":1}}],[\"方法可以实现这种重定向\",{\"1\":{\"571\":1}}],[\"方法可以实现临时重定向\",{\"1\":{\"569\":1}}],[\"方法可以返回文件\",{\"1\":{\"566\":1}}],[\"方法可以返回纯文本格式的响应数据\",{\"1\":{\"565\":1}}],[\"方法可以返回\",{\"1\":{\"562\":1,\"563\":1,\"564\":1}}],[\"方法可以自定义类型的字符串表示方式\",{\"1\":{\"240\":1}}],[\"方法处理整个多部分表单请求\",{\"1\":{\"558\":1}}],[\"方法来获取请求中的查询参数\",{\"1\":{\"575\":1}}],[\"方法来获取文件\",{\"1\":{\"558\":1}}],[\"方法来对服务器上的资源进行操作\",{\"1\":{\"574\":1}}],[\"方法来创建切片\",{\"1\":{\"361\":1}}],[\"方法在处理函数中获取\",{\"1\":{\"557\":1}}],[\"方法在绑定失败后会自动返回\",{\"1\":{\"553\":1}}],[\"方法直接获取单个表单字段的值\",{\"1\":{\"556\":1}}],[\"方法将其解析为结构体或使用\",{\"1\":{\"556\":1}}],[\"方法将请求体中的\",{\"1\":{\"555\":1}}],[\"方法将嵌套查询参数解析为\",{\"1\":{\"552\":2}}],[\"方法不能直接解析\",{\"1\":{\"552\":1}}],[\"方法拥有接收者\",{\"1\":{\"396\":1}}],[\"方法是定义在类型上的函数\",{\"1\":{\"396\":1}}],[\"方法的接收者分为\",{\"1\":{\"396\":1}}],[\"方法的类型都可以被视为一个错误\",{\"1\":{\"380\":1}}],[\"方法的三个参数依次为\",{\"1\":{\"361\":1}}],[\"方法进行初始化时\",{\"1\":{\"361\":1}}],[\"方法\",{\"0\":{\"396\":1},\"1\":{\"323\":1,\"362\":1,\"396\":1,\"407\":1,\"408\":1,\"450\":1,\"551\":1}}],[\"浮点数\",{\"1\":{\"238\":1}}],[\"根据用户名和密码从预定义的\",{\"1\":{\"599\":1}}],[\"根据实际的数据需求\",{\"1\":{\"453\":1}}],[\"根据传进来的变量动态的控制数据类型\",{\"1\":{\"399\":1}}],[\"根据具体需求选择合适的方法来处理和返回响应数据\",{\"1\":{\"572\":1}}],[\"根据具体需求\",{\"1\":{\"260\":1,\"280\":1,\"315\":1}}],[\"根据指定格式输出参数\",{\"1\":{\"237\":1}}],[\"根据该指令通常可以判断当前工作目录中的文件状态\",{\"1\":{\"21\":1}}],[\"必先利其器\",{\"1\":{\"376\":1}}],[\"必选参数\",{\"1\":{\"235\":1}}],[\"必须在操作\",{\"1\":{\"509\":1}}],[\"必须调用\",{\"1\":{\"231\":1}}],[\"必须删除所有使用该镜像的容器\",{\"1\":{\"84\":1}}],[\"非阻塞的通道操作\",{\"0\":{\"526\":1}}],[\"非\",{\"1\":{\"427\":1}}],[\"非常方便\",{\"1\":{\"378\":1}}],[\"非命令行参数\",{\"0\":{\"233\":1}}],[\"非对称加密\",{\"1\":{\"185\":1}}],[\"非对称加密算法\",{\"1\":{\"141\":1}}],[\"函数完成后通过通道通知\",{\"1\":{\"533\":1}}],[\"函数模拟工作\",{\"1\":{\"532\":1,\"534\":1}}],[\"函数设置条件变量\",{\"1\":{\"531\":1}}],[\"函数等待条件变量满足条件\",{\"1\":{\"531\":1}}],[\"函数等对切片进行操作\",{\"1\":{\"366\":1}}],[\"函数结束时减少\",{\"1\":{\"530\":1,\"534\":1}}],[\"函数结束时解锁\",{\"1\":{\"530\":1}}],[\"函数使用互斥锁来确保对共享资源的安全访问\",{\"1\":{\"530\":1}}],[\"函数体\",{\"1\":{\"488\":1}}],[\"函数处理来自\",{\"1\":{\"481\":1}}],[\"函数从通道\",{\"1\":{\"475\":1,\"501\":1}}],[\"函数向通道\",{\"1\":{\"475\":1,\"501\":1}}],[\"函数创建通道\",{\"1\":{\"498\":1}}],[\"函数创建\",{\"1\":{\"469\":1}}],[\"函数关闭通道\",{\"1\":{\"468\":1}}],[\"函数类型赋值\",{\"1\":{\"455\":1}}],[\"函数类型声明\",{\"1\":{\"455\":1}}],[\"函数类型\",{\"1\":{\"455\":1}}],[\"函数实例化\",{\"1\":{\"444\":1}}],[\"函数和包含切片的结构体不能作为键\",{\"1\":{\"421\":1}}],[\"函数只能用于可比较的类型\",{\"1\":{\"402\":1}}],[\"函数是最高频被使用到的技术点\",{\"1\":{\"397\":1}}],[\"函数的主要特性和用法示例\",{\"1\":{\"397\":1}}],[\"函数的定义\",{\"1\":{\"385\":1}}],[\"函数参数的传递过程中\",{\"1\":{\"396\":1}}],[\"函数作为返回值\",{\"1\":{\"393\":1}}],[\"函数作为参数\",{\"1\":{\"393\":1}}],[\"函数作为参数和返回值\",{\"0\":{\"393\":1}}],[\"函数可以返回另一个函数\",{\"1\":{\"393\":1}}],[\"函数可以返回多个值\",{\"1\":{\"388\":1}}],[\"函数可以作为参数传递给其他函数\",{\"1\":{\"393\":1}}],[\"函数可以调用自身来解决问题\",{\"1\":{\"392\":1}}],[\"函数可以是匿名的\",{\"1\":{\"390\":1}}],[\"函数可以接收变长参数列表\",{\"1\":{\"389\":1}}],[\"函数可以自定义程序的使用说明\",{\"1\":{\"234\":1}}],[\"函数名称\",{\"1\":{\"387\":1}}],[\"函数调用\",{\"1\":{\"387\":1}}],[\"函数定义\",{\"1\":{\"387\":1}}],[\"函数定义使用\",{\"1\":{\"387\":1}}],[\"函数定义与调用\",{\"0\":{\"387\":1}}],[\"函数方法\",{\"0\":{\"385\":1}}],[\"函数外部切片受影响\",{\"1\":{\"367\":1}}],[\"函数外部数组不受影响\",{\"1\":{\"367\":1}}],[\"函数内部修改切片\",{\"1\":{\"367\":1}}],[\"函数内部修改数组\",{\"1\":{\"367\":1}}],[\"函数来删除指定的键值对\",{\"1\":{\"421\":1}}],[\"函数来创建\",{\"1\":{\"420\":1}}],[\"函数来创建一个新的错误\",{\"1\":{\"382\":1}}],[\"函数来实现错误链\",{\"1\":{\"384\":1}}],[\"函数来完成\",{\"1\":{\"362\":1}}],[\"函数来获取\",{\"1\":{\"233\":1,\"421\":1}}],[\"函数语法如下\",{\"1\":{\"362\":1}}],[\"函数用于打开文件\",{\"1\":{\"381\":1}}],[\"函数用于返回格式化后的字符串\",{\"1\":{\"242\":1}}],[\"函数用于解析命令行参数\",{\"1\":{\"231\":1}}],[\"函数中的数据类型参数不难理解\",{\"1\":{\"361\":1}}],[\"函数中\",{\"1\":{\"238\":1}}],[\"函数\",{\"0\":{\"386\":1},\"1\":{\"231\":1,\"362\":2,\"397\":1,\"444\":2,\"479\":1,\"530\":1,\"532\":1,\"533\":1,\"534\":1}}],[\"元素\",{\"1\":{\"229\":1}}],[\"元素名称\",{\"1\":{\"225\":1}}],[\"令牌\",{\"1\":{\"228\":1}}],[\"逐步处理\",{\"1\":{\"228\":1}}],[\"逐行读取和处理\",{\"0\":{\"196\":1}}],[\"逐行读取\",{\"1\":{\"189\":1}}],[\"逐行读取文本\",{\"1\":{\"148\":1}}],[\"字面量简写形式实例化\",{\"1\":{\"444\":1}}],[\"字面量直接实例化\",{\"1\":{\"444\":1}}],[\"字段和方法\",{\"1\":{\"397\":1}}],[\"字节边界\",{\"1\":{\"451\":1}}],[\"字节且在\",{\"1\":{\"451\":1}}],[\"字节的边界\",{\"1\":{\"451\":3}}],[\"字节的数据\",{\"1\":{\"264\":1}}],[\"字节切片解码为\",{\"1\":{\"206\":1,\"220\":1}}],[\"字节切片\",{\"1\":{\"204\":1,\"218\":1}}],[\"字符串类型\",{\"1\":{\"454\":1}}],[\"字符串转换为整数\",{\"1\":{\"326\":1}}],[\"字符串\",{\"1\":{\"238\":1,\"416\":1,\"417\":1,\"421\":1}}],[\"字符串和基本数据类型之间的转换\",{\"1\":{\"137\":1}}],[\"逗号分隔值\",{\"1\":{\"186\":1}}],[\"验证其完整性和真实性\",{\"1\":{\"593\":1}}],[\"验证\",{\"1\":{\"185\":1,\"593\":1}}],[\"验证该网络下的两个容器建立了联系\",{\"1\":{\"56\":1}}],[\"签名\",{\"1\":{\"185\":1,\"592\":1}}],[\"签名和验证\",{\"0\":{\"185\":1}}],[\"60\",{\"1\":{\"351\":2}}],[\"60750\",{\"1\":{\"44\":1}}],[\"64\",{\"1\":{\"327\":1,\"328\":1,\"455\":1}}],[\"6\",{\"0\":{\"181\":1,\"199\":1,\"242\":1,\"257\":1,\"277\":1,\"298\":1,\"306\":1,\"313\":1,\"347\":1,\"385\":1,\"392\":1,\"484\":1,\"485\":1,\"535\":1,\"601\":1},\"1\":{\"322\":2,\"363\":1,\"393\":1,\"404\":2,\"416\":1,\"428\":1,\"480\":1}}],[\"加锁\",{\"1\":{\"530\":1,\"531\":2}}],[\"加锁规则\",{\"1\":{\"518\":1}}],[\"加\",{\"1\":{\"458\":1}}],[\"加性运算符\",{\"1\":{\"431\":1}}],[\"加法赋值\",{\"1\":{\"429\":1}}],[\"加法\",{\"1\":{\"425\":1,\"431\":1}}],[\"加载\",{\"1\":{\"602\":1,\"603\":1}}],[\"加载模板文件\",{\"0\":{\"602\":1}}],[\"加载值\",{\"1\":{\"422\":1}}],[\"加载一个时区位置\",{\"1\":{\"352\":1}}],[\"加载私钥\",{\"1\":{\"180\":1,\"185\":1}}],[\"加载公钥\",{\"1\":{\"180\":1,\"185\":1}}],[\"加密\",{\"1\":{\"180\":1}}],[\"加密和解密\",{\"0\":{\"180\":1}}],[\"加密器\",{\"1\":{\"177\":1}}],[\"加密算法\",{\"1\":{\"141\":1}}],[\"哈希\",{\"1\":{\"169\":1,\"172\":1,\"175\":1}}],[\"哈希值\",{\"1\":{\"168\":1,\"171\":1,\"174\":1}}],[\"哈希值保证了每个提交的唯一性\",{\"1\":{\"29\":1}}],[\"哈希值来标识每个提交\",{\"1\":{\"29\":1}}],[\"任何类型只要实现了接口定义的所有方法\",{\"1\":{\"408\":1}}],[\"任何实现了\",{\"1\":{\"380\":1}}],[\"任务调度等\",{\"1\":{\"165\":1}}],[\"任意两个开发者之间可以很容易的解决冲突\",{\"1\":{\"29\":1}}],[\"接收到数据时执行\",{\"1\":{\"522\":1}}],[\"接收数据并打印\",{\"1\":{\"475\":1,\"501\":1}}],[\"接收者阻塞直到有发送者\",{\"1\":{\"472\":1}}],[\"接收信号\",{\"1\":{\"450\":1}}],[\"接收操作或者仅仅是用于阻塞当前\",{\"1\":{\"418\":1}}],[\"接下来\",{\"1\":{\"165\":1,\"541\":1,\"577\":1}}],[\"接口类型\",{\"1\":{\"421\":1}}],[\"接口类型来表示错误\",{\"1\":{\"379\":1}}],[\"接口是go语言中实现多态和抽象的关键机制之一\",{\"1\":{\"412\":1}}],[\"接口是一个只包含一个方法的接口\",{\"1\":{\"380\":1}}],[\"接口可以通过组合多个接口来定义新的接口\",{\"1\":{\"412\":1}}],[\"接口组合\",{\"0\":{\"412\":1}}],[\"接口断言\",{\"0\":{\"411\":1}}],[\"接口变量可以通过类型断言来获取其底层具体类型的值\",{\"1\":{\"411\":1}}],[\"接口变量可以存储任何实现了接口的类型的值\",{\"1\":{\"409\":1}}],[\"接口变量\",{\"0\":{\"409\":1}}],[\"接口实现\",{\"0\":{\"408\":1}}],[\"接口定义使用\",{\"1\":{\"407\":1}}],[\"接口定义\",{\"0\":{\"407\":1}}],[\"接口定义了对象可以响应的方法集合\",{\"1\":{\"406\":1}}],[\"接口等\",{\"1\":{\"397\":1}}],[\"接口的集合进行排序\",{\"1\":{\"325\":1}}],[\"接口\",{\"0\":{\"211\":1,\"212\":1,\"406\":1},\"1\":{\"161\":1,\"242\":1,\"323\":1,\"397\":1,\"406\":1}}],[\"接口来使用\",{\"1\":{\"161\":1}}],[\"轮转\",{\"1\":{\"165\":1}}],[\"轮转操作\",{\"1\":{\"165\":1}}],[\"负号\",{\"1\":{\"431\":1}}],[\"负数\",{\"1\":{\"165\":1}}],[\"负责构建\",{\"1\":{\"43\":1}}],[\"循环结合使用\",{\"1\":{\"418\":1}}],[\"循环没有括号\",{\"1\":{\"416\":1}}],[\"循环的三个部分\",{\"1\":{\"416\":1}}],[\"循环的条件判断表达式\",{\"1\":{\"416\":1}}],[\"循环来实现无限循环\",{\"1\":{\"416\":1}}],[\"循环模拟\",{\"1\":{\"416\":1}}],[\"循环开始前执行的初始化语句\",{\"1\":{\"416\":1}}],[\"循环体必须用大括号\",{\"1\":{\"416\":1}}],[\"循环体\",{\"1\":{\"416\":2}}],[\"循环\",{\"1\":{\"416\":5}}],[\"循环有三种基本形式\",{\"1\":{\"416\":1}}],[\"循环是一种常见的控制流结构\",{\"1\":{\"416\":1}}],[\"循环为每个节点赋值\",{\"1\":{\"165\":1}}],[\"循环初始化环形链表的每个节点的值\",{\"1\":{\"165\":1}}],[\"循环遍历链表\",{\"1\":{\"163\":1}}],[\"个\",{\"1\":{\"530\":1,\"532\":1,\"534\":1,\"535\":1}}],[\"个类型为\",{\"1\":{\"455\":1}}],[\"个填充字节\",{\"1\":{\"451\":2}}],[\"个字节\",{\"1\":{\"451\":3}}],[\"个元素\",{\"1\":{\"362\":3}}],[\"个元素的环形链表\",{\"1\":{\"165\":1}}],[\"个位置\",{\"1\":{\"165\":1}}],[\"个服务\",{\"1\":{\"49\":1}}],[\"初始大小一般较小\",{\"1\":{\"496\":1}}],[\"初始\",{\"1\":{\"396\":8}}],[\"初始长度为\",{\"1\":{\"164\":1}}],[\"初始化一个新的go模块\",{\"1\":{\"540\":1}}],[\"初始化\",{\"1\":{\"487\":1,\"588\":1,\"590\":1}}],[\"初始化单个变量\",{\"1\":{\"456\":1}}],[\"初始化列表中的元素个数超过数组声明的长度\",{\"1\":{\"356\":1}}],[\"初始化环形链表的值\",{\"1\":{\"164\":1}}],[\"初始化完成后提示\",{\"1\":{\"8\":1}}],[\"初始化仓库\",{\"1\":{\"8\":1}}],[\"形成一个闭环\",{\"1\":{\"164\":1}}],[\"环形链表是一种特殊的链表\",{\"1\":{\"164\":1}}],[\"环形链表\",{\"0\":{\"164\":1}}],[\"环境检查\",{\"1\":{\"375\":1}}],[\"环境\",{\"1\":{\"374\":1}}],[\"环境配置\",{\"0\":{\"374\":1}}],[\"环境下执行\",{\"1\":{\"103\":1}}],[\"环境变量以及进程等操作系统相关的资源和信息\",{\"1\":{\"320\":1}}],[\"环境变量管理\",{\"1\":{\"316\":1}}],[\"环境变量获取等\",{\"1\":{\"136\":1}}],[\"环境变量和配置文件\",{\"1\":{\"52\":1}}],[\"环境变量\",{\"0\":{\"318\":1},\"1\":{\"51\":1}}],[\"环境变量等\",{\"1\":{\"51\":1}}],[\"获取会话数据\",{\"1\":{\"590\":1}}],[\"获取单个查询参数并设置默认值\",{\"1\":{\"575\":1}}],[\"获取单个查询参数\",{\"1\":{\"575\":1}}],[\"获取查询参数\",{\"1\":{\"575\":1}}],[\"获取指定用户\",{\"1\":{\"574\":1}}],[\"获取指定前缀的所有查询参数并解析为\",{\"1\":{\"552\":1}}],[\"获取信息\",{\"1\":{\"574\":1}}],[\"获取信号量\",{\"1\":{\"532\":1}}],[\"获取路径参数\",{\"1\":{\"557\":1}}],[\"获取参数\",{\"1\":{\"552\":1}}],[\"获取数组\",{\"1\":{\"551\":1}}],[\"获取并判断参数是否存在\",{\"1\":{\"550\":1,\"551\":1}}],[\"获取变量的地址需要使用\",{\"1\":{\"434\":1}}],[\"获取变量地址\",{\"0\":{\"434\":1}}],[\"获取map长度\",{\"1\":{\"421\":1}}],[\"获取对应键的值\",{\"1\":{\"421\":1}}],[\"获取\",{\"1\":{\"348\":1,\"552\":1,\"584\":1,\"588\":1,\"590\":1}}],[\"获取当前时间\",{\"0\":{\"332\":1},\"1\":{\"333\":1}}],[\"获取当前工作目录\",{\"1\":{\"320\":2}}],[\"获取当前进程id和父进程id\",{\"1\":{\"319\":1}}],[\"获取当前进程的父进程id\",{\"1\":{\"319\":1}}],[\"获取当前进程的id\",{\"1\":{\"319\":1}}],[\"获取主机名\",{\"1\":{\"320\":2}}],[\"获取环境变量\",{\"1\":{\"318\":1}}],[\"获取环境变量的值\",{\"1\":{\"318\":1}}],[\"获取非命令行参数\",{\"1\":{\"233\":1}}],[\"获取下一个节点\",{\"1\":{\"163\":1}}],[\"获取链表的最后一个元素\",{\"1\":{\"163\":1}}],[\"获取链表的第一个元素\",{\"1\":{\"163\":1}}],[\"获取远程分支数据\",{\"1\":{\"36\":1}}],[\"遍历时的顺序不一定与插入顺序相同\",{\"1\":{\"421\":1}}],[\"遍历\",{\"1\":{\"419\":1,\"421\":1,\"422\":1}}],[\"遍历输出这个数组\",{\"1\":{\"356\":1}}],[\"遍历环形链表的所有节点\",{\"1\":{\"165\":1}}],[\"遍历环形链表\",{\"1\":{\"165\":1}}],[\"遍历链表\",{\"1\":{\"163\":1}}],[\"遍历链表并打印元素\",{\"1\":{\"162\":1}}],[\"遍历队列\",{\"1\":{\"160\":1}}],[\"链表\",{\"0\":{\"162\":1}}],[\"弹出最小元素\",{\"1\":{\"161\":1}}],[\"jwt\",{\"0\":{\"591\":1,\"592\":1,\"593\":1,\"594\":1},\"1\":{\"580\":3,\"590\":2,\"591\":7,\"592\":3,\"593\":7,\"594\":2,\"596\":1,\"597\":2,\"598\":11,\"599\":8,\"600\":1}}],[\"john\",{\"1\":{\"544\":1,\"584\":1,\"588\":1,\"590\":1,\"592\":1}}],[\"job\",{\"1\":{\"479\":2,\"481\":1,\"484\":2}}],[\"jobs\",{\"1\":{\"479\":7,\"481\":8,\"484\":8}}],[\"j++\",{\"1\":{\"479\":1,\"481\":1,\"484\":1}}],[\"javascript\",{\"1\":{\"583\":1}}],[\"java\",{\"1\":{\"385\":1,\"388\":1,\"396\":3,\"410\":1,\"415\":1,\"444\":1}}],[\"jan\",{\"1\":{\"335\":1}}],[\"jetbrains\",{\"1\":{\"378\":1}}],[\"js\",{\"1\":{\"258\":1}}],[\"jsonp\",{\"1\":{\"572\":3}}],[\"jsonstr\",{\"1\":{\"447\":2}}],[\"jsondata\",{\"1\":{\"447\":2}}],[\"json序列化\",{\"1\":{\"447\":1}}],[\"json\",{\"0\":{\"201\":1,\"202\":1,\"205\":1,\"210\":1,\"555\":1,\"562\":1},\"1\":{\"44\":1,\"140\":2,\"201\":3,\"203\":3,\"204\":3,\"206\":3,\"208\":4,\"209\":4,\"211\":4,\"212\":4,\"214\":5,\"250\":1,\"447\":8,\"448\":6,\"449\":1,\"540\":1,\"543\":1,\"544\":3,\"545\":1,\"550\":1,\"551\":3,\"552\":2,\"553\":5,\"554\":1,\"555\":4,\"556\":2,\"557\":1,\"559\":2,\"560\":1,\"561\":1,\"562\":5,\"567\":1,\"572\":7,\"574\":4,\"575\":1,\"576\":4,\"580\":1,\"590\":4,\"591\":2,\"595\":1,\"598\":2,\"599\":1}}],[\"j\",{\"1\":{\"161\":7,\"323\":7,\"325\":5,\"430\":1,\"436\":3,\"455\":2,\"458\":2,\"479\":7,\"481\":5,\"484\":6}}],[\"优缺点对比\",{\"1\":{\"378\":1}}],[\"优先级\",{\"1\":{\"161\":1}}],[\"优点\",{\"1\":{\"29\":1}}],[\"值结构体不能\",{\"1\":{\"446\":1}}],[\"值的类型\",{\"1\":{\"421\":1}}],[\"值接收者\",{\"1\":{\"396\":2}}],[\"值传递的数据结构\",{\"1\":{\"368\":1}}],[\"值传递\",{\"1\":{\"365\":1}}],[\"值\",{\"1\":{\"161\":1,\"455\":1}}],[\"堆是一种优先队列\",{\"1\":{\"161\":1}}],[\"堆\",{\"0\":{\"161\":1}}],[\"输入\",{\"0\":{\"239\":1}}],[\"输入输出工具\",{\"1\":{\"139\":1}}],[\"输出可能是\",{\"1\":{\"451\":1}}],[\"输出集合中的元素\",{\"1\":{\"450\":1}}],[\"输出的仍然是上述结果\",{\"1\":{\"396\":1}}],[\"输出到不同的目标\",{\"0\":{\"296\":1}}],[\"输出变量类型\",{\"1\":{\"238\":1}}],[\"输出参数并添加换行符\",{\"1\":{\"237\":1}}],[\"输出参数\",{\"1\":{\"237\":1}}],[\"输出解析后的参数\",{\"1\":{\"231\":1}}],[\"输出\",{\"1\":{\"160\":1,\"161\":1,\"237\":3,\"238\":2,\"240\":1,\"278\":1,\"280\":1,\"322\":1,\"327\":2,\"328\":2,\"329\":2,\"356\":1,\"357\":8,\"362\":13,\"363\":6,\"367\":4,\"396\":6,\"401\":2,\"402\":2,\"403\":1,\"404\":2,\"423\":1,\"435\":2,\"436\":2,\"445\":6,\"446\":4,\"447\":2,\"450\":1}}],[\"出队操作\",{\"1\":{\"160\":1}}],[\"入队操作\",{\"1\":{\"160\":1}}],[\"入门基础\",{\"0\":{\"42\":1}}],[\"双向链表实现的列表\",{\"1\":{\"160\":1}}],[\"队列\",{\"0\":{\"160\":1}}],[\"切片本身包含了一个指向底层数组的指针\",{\"1\":{\"455\":1}}],[\"切片本身并没有提供直接删除元素的接口\",{\"1\":{\"362\":1}}],[\"切片类型\",{\"1\":{\"455\":1}}],[\"切片索引\",{\"1\":{\"430\":1}}],[\"切片是引用类型\",{\"1\":{\"455\":1}}],[\"切片是一个动态数组\",{\"1\":{\"455\":1}}],[\"切片是动态长度\",{\"1\":{\"368\":1}}],[\"切片是对数组的一层轻量级封装\",{\"1\":{\"366\":1}}],[\"切片是对数组的抽象\",{\"1\":{\"353\":1}}],[\"切片的长度\",{\"1\":{\"363\":2}}],[\"切片的值\",{\"1\":{\"363\":1}}],[\"切片的应用范围更加广泛\",{\"1\":{\"359\":1}}],[\"切片中的元素个数\",{\"1\":{\"363\":1}}],[\"切片不指定长度\",{\"1\":{\"361\":1}}],[\"切片初始化时的长度和容量\",{\"1\":{\"361\":1}}],[\"切片和数组的声明和初始化几乎类似\",{\"1\":{\"361\":1}}],[\"切片按照姓名进行排序\",{\"1\":{\"325\":1}}],[\"切片在作为函数参数传递时\",{\"1\":{\"366\":1}}],[\"切片在\",{\"1\":{\"159\":1}}],[\"切片\",{\"0\":{\"159\":1,\"359\":1},\"1\":{\"416\":1,\"417\":1,\"421\":1}}],[\"切换到前一个分支\",{\"1\":{\"11\":1}}],[\"切换到已有分支\",{\"1\":{\"11\":1}}],[\"切换分支\",{\"0\":{\"11\":1}}],[\"组合\",{\"1\":{\"157\":1}}],[\"组合来运行一个容器\",{\"1\":{\"45\":1}}],[\"写入管道\",{\"1\":{\"455\":1}}],[\"写入字符串\",{\"1\":{\"268\":1}}],[\"写入器\",{\"1\":{\"191\":1}}],[\"写入\",{\"0\":{\"190\":1},\"1\":{\"209\":1,\"223\":1}}],[\"写入数据\",{\"0\":{\"266\":1},\"1\":{\"157\":1}}],[\"写入一个字节切片\",{\"1\":{\"152\":1}}],[\"写入一个字符串\",{\"1\":{\"151\":1}}],[\"写入操作\",{\"0\":{\"149\":1}}],[\"及其详细说明\",{\"1\":{\"143\":1,\"166\":1,\"186\":1,\"201\":1,\"215\":1,\"244\":1,\"261\":1,\"281\":1,\"300\":1,\"331\":1}}],[\"能修改\",{\"1\":{\"463\":1}}],[\"能够帮助开发者编写高效且易于维护的并发程序\",{\"1\":{\"477\":1}}],[\"能够等待多个通道操作\",{\"1\":{\"476\":1}}],[\"能够正确地管理多个线程或\",{\"1\":{\"460\":1}}],[\"能够使得代码逻辑更加清晰\",{\"1\":{\"415\":1}}],[\"能够满足各种类型转换的需求\",{\"1\":{\"330\":1}}],[\"能够提高读写性能\",{\"1\":{\"143\":1}}],[\"能读懂即可\",{\"1\":{\"73\":1}}],[\"深入了解和熟练使用标准库可以极大地提升\",{\"1\":{\"142\":1}}],[\"覆盖了从基础操作到高级功能的多个领域\",{\"1\":{\"142\":1}}],[\"数值类型\",{\"1\":{\"454\":1}}],[\"数字平方\",{\"1\":{\"482\":1}}],[\"数字加倍\",{\"1\":{\"482\":1}}],[\"数字\",{\"1\":{\"421\":1}}],[\"数字签名和验证等\",{\"1\":{\"185\":1}}],[\"数组参数\",{\"0\":{\"551\":1}}],[\"数组元素直接存储在数组的内存块中\",{\"1\":{\"455\":1}}],[\"数组类型\",{\"1\":{\"455\":1}}],[\"数组在声明时需要指定固定的长度\",{\"1\":{\"365\":1}}],[\"数组作为一种数据类型\",{\"1\":{\"358\":1}}],[\"数组作为参数时\",{\"1\":{\"358\":1}}],[\"数组支持随机访问\",{\"1\":{\"357\":1}}],[\"数组声明的语法如下所示\",{\"1\":{\"355\":1}}],[\"数组是固定大小的连续内存块\",{\"1\":{\"455\":1}}],[\"数组是固定长度\",{\"1\":{\"368\":1}}],[\"数组是固定长度的数据结构\",{\"1\":{\"353\":1}}],[\"数组是在栈上分配内存的\",{\"1\":{\"365\":1}}],[\"数组是一整块连续内存\",{\"1\":{\"354\":1}}],[\"数组\",{\"0\":{\"354\":1},\"1\":{\"364\":1,\"430\":1}}],[\"数组和切片\",{\"0\":{\"353\":1},\"1\":{\"159\":1}}],[\"数学常量\",{\"1\":{\"301\":1}}],[\"数学运算\",{\"1\":{\"141\":1}}],[\"数据传输格式\",{\"1\":{\"595\":1}}],[\"数据传递\",{\"1\":{\"477\":1,\"606\":1}}],[\"数据量大\",{\"1\":{\"589\":1}}],[\"数据量小\",{\"1\":{\"589\":1}}],[\"数据容量\",{\"1\":{\"589\":1}}],[\"数据存储在服务器\",{\"1\":{\"589\":1}}],[\"数据存储在客户端的浏览器中\",{\"1\":{\"583\":1}}],[\"数据易被篡改\",{\"1\":{\"589\":1}}],[\"数据就会被删除\",{\"1\":{\"587\":1}}],[\"数据都是存在内存中的二进制序列\",{\"1\":{\"456\":1}}],[\"数据库映射\",{\"1\":{\"447\":1}}],[\"数据处理\",{\"1\":{\"372\":1}}],[\"数据类型实际上是为了优化内存空间的占用而提出的概念\",{\"1\":{\"453\":1}}],[\"数据类型用于声明变量\",{\"1\":{\"453\":1}}],[\"数据类型及变量\",{\"0\":{\"452\":1}}],[\"数据类型的小节中\",{\"1\":{\"396\":1}}],[\"数据类型\",{\"0\":{\"453\":1},\"1\":{\"361\":1}}],[\"数据进行编码和解码的功能\",{\"1\":{\"201\":1,\"215\":1}}],[\"数据\",{\"0\":{\"555\":1},\"1\":{\"200\":1,\"208\":1,\"209\":1,\"214\":1,\"222\":1,\"223\":1,\"229\":1,\"467\":1,\"468\":1,\"572\":3,\"588\":2,\"590\":2}}],[\"数据解析到一个结构体中\",{\"1\":{\"555\":1}}],[\"数据解析到结构体\",{\"0\":{\"199\":1}}],[\"数据解析为结构体\",{\"1\":{\"200\":1}}],[\"数据的编码和解码\",{\"1\":{\"140\":2}}],[\"数据序列化和编码\",{\"0\":{\"140\":1}}],[\"数据流处理等\",{\"1\":{\"139\":1}}],[\"数据结构和算法\",{\"0\":{\"137\":1}}],[\"数据管理\",{\"1\":{\"105\":1}}],[\"数据卷提供了一种方便和灵活的方式来处理容器中的持久化数据需求\",{\"1\":{\"113\":1}}],[\"数据卷的常见应用场景\",{\"0\":{\"111\":1}}],[\"数据卷的特点和优势\",{\"0\":{\"105\":1}}],[\"数据卷通常具有更高的性能\",{\"1\":{\"105\":1}}],[\"数据卷可以在容器删除后持久化保存数据\",{\"1\":{\"105\":1}}],[\"数据卷\",{\"0\":{\"104\":1},\"1\":{\"104\":2}}],[\"解锁\",{\"1\":{\"518\":1,\"531\":2}}],[\"解决竞态条件\",{\"0\":{\"463\":1},\"1\":{\"466\":1}}],[\"解决方案\",{\"1\":{\"423\":1}}],[\"解决软件工程中的常见问题\",{\"1\":{\"370\":1}}],[\"解决冲突的本质其实就是\",{\"1\":{\"18\":1}}],[\"解析为\",{\"1\":{\"396\":1}}],[\"解析指定服务的\",{\"1\":{\"313\":1}}],[\"解析并返回域名的规范名称\",{\"1\":{\"313\":1}}],[\"解析主机名到\",{\"1\":{\"308\":2}}],[\"解析表单数据\",{\"0\":{\"254\":1}}],[\"解析和使用命令行参数\",{\"1\":{\"235\":1}}],[\"解析命令行参数\",{\"0\":{\"231\":1},\"1\":{\"231\":1,\"233\":1}}],[\"解析以及定时器的使用\",{\"1\":{\"141\":1}}],[\"解码器\",{\"1\":{\"208\":1,\"222\":1}}],[\"解码\",{\"0\":{\"205\":1,\"219\":1},\"1\":{\"212\":1}}],[\"解密\",{\"1\":{\"177\":1,\"180\":1}}],[\"解释示例代码\",{\"0\":{\"163\":1,\"165\":1}}],[\"格式的数据\",{\"1\":{\"572\":5}}],[\"格式的响应数据\",{\"1\":{\"562\":1,\"563\":1,\"564\":1}}],[\"格式的\",{\"1\":{\"555\":1,\"572\":1,\"591\":1}}],[\"格式的字节切片\",{\"1\":{\"203\":1,\"217\":1}}],[\"格式\",{\"1\":{\"554\":1}}],[\"格式化时间\",{\"1\":{\"352\":1}}],[\"格式化和解析时间\",{\"0\":{\"334\":1}}],[\"格式化占位符\",{\"0\":{\"238\":1}}],[\"格式化输出的宽度和精度控制\",{\"1\":{\"242\":1}}],[\"格式化输出\",{\"0\":{\"237\":1}}],[\"格式化输入输出\",{\"1\":{\"136\":1}}],[\"格式文件的读写\",{\"1\":{\"140\":1}}],[\"缓冲读写\",{\"0\":{\"269\":1}}],[\"缓冲\",{\"1\":{\"139\":1}}],[\"缓存机制\",{\"1\":{\"68\":1}}],[\"超时和带值的上下文\",{\"1\":{\"492\":1}}],[\"超时上下文\",{\"0\":{\"490\":1}}],[\"超时控制\",{\"1\":{\"418\":1,\"485\":1}}],[\"超时\",{\"1\":{\"138\":1}}],[\"各自的选择主要取决于具体的应用场景和性能需求\",{\"1\":{\"507\":1}}],[\"各有优缺\",{\"1\":{\"378\":1}}],[\"各种数据结构\",{\"1\":{\"137\":1}}],[\"各个参数说明\",{\"1\":{\"85\":1}}],[\"操作的场景中\",{\"1\":{\"507\":1}}],[\"操作的类型\",{\"1\":{\"421\":1}}],[\"操作会自动取消\",{\"1\":{\"490\":1}}],[\"操作符可以发送和接收数据\",{\"1\":{\"499\":1}}],[\"操作符进行数据的发送和接收\",{\"1\":{\"470\":1}}],[\"操作符为\",{\"1\":{\"455\":1}}],[\"操作符\",{\"1\":{\"435\":1,\"445\":1}}],[\"操作map\",{\"0\":{\"421\":1}}],[\"操作到了底层数组\",{\"1\":{\"363\":1}}],[\"操作\",{\"1\":{\"139\":1,\"143\":1}}],[\"操作系统功能\",{\"1\":{\"136\":1}}],[\"操作指令不太熟悉\",{\"1\":{\"73\":1}}],[\"操作指令\",{\"1\":{\"73\":1}}],[\"希望这些内容对您创建中文站点有所帮助\",{\"1\":{\"134\":1}}],[\"参考资料\",{\"0\":{\"134\":1}}],[\"参数将\",{\"1\":{\"586\":1}}],[\"参数将数据卷挂载到容器的指定路径上\",{\"1\":{\"108\":1}}],[\"参数发送到客户端\",{\"1\":{\"579\":1}}],[\"参数不存在\",{\"1\":{\"551\":1}}],[\"参数获取\",{\"1\":{\"550\":1,\"551\":1,\"553\":1}}],[\"参数传递\",{\"1\":{\"397\":1,\"579\":1,\"587\":1,\"589\":1}}],[\"参数类型可以相同或不同\",{\"1\":{\"388\":1}}],[\"参数与返回值\",{\"0\":{\"388\":1}}],[\"参数列表\",{\"1\":{\"387\":1}}],[\"参数映射到主机上的端口是随机的\",{\"1\":{\"120\":1}}],[\"参数创建容器时\",{\"1\":{\"94\":1}}],[\"参数可以禁用缓存\",{\"1\":{\"68\":1}}],[\"参数指定对应的值\",{\"1\":{\"231\":1}}],[\"参数指定路径\",{\"1\":{\"66\":1}}],[\"参数指定\",{\"1\":{\"55\":1}}],[\"参数撤销工作区中所有未提交的修改内容\",{\"1\":{\"24\":1}}],[\"参数用于回退到某个版本\",{\"1\":{\"24\":1}}],[\"参数\",{\"0\":{\"549\":1,\"552\":1,\"554\":1},\"1\":{\"23\":1,\"24\":1,\"26\":1,\"38\":1,\"107\":1,\"385\":1,\"453\":1,\"543\":1}}],[\"参数来获取简短的输出信息\",{\"1\":{\"21\":1}}],[\"支持持久性存储\",{\"1\":{\"589\":1}}],[\"支持跨域请求\",{\"1\":{\"572\":1}}],[\"支持并发编程\",{\"1\":{\"371\":1}}],[\"支持动态增删元素\",{\"1\":{\"366\":1}}],[\"支持\",{\"1\":{\"309\":1,\"371\":1}}],[\"支持级别和格式化输出\",{\"1\":{\"141\":1}}],[\"支持原子性的内存访问\",{\"1\":{\"138\":1}}],[\"支持对切片的排序\",{\"1\":{\"137\":1}}],[\"支持本地和远程端口转发\",{\"1\":{\"133\":1}}],[\"支持多种数据格式\",{\"1\":{\"572\":1}}],[\"支持多种数据传输方式\",{\"1\":{\"133\":1}}],[\"支持多种认证方法\",{\"1\":{\"133\":1}}],[\"处理路径参数和查询参数\",{\"1\":{\"575\":1,\"577\":1}}],[\"处理接收到的表单数据\",{\"1\":{\"556\":1}}],[\"处理接收到的用户数据\",{\"1\":{\"555\":1}}],[\"处理跨域请求是中间件的一个常见用途\",{\"1\":{\"545\":1}}],[\"处理跨域请求\",{\"0\":{\"545\":1},\"1\":{\"546\":1}}],[\"处理跨域请求等\",{\"1\":{\"542\":1}}],[\"处理请求\",{\"1\":{\"543\":1}}],[\"处理通信2的逻辑\",{\"1\":{\"418\":1}}],[\"处理通信1的逻辑\",{\"1\":{\"418\":1}}],[\"处理连接的示例函数\",{\"1\":{\"309\":1}}],[\"处理静态文件\",{\"0\":{\"257\":1}}],[\"处理表单数据\",{\"0\":{\"253\":1}}],[\"处理用户输入变得非常方便和直观\",{\"1\":{\"235\":1}}],[\"处理嵌套的\",{\"1\":{\"229\":1}}],[\"处理嵌套和复杂结构\",{\"0\":{\"213\":1}}],[\"处理复杂结构\",{\"0\":{\"227\":1}}],[\"处理错误\",{\"0\":{\"197\":1,\"383\":1},\"1\":{\"383\":1}}],[\"处理大文件\",{\"0\":{\"195\":1}}],[\"处理逻辑\",{\"1\":{\"157\":1}}],[\"处理\",{\"1\":{\"133\":1,\"482\":1,\"553\":1,\"554\":1,\"555\":1,\"556\":1,\"561\":1}}],[\"处理冲突以后提交结果\",{\"1\":{\"16\":1}}],[\"公钥认证等\",{\"1\":{\"133\":1}}],[\"公共服务器压力和数据量都不会太大\",{\"1\":{\"29\":1}}],[\"认证函数\",{\"1\":{\"599\":1}}],[\"认证授权\",{\"1\":{\"595\":1}}],[\"认证\",{\"1\":{\"133\":1,\"593\":1}}],[\"认为我们已经成功的解决了冲突\",{\"1\":{\"18\":1}}],[\"=18\",{\"1\":{\"552\":1}}],[\"=golangnotes\",{\"1\":{\"552\":1}}],[\"=操作的类型\",{\"1\":{\"402\":1}}],[\"==\",{\"1\":{\"132\":1,\"189\":1,\"196\":1,\"198\":1,\"228\":1,\"229\":2,\"254\":1,\"312\":1,\"387\":1,\"388\":2,\"389\":1,\"390\":1,\"391\":1,\"392\":1,\"393\":2,\"395\":1,\"396\":1,\"421\":3,\"426\":2,\"431\":1,\"438\":1,\"550\":10,\"588\":1,\"598\":1}}],[\"=======和>>>>>>>\",{\"1\":{\"17\":1}}],[\"=======\",{\"1\":{\"17\":1}}],[\"=\",{\"1\":{\"131\":9,\"132\":16,\"145\":3,\"146\":3,\"147\":3,\"148\":3,\"150\":1,\"151\":3,\"152\":3,\"154\":3,\"155\":4,\"157\":2,\"160\":6,\"161\":15,\"162\":8,\"164\":5,\"168\":2,\"169\":1,\"171\":2,\"172\":1,\"174\":2,\"175\":1,\"177\":10,\"179\":10,\"180\":19,\"182\":4,\"184\":11,\"185\":19,\"188\":6,\"189\":5,\"191\":7,\"192\":6,\"194\":7,\"196\":5,\"198\":5,\"200\":10,\"203\":3,\"204\":3,\"206\":3,\"208\":5,\"209\":4,\"211\":3,\"212\":7,\"214\":5,\"217\":3,\"218\":3,\"220\":3,\"222\":5,\"223\":4,\"225\":3,\"226\":5,\"228\":5,\"229\":10,\"233\":1,\"234\":1,\"237\":2,\"238\":2,\"240\":1,\"241\":2,\"247\":1,\"249\":4,\"250\":5,\"252\":5,\"254\":1,\"256\":2,\"258\":1,\"264\":4,\"265\":4,\"268\":2,\"270\":3,\"271\":3,\"273\":5,\"275\":6,\"276\":5,\"278\":5,\"280\":6,\"285\":2,\"288\":2,\"290\":2,\"292\":3,\"297\":2,\"299\":1,\"308\":6,\"309\":8,\"310\":18,\"311\":3,\"312\":3,\"313\":5,\"314\":4,\"315\":3,\"317\":12,\"318\":3,\"319\":2,\"320\":6,\"322\":1,\"323\":3,\"325\":3,\"327\":6,\"328\":4,\"329\":6,\"333\":1,\"335\":2,\"336\":4,\"338\":2,\"339\":3,\"340\":2,\"342\":3,\"345\":1,\"346\":2,\"348\":1,\"349\":2,\"351\":2,\"352\":3,\"356\":4,\"357\":3,\"361\":4,\"362\":14,\"363\":6,\"365\":1,\"366\":1,\"367\":4,\"383\":3,\"384\":3,\"387\":1,\"388\":2,\"389\":3,\"390\":2,\"391\":2,\"392\":1,\"393\":3,\"395\":2,\"396\":13,\"400\":3,\"401\":3,\"403\":5,\"404\":3,\"409\":1,\"411\":2,\"415\":3,\"416\":6,\"417\":8,\"418\":4,\"420\":2,\"421\":6,\"422\":1,\"423\":6,\"425\":7,\"426\":8,\"427\":5,\"428\":7,\"429\":9,\"430\":5,\"431\":9,\"434\":2,\"435\":2,\"436\":5,\"437\":5,\"439\":3,\"444\":9,\"445\":7,\"446\":8,\"447\":6,\"450\":7,\"455\":10,\"456\":4,\"457\":4,\"458\":3,\"462\":2,\"463\":2,\"464\":2,\"465\":5,\"469\":1,\"470\":1,\"472\":2,\"473\":1,\"474\":1,\"475\":3,\"476\":5,\"479\":8,\"480\":8,\"481\":4,\"482\":10,\"483\":7,\"484\":5,\"487\":1,\"488\":1,\"489\":1,\"490\":1,\"491\":2,\"492\":7,\"498\":1,\"499\":1,\"500\":1,\"501\":3,\"502\":1,\"514\":1,\"515\":2,\"516\":1,\"517\":1,\"518\":1,\"522\":1,\"524\":5,\"525\":2,\"526\":2,\"530\":1,\"531\":3,\"532\":3,\"533\":1,\"534\":2,\"535\":2,\"540\":1,\"543\":4,\"544\":4,\"545\":1,\"550\":5,\"551\":4,\"552\":3,\"553\":6,\"555\":2,\"556\":2,\"557\":1,\"559\":2,\"560\":3,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":2,\"575\":5,\"576\":3,\"584\":3,\"588\":5,\"590\":6,\"598\":10,\"602\":1,\"603\":1}}],[\"xorresult\",{\"1\":{\"428\":1}}],[\"xorkeystream\",{\"1\":{\"177\":2}}],[\"xmpp\",{\"1\":{\"313\":1}}],[\"xml映射等\",{\"1\":{\"447\":1}}],[\"xmlname\",{\"1\":{\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1}}],[\"xml\",{\"0\":{\"215\":1,\"216\":1,\"219\":1,\"224\":1,\"563\":1},\"1\":{\"140\":2,\"215\":3,\"217\":4,\"218\":4,\"220\":4,\"222\":5,\"223\":5,\"225\":4,\"226\":4,\"228\":3,\"229\":6,\"561\":1,\"563\":5,\"572\":3}}],[\"x509\",{\"1\":{\"179\":3,\"180\":3,\"184\":3,\"185\":3}}],[\"x\",{\"0\":{\"127\":1},\"1\":{\"128\":1,\"129\":2,\"131\":1,\"132\":1,\"134\":1,\"161\":2,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"180\":1,\"182\":1,\"185\":2,\"302\":5,\"303\":3,\"304\":3,\"388\":5,\"391\":2,\"393\":2,\"395\":2,\"396\":34,\"415\":10,\"436\":8,\"567\":1}}],[\"想要直接删除需要加上\",{\"1\":{\"124\":1}}],[\"补充\",{\"1\":{\"120\":1}}],[\"访问受保护的\",{\"1\":{\"600\":1}}],[\"访问方式\",{\"1\":{\"589\":1}}],[\"访问http\",{\"1\":{\"540\":1,\"576\":1}}],[\"访问共享资源\",{\"1\":{\"461\":1}}],[\"访问数组元素时\",{\"1\":{\"455\":1}}],[\"访问结构体字段\",{\"1\":{\"445\":2}}],[\"访问结构体成员时使用\",{\"1\":{\"445\":1}}],[\"访问结构体成员\",{\"0\":{\"445\":1}}],[\"访问其指定偏移量的数据\",{\"1\":{\"437\":1}}],[\"访问指针的值\",{\"0\":{\"435\":1}}],[\"访问控制等\",{\"1\":{\"596\":1}}],[\"访问控制一目了然\",{\"1\":{\"397\":1}}],[\"访问控制\",{\"0\":{\"397\":1},\"1\":{\"583\":1}}],[\"访问速度较快\",{\"1\":{\"365\":1}}],[\"访问链表尾部元素\",{\"1\":{\"162\":1}}],[\"访问\",{\"1\":{\"120\":1,\"362\":1,\"569\":1,\"570\":1,\"571\":1,\"575\":1,\"583\":1}}],[\"访问官方下载页面\",{\"1\":{\"33\":1}}],[\"50\",{\"1\":{\"396\":1}}],[\"500\",{\"1\":{\"480\":1,\"484\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1}}],[\"5001\",{\"1\":{\"118\":2,\"120\":2}}],[\"5000\",{\"1\":{\"59\":1,\"118\":2,\"119\":1,\"120\":3,\"121\":2}}],[\"56\",{\"1\":{\"336\":1}}],[\"5432\",{\"1\":{\"318\":1}}],[\"54\",{\"1\":{\"302\":2}}],[\"5\",{\"0\":{\"164\":1,\"178\":1,\"197\":1,\"213\":1,\"227\":1,\"241\":1,\"255\":1,\"274\":1,\"296\":1,\"305\":1,\"312\":1,\"343\":1,\"391\":1,\"413\":1,\"478\":1,\"483\":1,\"534\":1,\"542\":1},\"1\":{\"264\":1,\"278\":1,\"305\":4,\"314\":1,\"322\":6,\"346\":1,\"351\":1,\"356\":3,\"357\":2,\"362\":12,\"363\":9,\"365\":3,\"366\":1,\"367\":7,\"387\":1,\"391\":1,\"392\":1,\"393\":2,\"396\":1,\"402\":2,\"404\":1,\"416\":5,\"418\":1,\"426\":1,\"428\":1,\"429\":1,\"431\":2,\"436\":3,\"437\":2,\"475\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"484\":1,\"501\":1,\"502\":1,\"532\":1,\"534\":1}}],[\"55001\",{\"1\":{\"120\":2}}],[\"55000\",{\"1\":{\"119\":3}}],[\"让当前\",{\"1\":{\"344\":1}}],[\"让容器在后台运行\",{\"1\":{\"118\":1}}],[\"让你选择如何处理每个更改\",{\"1\":{\"27\":1}}],[\"架构\",{\"1\":{\"118\":1}}],[\"架构模式\",{\"1\":{\"43\":1}}],[\"芯片\",{\"1\":{\"118\":1}}],[\"退出程序\",{\"1\":{\"287\":1,\"288\":1}}],[\"退出登录\",{\"1\":{\"115\":1}}],[\"退出这个容器到我们本地的命令控制端\",{\"1\":{\"85\":1}}],[\"登录路由\",{\"1\":{\"599\":1}}],[\"登录\",{\"1\":{\"115\":1}}],[\"登录和退出\",{\"0\":{\"115\":1}}],[\"登录仓库\",{\"1\":{\"100\":1}}],[\"备份和恢复\",{\"1\":{\"111\":1}}],[\"备份等\",{\"1\":{\"105\":1}}],[\"挂载数据卷到容器\",{\"0\":{\"108\":1}}],[\"持久化存储\",{\"1\":{\"111\":1}}],[\"持久性\",{\"1\":{\"105\":1}}],[\"持续部署\",{\"1\":{\"71\":1}}],[\"学习\",{\"1\":{\"546\":1}}],[\"学习完成后可回头做此学习案例\",{\"1\":{\"101\":1}}],[\"学习docker之前\",{\"0\":{\"73\":1}}],[\"国内访问可能不够稳定\",{\"1\":{\"101\":1}}],[\"务必确保你已经成功安装\",{\"1\":{\"101\":1}}],[\"正号\",{\"1\":{\"431\":1}}],[\"正式学习\",{\"1\":{\"374\":1}}],[\"正数\",{\"1\":{\"165\":1}}],[\"正确安装\",{\"1\":{\"101\":1}}],[\"正在运行\",{\"1\":{\"96\":1}}],[\"快速开始\",{\"0\":{\"101\":1}}],[\"快速部署\",{\"1\":{\"71\":1}}],[\"自由度较高\",{\"1\":{\"437\":1}}],[\"自行进行进行了解引用操作\",{\"1\":{\"396\":1}}],[\"自带的\",{\"1\":{\"378\":1}}],[\"自定义响应头\",{\"0\":{\"567\":1}}],[\"自定义中间件\",{\"0\":{\"543\":1}}],[\"自定义类型\",{\"1\":{\"423\":1}}],[\"自定义类型的\",{\"1\":{\"211\":1,\"212\":1}}],[\"自定义排序\",{\"0\":{\"323\":1}}],[\"自定义日志记录器\",{\"0\":{\"291\":1},\"1\":{\"299\":1}}],[\"自定义格式化输出\",{\"0\":{\"240\":1}}],[\"自定义使用说明\",{\"0\":{\"234\":1}}],[\"自定义标签名称\",{\"0\":{\"225\":1}}],[\"自定义\",{\"0\":{\"210\":1,\"224\":1,\"251\":1,\"314\":1},\"1\":{\"260\":1}}],[\"自定义错误处理\",{\"0\":{\"198\":1}}],[\"自定义扫描器的分隔函数\",{\"1\":{\"155\":1}}],[\"自定义分隔符\",{\"0\":{\"155\":1,\"193\":1}}],[\"自定义网络端口映射\",{\"0\":{\"120\":1}}],[\"自定义的名称\",{\"1\":{\"98\":1}}],[\"自动构建\",{\"1\":{\"82\":1}}],[\"清理停止的容器\",{\"0\":{\"97\":1}}],[\"导致不可预期的结果\",{\"1\":{\"466\":1}}],[\"导致竞态条件\",{\"1\":{\"462\":1}}],[\"导致栈溢出\",{\"1\":{\"392\":1}}],[\"导入的镜像名称\",{\"1\":{\"95\":1}}],[\"导出\",{\"1\":{\"397\":1}}],[\"导出文件名\",{\"1\":{\"95\":1}}],[\"导出为一个\",{\"1\":{\"85\":1}}],[\"✅\",{\"1\":{\"94\":1}}],[\"4kb\",{\"1\":{\"583\":1,\"589\":1}}],[\"43\",{\"1\":{\"473\":1}}],[\"4b\",{\"1\":{\"455\":1}}],[\"400\",{\"1\":{\"553\":2,\"559\":1}}],[\"40\",{\"1\":{\"444\":1}}],[\"404\",{\"1\":{\"260\":1,\"607\":1}}],[\"42\",{\"1\":{\"328\":2,\"410\":1,\"470\":1,\"472\":1,\"473\":1,\"499\":1,\"518\":2,\"525\":1}}],[\"46\",{\"1\":{\"120\":1}}],[\"4\",{\"0\":{\"110\":1,\"156\":1,\"162\":1,\"176\":1,\"195\":1,\"210\":1,\"224\":1,\"234\":1,\"240\":1,\"253\":1,\"272\":1,\"293\":1,\"304\":1,\"311\":1,\"325\":1,\"341\":1,\"390\":1,\"424\":1,\"482\":1,\"529\":1,\"533\":1,\"553\":1,\"561\":1,\"600\":1,\"605\":1},\"1\":{\"92\":1,\"303\":2,\"322\":2,\"356\":2,\"357\":3,\"362\":11,\"363\":9,\"365\":1,\"366\":1,\"367\":5,\"389\":1,\"390\":1,\"404\":1,\"409\":1,\"416\":2,\"417\":1,\"418\":1,\"437\":1,\"451\":7,\"482\":1}}],[\"已经被定义的变量无法使用该语法糖\",{\"1\":{\"456\":1}}],[\"已经按对齐要求排列\",{\"1\":{\"451\":1}}],[\"已经停止了exited\",{\"1\":{\"92\":1}}],[\"已经包括\",{\"1\":{\"48\":2}}],[\"刚才\",{\"1\":{\"92\":1}}],[\"若是在启动容器后\",{\"1\":{\"88\":1}}],[\"若是只想备份images\",{\"1\":{\"88\":1}}],[\"要启动一个新的\",{\"1\":{\"495\":1}}],[\"要是能将数据类型变成一个变量传进来\",{\"1\":{\"399\":1}}],[\"要求\",{\"1\":{\"399\":1}}],[\"要了解切片作为参数时\",{\"1\":{\"363\":1}}],[\"要安装\",{\"1\":{\"129\":1}}],[\"要注意的是\",{\"1\":{\"95\":1}}],[\"要导出的镜像\",{\"1\":{\"88\":1}}],[\"要导出的文件名\",{\"1\":{\"88\":1}}],[\"要提交的更改已经被删除\",{\"1\":{\"17\":1}}],[\">=\",{\"1\":{\"426\":2,\"431\":1}}],[\"><br>\",{\"1\":{\"254\":2}}],[\">5000\",{\"1\":{\"119\":1}}],[\">>=\",{\"1\":{\"429\":1,\"431\":1}}],[\">>\",{\"1\":{\"99\":1,\"428\":2,\"431\":1}}],[\">>>>>>>\",{\"1\":{\"17\":1}}],[\">\",{\"1\":{\"88\":1,\"95\":1,\"120\":2,\"161\":1,\"254\":2,\"402\":1,\"415\":1,\"416\":1,\"426\":1,\"431\":1,\"540\":1}}],[\"既可以使用\",{\"1\":{\"87\":1}}],[\"既可以在空目录下初始化\",{\"1\":{\"8\":1}}],[\"此时缓冲区已满\",{\"1\":{\"473\":1}}],[\"此时再通过该指针来修改形参\",{\"1\":{\"396\":1}}],[\"此时即便我们没有使用指针调用\",{\"1\":{\"396\":1}}],[\"此时成功的修改了\",{\"1\":{\"396\":1}}],[\"此时虽然通过实际的数组指针修改了底层数组\",{\"1\":{\"363\":1}}],[\"此时我们在创建\",{\"1\":{\"87\":1}}],[\"此时信息告诉我们在合并\",{\"1\":{\"16\":1}}],[\"名\",{\"1\":{\"87\":1}}],[\"名称\",{\"1\":{\"7\":1}}],[\"生命周期\",{\"1\":{\"583\":1,\"587\":1,\"589\":1}}],[\"生产者函数生成数据并发送到通道\",{\"1\":{\"484\":1}}],[\"生产者\",{\"0\":{\"484\":1},\"1\":{\"484\":1}}],[\"生成用户登录后的令牌\",{\"1\":{\"595\":1}}],[\"生成一个\",{\"1\":{\"593\":1}}],[\"生成一系列数据并发送到通道\",{\"1\":{\"480\":1}}],[\"生成器函数生成数据并发送到通道\",{\"1\":{\"483\":1}}],[\"生成器生成一系列数字\",{\"1\":{\"482\":1}}],[\"生成数据并通过管道传递\",{\"1\":{\"482\":1}}],[\"生成随机浮点数\",{\"1\":{\"306\":1}}],[\"生成随机整数\",{\"1\":{\"306\":1}}],[\"生成公钥\",{\"1\":{\"179\":1,\"184\":1}}],[\"生成私钥\",{\"1\":{\"179\":1,\"184\":1}}],[\"生成\",{\"0\":{\"179\":1,\"184\":1},\"1\":{\"593\":1}}],[\"生成镜像\",{\"0\":{\"86\":1}}],[\"生态系统\",{\"1\":{\"71\":1}}],[\"先将\",{\"1\":{\"431\":1}}],[\"先计算\",{\"1\":{\"431\":1}}],[\"先删除掉该镜像\",{\"1\":{\"88\":1}}],[\"先下载一个\",{\"1\":{\"85\":1}}],[\"先查看\",{\"1\":{\"84\":1}}],[\"8b\",{\"1\":{\"455\":1}}],[\"8\",{\"0\":{\"315\":1,\"394\":1,\"432\":1,\"508\":1},\"1\":{\"112\":1,\"304\":2,\"351\":3,\"363\":1,\"393\":1,\"416\":1,\"436\":3,\"451\":9}}],[\"8c0dde3e3fb4\",{\"1\":{\"84\":1}}],[\"8080上启动服务\",{\"1\":{\"540\":1}}],[\"8080\",{\"1\":{\"246\":2,\"247\":2,\"254\":2,\"256\":2,\"258\":1,\"260\":2,\"309\":1,\"310\":2,\"540\":2,\"543\":1,\"544\":1,\"545\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"557\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":3,\"570\":3,\"571\":3,\"575\":2,\"576\":2,\"584\":1,\"588\":1,\"590\":1,\"598\":1,\"602\":1,\"603\":1}}],[\"80\",{\"1\":{\"49\":4,\"51\":2,\"52\":1,\"62\":1,\"309\":1,\"314\":1,\"315\":1}}],[\"才会展现出修改原切片的效果\",{\"1\":{\"363\":1}}],[\"才会自动更新工作目录以匹配目标分支的状态\",{\"1\":{\"11\":1}}],[\"才能够删除该镜像\",{\"1\":{\"84\":2}}],[\"喜欢的意思\",{\"1\":{\"82\":1}}],[\"里面的\",{\"1\":{\"82\":1}}],[\"里面多了三行我们看不懂的记号\",{\"1\":{\"17\":1}}],[\"本质还是解引用\",{\"1\":{\"445\":1}}],[\"本质上还是传递的是指针的副本\",{\"1\":{\"436\":1}}],[\"本质上就是从远程的仓库中下载镜像到本地\",{\"1\":{\"83\":1}}],[\"本身包含了所有需要的信息\",{\"1\":{\"594\":1}}],[\"本身不是并发安全的\",{\"1\":{\"422\":1}}],[\"本身的变量中\",{\"1\":{\"362\":1}}],[\"本身的停止命令即可\",{\"1\":{\"122\":1}}],[\"本身就是一个\",{\"1\":{\"122\":1}}],[\"本地端口映射\",{\"1\":{\"120\":1}}],[\"本地仓库只有你拉取的镜像\",{\"1\":{\"79\":1}}],[\"本文主要以\",{\"1\":{\"114\":1}}],[\"本小节的目的是为了让大家对\",{\"1\":{\"101\":1}}],[\"本小节以查找\",{\"1\":{\"82\":1}}],[\"查询参数用于过滤\",{\"1\":{\"575\":1}}],[\"查询参数是指在\",{\"1\":{\"575\":1}}],[\"查询参数\",{\"1\":{\"575\":1}}],[\"查询\",{\"1\":{\"421\":1}}],[\"查询子切片的值\",{\"1\":{\"362\":1}}],[\"查询子数组的值\",{\"1\":{\"357\":1}}],[\"查询索引\",{\"1\":{\"362\":1}}],[\"查找时依然无法找到它\",{\"1\":{\"423\":1}}],[\"查找\",{\"1\":{\"82\":1}}],[\"查找镜像\",{\"0\":{\"82\":1}}],[\"查看数据\",{\"1\":{\"357\":1}}],[\"查看数据卷\",{\"0\":{\"109\":1}}],[\"查看端口映射信息\",{\"0\":{\"121\":1}}],[\"查看web应用容器\",{\"0\":{\"119\":1}}],[\"查看本地仓库是否有\",{\"1\":{\"102\":1,\"103\":1}}],[\"查看本地分支\",{\"1\":{\"13\":1}}],[\"查看某时间段日志\",{\"1\":{\"99\":1}}],[\"查看某时间之后的日志\",{\"1\":{\"99\":1}}],[\"查看最近30分钟的日志\",{\"1\":{\"99\":1}}],[\"查看指定时间后的日志\",{\"1\":{\"99\":1}}],[\"查看镜像列表\",{\"1\":{\"85\":1}}],[\"查看服务的日志输出\",{\"1\":{\"50\":1}}],[\"查看文件\",{\"1\":{\"22\":1}}],[\"查看仓库状态\",{\"0\":{\"21\":1}}],[\"查看其内容会发现\",{\"1\":{\"17\":1}}],[\"查看所有分支\",{\"1\":{\"13\":1}}],[\"查看分支\",{\"0\":{\"13\":1}}],[\"代替数组的长度\",{\"1\":{\"356\":1}}],[\"代码复用\",{\"1\":{\"405\":1}}],[\"代码仓库是存放代码的\",{\"1\":{\"114\":1}}],[\"代码保密性差\",{\"1\":{\"29\":1}}],[\"代表删除用户\",{\"1\":{\"574\":1}}],[\"代表更新用户\",{\"1\":{\"574\":1}}],[\"代表新增用户\",{\"1\":{\"574\":1}}],[\"代表查询用户\",{\"1\":{\"574\":1}}],[\"代表\",{\"1\":{\"96\":1}}],[\"代表这个仓库源的不同个版本\",{\"1\":{\"81\":1}}],[\"同源策略\",{\"1\":{\"583\":1}}],[\"同一线程内的协程可以共享内存\",{\"1\":{\"506\":1}}],[\"同一进程内的线程可以直接访问共享的内存和资源\",{\"1\":{\"505\":1}}],[\"同一进程中的线程共享该进程的内存和其他资源\",{\"1\":{\"505\":1}}],[\"同一仓库源可以有多个\",{\"1\":{\"81\":1}}],[\"同步操作规则\",{\"1\":{\"509\":1}}],[\"同步和通信通常通过通道\",{\"1\":{\"497\":1}}],[\"同步和通信\",{\"0\":{\"497\":1}}],[\"同步\",{\"1\":{\"477\":1}}],[\"同步原语\",{\"0\":{\"513\":1,\"529\":1},\"1\":{\"138\":1}}],[\"同样没有发送者时也会阻塞接收操作\",{\"1\":{\"472\":1}}],[\"同时返回一个布尔值\",{\"1\":{\"552\":1}}],[\"同时也可以包含自定义的声明\",{\"1\":{\"592\":1}}],[\"同时也可以使用后续结构体中的\",{\"1\":{\"551\":1}}],[\"同时也限制了指针的使用\",{\"1\":{\"432\":1}}],[\"同时等待多个通道操作\",{\"1\":{\"521\":1}}],[\"同时读取\",{\"1\":{\"461\":1,\"515\":1}}],[\"同时声明多个常量时\",{\"1\":{\"457\":1}}],[\"同时声明多个变量\",{\"1\":{\"456\":1}}],[\"同时保证内存对齐\",{\"1\":{\"451\":1}}],[\"同时准备好\",{\"1\":{\"418\":1}}],[\"同时覆盖特定环境的设置\",{\"1\":{\"52\":1}}],[\"同理即可支持多维数组\",{\"1\":{\"358\":1}}],[\"严格意义上来说可以分为本地仓库和远程仓库\",{\"1\":{\"79\":1}}],[\"第三方安装教程\",{\"0\":{\"76\":1}}],[\"系列学习笔记\",{\"1\":{\"73\":1}}],[\"系统编程\",{\"1\":{\"372\":1}}],[\"系统库等\",{\"1\":{\"71\":1}}],[\"系统工具\",{\"1\":{\"71\":1}}],[\"系统\",{\"1\":{\"8\":1,\"85\":1}}],[\"至少认识一些常见的命令\",{\"1\":{\"73\":1}}],[\"你学到了如何创建一个gin路由器\",{\"1\":{\"541\":1}}],[\"你已经成功地安装了\",{\"1\":{\"541\":1}}],[\"你应该会看到以下json响应\",{\"1\":{\"540\":1}}],[\"你应该会看到输出如下\",{\"1\":{\"540\":1}}],[\"你需要安装go语言环境\",{\"1\":{\"539\":1}}],[\"你需要检查第二个返回值\",{\"1\":{\"381\":1}}],[\"你需要掌握一些常用的\",{\"1\":{\"73\":1}}],[\"你也可以通过在容器运行时自动创建数据卷来使用\",{\"1\":{\"107\":1}}],[\"你必须确保你正确安装了\",{\"1\":{\"101\":1}}],[\"你可以通过将多个通道操作组合在一起\",{\"1\":{\"528\":1}}],[\"你可以使用类型约束来定义接口\",{\"1\":{\"404\":1}}],[\"你可以使用其他\",{\"1\":{\"7\":1}}],[\"你可以根据错误值判断发生了什么问题\",{\"1\":{\"381\":1}}],[\"你可以很方便地管理文件\",{\"1\":{\"320\":1}}],[\"你可以轻松构建功能强大且灵活的\",{\"1\":{\"260\":1}}],[\"你可以方便地处理各种输入输出操作\",{\"1\":{\"280\":1}}],[\"你可以方便地在\",{\"1\":{\"185\":1,\"200\":1,\"214\":1,\"229\":1,\"299\":1,\"306\":1,\"352\":1}}],[\"你可以方便地实现和操作环形链表\",{\"1\":{\"165\":1}}],[\"你可以方便地实现和操作双向链表\",{\"1\":{\"163\":1}}],[\"你可以方便地进行高效的缓冲输入输出操作\",{\"1\":{\"157\":1}}],[\"你可以在这个环境内干任何想干的事\",{\"1\":{\"72\":1}}],[\"你可以在该命令后加上你想要的名称\",{\"1\":{\"7\":1}}],[\"你可以自动化地构建一个新的\",{\"1\":{\"63\":1}}],[\"成功则返回带有\",{\"1\":{\"599\":1}}],[\"成功后移除中间容器\",{\"1\":{\"65\":1}}],[\"成倍后\",{\"1\":{\"396\":8}}],[\"成为现代软件开发中的一颗新星\",{\"1\":{\"373\":1}}],[\"成为微服务架构的首选语言之一\",{\"1\":{\"372\":1}}],[\"成本\",{\"1\":{\"72\":1}}],[\"好\",{\"1\":{\"72\":1}}],[\"差\",{\"1\":{\"72\":1}}],[\"高级用法\",{\"0\":{\"528\":1}}],[\"高效的方式\",{\"1\":{\"467\":1}}],[\"高效和强大的并发处理能力\",{\"1\":{\"373\":1}}],[\"高并发应用的开发者来说\",{\"1\":{\"373\":1}}],[\"高性能的web框架\",{\"1\":{\"538\":1}}],[\"高性能\",{\"1\":{\"371\":1}}],[\"高\",{\"1\":{\"72\":2}}],[\"高速的处理从很小到非常大的项目版本管理\",{\"1\":{\"29\":1}}],[\"低\",{\"1\":{\"72\":2}}],[\"隔离所需依赖\",{\"1\":{\"72\":1}}],[\"隔离操作系统\",{\"1\":{\"72\":1}}],[\"隔离程度\",{\"1\":{\"72\":1}}],[\"隔离性\",{\"1\":{\"71\":1,\"504\":1}}],[\"虚拟机\",{\"1\":{\"72\":1}}],[\"虚拟机是在物理硬件层面对资源的隔离\",{\"1\":{\"72\":1}}],[\"打开浏览器\",{\"1\":{\"540\":1}}],[\"打开文件\",{\"1\":{\"317\":1}}],[\"打开一个文件\",{\"1\":{\"317\":1}}],[\"打开安装程序\",{\"1\":{\"33\":1}}],[\"打印最终结果\",{\"1\":{\"530\":1}}],[\"打印结果\",{\"1\":{\"479\":1,\"482\":1}}],[\"打印轮转后的环形链表的所有值\",{\"1\":{\"164\":1}}],[\"打印环形链表的所有值\",{\"1\":{\"164\":1}}],[\"打包和部署应用程序\",{\"1\":{\"71\":1}}],[\"总的来说\",{\"1\":{\"451\":1}}],[\"总结来说\",{\"1\":{\"384\":1}}],[\"总结\",{\"0\":{\"113\":1,\"142\":1,\"235\":1,\"243\":1,\"330\":1,\"466\":1,\"493\":1,\"507\":1,\"519\":1,\"541\":1,\"546\":1,\"577\":1,\"596\":1},\"1\":{\"363\":1,\"378\":1,\"418\":1,\"451\":1}}],[\"总体而言\",{\"1\":{\"71\":1}}],[\"总而言之\",{\"1\":{\"11\":1}}],[\"共享相同的中间件或前缀\",{\"1\":{\"576\":1}}],[\"共享内存\",{\"1\":{\"506\":1}}],[\"共享内存等\",{\"1\":{\"504\":1}}],[\"共享资源\",{\"1\":{\"505\":1,\"530\":1}}],[\"共享和管理\",{\"1\":{\"113\":1}}],[\"共享和重用\",{\"1\":{\"105\":1}}],[\"共享数据\",{\"1\":{\"111\":1}}],[\"共享主机的资源\",{\"1\":{\"71\":1}}],[\"共享连接信息\",{\"1\":{\"53\":1}}],[\"多文件\",{\"0\":{\"560\":1}}],[\"多返回值函数\",{\"1\":{\"388\":1}}],[\"多参数函数\",{\"1\":{\"388\":1}}],[\"多路复用模式通过\",{\"1\":{\"483\":1}}],[\"多路复用通信\",{\"1\":{\"418\":1}}],[\"多路复用\",{\"0\":{\"274\":1,\"483\":1}}],[\"多个线程可以在多核\",{\"1\":{\"505\":1}}],[\"多个goroutine可以安全地向通道发送\",{\"1\":{\"468\":1}}],[\"多个变量\",{\"1\":{\"457\":1}}],[\"多个匹配条件\",{\"1\":{\"415\":1}}],[\"多个类型参数\",{\"0\":{\"403\":1}}],[\"多个\",{\"1\":{\"394\":1}}],[\"多个容器需要共享数据时\",{\"1\":{\"111\":1}}],[\"多个docker容器可以在同一台主机上并发运行\",{\"1\":{\"71\":1}}],[\"多阶段构建\",{\"1\":{\"68\":1}}],[\"资源部分中的参数\",{\"1\":{\"557\":1}}],[\"资源共享\",{\"1\":{\"507\":1}}],[\"资源隔离好\",{\"1\":{\"507\":1}}],[\"资源利用率\",{\"1\":{\"72\":1}}],[\"资源优化\",{\"1\":{\"71\":1}}],[\"资源或创建版本库为本地工作区\",{\"1\":{\"39\":1}}],[\"使代码更加简洁和易读\",{\"1\":{\"415\":1}}],[\"使代码更简洁\",{\"1\":{\"405\":1}}],[\"使得服务器可以动态生成并返回\",{\"1\":{\"601\":1}}],[\"使得服务器可以识别用户\",{\"1\":{\"579\":1}}],[\"使得服务器可以识别和跟踪同一个用户的多个请求\",{\"1\":{\"578\":1}}],[\"使得代码更加简洁和易于维护\",{\"1\":{\"528\":1}}],[\"使得\",{\"1\":{\"451\":1}}],[\"使得泛型函数或类型只能接受特定类型\",{\"1\":{\"402\":1}}],[\"使得函数和数据结构可以处理任意类型的数据\",{\"1\":{\"398\":1}}],[\"使得返回值在函数体内被赋值时无需显示\",{\"1\":{\"388\":1}}],[\"使得开发者可以清晰地处理和传播错误信息\",{\"1\":{\"384\":1}}],[\"使得开发人员可以轻松共享和获取镜像\",{\"1\":{\"71\":1}}],[\"使得用户可以根据特定的需求进行排序\",{\"1\":{\"321\":1}}],[\"使得应用程序之间相互独立\",{\"1\":{\"71\":1}}],[\"使用获取的\",{\"1\":{\"600\":1}}],[\"使用示例\",{\"0\":{\"600\":1}}],[\"使用签名来保证数据的完整性和真实性\",{\"1\":{\"594\":1}}],[\"使用一定的算法\",{\"1\":{\"592\":1}}],[\"使用一个参考时间\",{\"1\":{\"335\":1}}],[\"使用第三方库管理会话示例\",{\"0\":{\"590\":1}}],[\"使用通道的示例\",{\"0\":{\"475\":1}}],[\"使用通道\",{\"0\":{\"465\":1}}],[\"使用原子操作\",{\"0\":{\"464\":1}}],[\"使用空结构体嵌入其他结构体中\",{\"1\":{\"450\":1}}],[\"使用空结构体作为\",{\"1\":{\"450\":2}}],[\"使用空结构体作为信号传递的占位符\",{\"1\":{\"450\":1}}],[\"使用取地址符号实例化\",{\"1\":{\"444\":1}}],[\"使用指针算术运算访问数组的特定元素\",{\"1\":{\"437\":1}}],[\"使用指针遍历数组\",{\"1\":{\"437\":1}}],[\"使用约束定义接口\",{\"0\":{\"404\":1}}],[\"使用闭包可以实现状态的保持和管理\",{\"1\":{\"391\":1}}],[\"使用匿名函数可以简化代码结构\",{\"1\":{\"391\":1}}],[\"使用场景\",{\"0\":{\"595\":1},\"1\":{\"391\":1,\"418\":1}}],[\"使用流行的框架如\",{\"1\":{\"372\":1}}],[\"使用自定义配置进行网络连接\",{\"1\":{\"314\":1}}],[\"使用自定义配置\",{\"0\":{\"252\":1}}],[\"使用路由器\",{\"0\":{\"247\":1}}],[\"使用结构体标签\",{\"0\":{\"200\":1}}],[\"使用制表符作为分隔符\",{\"1\":{\"194\":1}}],[\"使用数据卷可以在容器删除后保留数据\",{\"1\":{\"104\":1}}],[\"使用save\",{\"1\":{\"88\":1}}],[\"使用该镜像创建一个容器\",{\"1\":{\"85\":1}}],[\"使用该指令可创建一个名为\",{\"1\":{\"10\":1}}],[\"使用标准输入流构建\",{\"1\":{\"66\":1}}],[\"使用构建参数\",{\"1\":{\"66\":1}}],[\"使用官方的基础镜像\",{\"1\":{\"59\":1}}],[\"使用docker\",{\"1\":{\"50\":1,\"52\":1}}],[\"使用的内存非常少\",{\"1\":{\"496\":1}}],[\"使用的方法和数组完全相同\",{\"1\":{\"362\":1}}],[\"使用的是\",{\"1\":{\"84\":1}}],[\"使用的是客户端\",{\"1\":{\"43\":1}}],[\"使用的\",{\"1\":{\"80\":1}}],[\"使用的三个步骤\",{\"1\":{\"47\":1}}],[\"使用远程\",{\"1\":{\"43\":1}}],[\"使用基于内容的哈希算法来检测文件是否修改\",{\"1\":{\"29\":1}}],[\"使用这个命令要谨慎\",{\"1\":{\"27\":1}}],[\"使用\",{\"0\":{\"112\":1,\"207\":1,\"221\":1,\"228\":1,\"229\":1,\"591\":1},\"1\":{\"25\":1,\"29\":1,\"45\":1,\"47\":2,\"56\":1,\"68\":1,\"79\":1,\"82\":3,\"94\":1,\"110\":1,\"120\":1,\"122\":1,\"155\":1,\"163\":1,\"165\":1,\"182\":1,\"231\":1,\"234\":1,\"239\":1,\"241\":1,\"246\":1,\"249\":1,\"250\":1,\"258\":1,\"270\":1,\"271\":1,\"377\":1,\"402\":1,\"416\":1,\"421\":2,\"423\":1,\"437\":1,\"444\":1,\"448\":1,\"455\":1,\"465\":1,\"490\":1,\"491\":1,\"492\":1,\"499\":1,\"527\":1,\"528\":1,\"535\":1,\"545\":1,\"551\":2,\"552\":2,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"569\":1,\"570\":1,\"571\":1,\"575\":3,\"588\":1,\"598\":1,\"599\":1,\"600\":1,\"605\":1,\"606\":2}}],[\"使用如下指令可以指定退回某一次提交的版本\",{\"1\":{\"24\":1}}],[\"使用如下指令将工作区的文件添加到暂存区\",{\"1\":{\"20\":1}}],[\"使用分支意味着你可以从开发主线上分离开来\",{\"1\":{\"9\":1}}],[\"策略非常有用\",{\"1\":{\"71\":1}}],[\"停止\",{\"1\":{\"122\":1}}],[\"停止web应用容器\",{\"0\":{\"122\":1}}],[\"停止和重新启动\",{\"1\":{\"71\":1}}],[\"停止并移除容器\",{\"1\":{\"50\":1}}],[\"测试中使用\",{\"1\":{\"487\":1}}],[\"测试还是生产环境\",{\"1\":{\"71\":1}}],[\"测试和生产\",{\"1\":{\"52\":1}}],[\"企业版\",{\"1\":{\"70\":1}}],[\"社区版\",{\"1\":{\"70\":1}}],[\"社区生态\",{\"0\":{\"3\":1}}],[\"相对较高\",{\"1\":{\"589\":1}}],[\"相对较低\",{\"1\":{\"589\":1}}],[\"相对复杂\",{\"1\":{\"504\":1}}],[\"相比进程\",{\"1\":{\"505\":1}}],[\"相比于使用空接口\",{\"1\":{\"405\":1}}],[\"相互之间不会有任何接口\",{\"1\":{\"70\":1}}],[\"相关信息\",{\"1\":{\"10\":1}}],[\"语句构建复杂的并发逻辑\",{\"1\":{\"528\":1}}],[\"语句阻塞\",{\"1\":{\"527\":1}}],[\"语句中包含了一个超时机制\",{\"1\":{\"525\":1}}],[\"语句中初始化一个变量\",{\"1\":{\"415\":1}}],[\"语句能够处理哪个通道先接收到数据\",{\"1\":{\"524\":1}}],[\"语句的注意事项\",{\"0\":{\"527\":1}}],[\"语句的\",{\"1\":{\"526\":1}}],[\"语句的示例\",{\"1\":{\"523\":1}}],[\"语句的基本用法\",{\"0\":{\"522\":1}}],[\"语句的具体用法\",{\"1\":{\"414\":1}}],[\"语句会阻塞\",{\"1\":{\"521\":1}}],[\"语句会等待并接收来自\",{\"1\":{\"418\":1}}],[\"语句从多个通道中选择可用的通道进行处理\",{\"1\":{\"483\":1}}],[\"语句从多个通道接收数据\",{\"1\":{\"476\":1}}],[\"语句使得一个\",{\"1\":{\"476\":1}}],[\"语句是处理并发任务时非常有用的工具\",{\"1\":{\"521\":1}}],[\"语句是一种控制结构\",{\"1\":{\"521\":1}}],[\"语句是\",{\"1\":{\"418\":1}}],[\"语句是编程语言中最为基础也是最重要的一个逻辑控制语句\",{\"1\":{\"414\":1}}],[\"语句类似于\",{\"1\":{\"418\":1}}],[\"语句在每次执行时\",{\"1\":{\"418\":1}}],[\"语句在\",{\"1\":{\"418\":1}}],[\"语句在匹配到某个\",{\"1\":{\"415\":1}}],[\"语句用于处理并发操作\",{\"1\":{\"418\":1}}],[\"语句用于进行多分支条件判断\",{\"1\":{\"415\":1}}],[\"语句还可以用于类型断言\",{\"1\":{\"415\":1}}],[\"语句可以正常接收到数据\",{\"1\":{\"527\":1}}],[\"语句可以和\",{\"1\":{\"418\":1}}],[\"语句可以嵌套使用\",{\"1\":{\"414\":1}}],[\"语句可以延迟函数或方法的执行直到封闭函数返回\",{\"1\":{\"394\":1}}],[\"语句\",{\"0\":{\"414\":1,\"415\":1,\"416\":1,\"418\":1,\"476\":1,\"521\":1},\"1\":{\"414\":3,\"415\":2,\"416\":1,\"418\":1,\"476\":1,\"528\":1}}],[\"语言提供的一种类型安全的通信机制\",{\"1\":{\"497\":1}}],[\"语言提供的一种轻量级线程\",{\"1\":{\"494\":1}}],[\"语言提供了强大且简洁的排序功能\",{\"1\":{\"325\":1}}],[\"语言特有的用于在\",{\"1\":{\"461\":1}}],[\"语言可以方便地处理网络编程相关的任务\",{\"1\":{\"315\":1}}],[\"语言中的原子操作\",{\"1\":{\"535\":1}}],[\"语言中的互斥锁和读写锁使用示例\",{\"1\":{\"530\":1}}],[\"语言中没有直接的栅栏实现\",{\"1\":{\"534\":1}}],[\"语言中没有直接的信号量实现\",{\"1\":{\"532\":1}}],[\"语言中可以使用通道来实现事件机制\",{\"1\":{\"533\":1}}],[\"语言中可以直接进行指针的运算\",{\"1\":{\"437\":1}}],[\"语言中使用条件变量\",{\"1\":{\"531\":1}}],[\"语言中强大且灵活的并发编程工具\",{\"1\":{\"477\":1}}],[\"语言中不允许将布尔值类型强制转换为整型\",{\"1\":{\"454\":1}}],[\"语言中处理并发编程的重要工具之一\",{\"1\":{\"418\":1}}],[\"语言中\",{\"1\":{\"143\":1,\"166\":1,\"186\":1,\"201\":1,\"215\":1,\"244\":1,\"261\":1,\"281\":1,\"300\":1,\"321\":1,\"326\":1,\"331\":1,\"364\":1,\"418\":1,\"419\":1,\"455\":1,\"485\":1,\"493\":1,\"521\":1}}],[\"语言开发的效率和质量\",{\"1\":{\"142\":1}}],[\"语言标准库是\",{\"1\":{\"135\":1}}],[\"语言的内存模型定义了对共享变量的访问顺序规则\",{\"1\":{\"508\":1}}],[\"语言的内存安全检查\",{\"1\":{\"437\":1}}],[\"语言的示例代码来介绍它们的应用\",{\"1\":{\"478\":1}}],[\"语言的排序函数是稳定的\",{\"1\":{\"324\":1}}],[\"语言的标准库中\",{\"1\":{\"236\":1}}],[\"语言的标准库提供了丰富的功能模块\",{\"1\":{\"142\":1}}],[\"语言的\",{\"1\":{\"128\":1}}],[\"语言\",{\"1\":{\"70\":1,\"370\":2}}],[\"语法来定义\",{\"1\":{\"575\":1}}],[\"语法如下\",{\"1\":{\"445\":1}}],[\"语法如下所示\",{\"1\":{\"24\":1}}],[\"语法简化的目的是为了在保证语义唯一的情况下尽可能简化\",{\"1\":{\"444\":1}}],[\"语法表示\",{\"1\":{\"238\":1}}],[\"语法核心\",{\"0\":{\"4\":1}}],[\"基数转换\",{\"1\":{\"329\":1}}],[\"基础知识\",{\"0\":{\"441\":1},\"1\":{\"159\":1}}],[\"基础模块\",{\"0\":{\"136\":1}}],[\"基于哈希的消息认证码\",{\"1\":{\"182\":1}}],[\"基于\",{\"1\":{\"70\":1}}],[\"基本路由\",{\"0\":{\"575\":1}}],[\"基本数据类型\",{\"0\":{\"454\":1},\"1\":{\"453\":1}}],[\"基本数学函数\",{\"0\":{\"302\":1}}],[\"基本类型的值\",{\"1\":{\"454\":1}}],[\"基本类型\",{\"1\":{\"423\":1}}],[\"基本的\",{\"1\":{\"416\":1}}],[\"基本日志记录\",{\"0\":{\"282\":1}}],[\"基本用法\",{\"0\":{\"130\":1,\"486\":1},\"1\":{\"231\":1}}],[\"基本构建\",{\"1\":{\"66\":1}}],[\"基本语法\",{\"0\":{\"64\":1},\"1\":{\"416\":1,\"418\":1}}],[\"基本组件\",{\"1\":{\"51\":1}}],[\"介绍\",{\"0\":{\"369\":1,\"371\":1},\"1\":{\"591\":1}}],[\"介绍及安装\",{\"0\":{\"69\":1}}],[\"介绍和安装\",{\"0\":{\"28\":1}}],[\"满足不同应用和环境的需求\",{\"1\":{\"68\":1}}],[\"拉取镜像即从\",{\"1\":{\"83\":1}}],[\"拉取镜像\",{\"0\":{\"83\":1},\"1\":{\"118\":1}}],[\"拉取\",{\"1\":{\"66\":2,\"102\":1,\"103\":1}}],[\"示例分析\",{\"1\":{\"518\":1}}],[\"示例代码\",{\"0\":{\"501\":1,\"523\":1,\"598\":1},\"1\":{\"563\":1}}],[\"示例和内存布局\",{\"1\":{\"451\":1}}],[\"示例\",{\"0\":{\"524\":1,\"525\":1,\"526\":1},\"1\":{\"325\":1,\"416\":4,\"418\":1,\"423\":1}}],[\"示例结构体\",{\"1\":{\"161\":1}}],[\"示例用法\",{\"0\":{\"66\":1}}],[\"示例说明\",{\"0\":{\"59\":1,\"599\":1}}],[\"适用场景\",{\"1\":{\"504\":1,\"505\":1,\"506\":1}}],[\"适用于大量并发的\",{\"1\":{\"507\":1}}],[\"适用于独立运行的任务\",{\"1\":{\"507\":1}}],[\"适用于\",{\"1\":{\"506\":1,\"596\":1}}],[\"适用于不同编程语言和不同平台之间的并发处理\",{\"1\":{\"504\":1}}],[\"适用于需要在服务器端存储会话数据的场景\",{\"1\":{\"589\":1}}],[\"适用于需要在客户端存储少量数据的场景\",{\"1\":{\"589\":1}}],[\"适用于需要大量并发但对并行性要求不高的场景\",{\"1\":{\"506\":1}}],[\"适用于需要频繁切换和低开销的场景\",{\"1\":{\"505\":1}}],[\"适用于需要频繁插入\",{\"1\":{\"163\":1}}],[\"适用于需要并行处理的任务\",{\"1\":{\"505\":1,\"507\":1}}],[\"适用于需要高度隔离和独立运行的任务\",{\"1\":{\"504\":1}}],[\"适用于跨\",{\"1\":{\"492\":1}}],[\"适用于同一变量的多种条件\",{\"1\":{\"415\":1}}],[\"适用于实时数据分析和处理\",{\"1\":{\"372\":1}}],[\"适用于构建高性能的服务器端应用\",{\"1\":{\"370\":1}}],[\"适用于多阶段构建\",{\"1\":{\"65\":1}}],[\"适合高并发场景\",{\"1\":{\"538\":1}}],[\"适合构建高性能应用\",{\"1\":{\"371\":1}}],[\"适合处理动态增删元素的需求\",{\"1\":{\"368\":1}}],[\"适合用于需要静态长度的场景\",{\"1\":{\"368\":1}}],[\"适合分布式开发\",{\"1\":{\"29\":1}}],[\"q=golang会返回\",{\"1\":{\"575\":1}}],[\"q=redis\",{\"1\":{\"82\":1}}],[\"queryparams\",{\"1\":{\"553\":9}}],[\"querymap\",{\"1\":{\"552\":6}}],[\"querycache\",{\"1\":{\"551\":1,\"552\":1}}],[\"queryarray\",{\"1\":{\"551\":6}}],[\"query\",{\"1\":{\"550\":16,\"551\":2,\"552\":2,\"575\":7}}],[\"queue\",{\"0\":{\"160\":1},\"1\":{\"160\":1}}],[\"quotient\",{\"1\":{\"388\":2,\"425\":1}}],[\"quicksort\",{\"1\":{\"321\":1}}],[\"quiet\",{\"1\":{\"65\":1}}],[\"q\",{\"1\":{\"65\":1,\"575\":1}}],[\"qiniu\",{\"1\":{\"44\":1}}],[\"始终移除中间容器\",{\"1\":{\"65\":1}}],[\"强制的意思\",{\"1\":{\"96\":1}}],[\"强制删除容器\",{\"0\":{\"96\":1}}],[\"强制重新构建镜像\",{\"1\":{\"66\":1}}],[\"强制重新构建所有层\",{\"1\":{\"65\":1}}],[\"强调个体\",{\"1\":{\"29\":1}}],[\"构建上下文\",{\"1\":{\"68\":1}}],[\"构建步骤详解\",{\"0\":{\"67\":1}}],[\"构建过程的各种选项\",{\"1\":{\"64\":1}}],[\"构建或重建服务\",{\"1\":{\"50\":1}}],[\"声明常量时初始化为\",{\"1\":{\"458\":1}}],[\"声明单个变量\",{\"1\":{\"456\":1}}],[\"声明结构体\",{\"0\":{\"443\":1}}],[\"声明指针\",{\"0\":{\"433\":1}}],[\"声明和初始化\",{\"0\":{\"420\":1}}],[\"声明方式\",{\"1\":{\"365\":1,\"366\":1}}],[\"声明容器要开放的端口\",{\"1\":{\"67\":1}}],[\"声明容器将监听的端口\",{\"1\":{\"62\":1}}],[\"声明应用程序将监听的端口\",{\"1\":{\"59\":1}}],[\"后可以在后续的请求中携带这个\",{\"1\":{\"593\":1}}],[\"后面插入\",{\"1\":{\"451\":1}}],[\"后会自动跳出\",{\"1\":{\"415\":1}}],[\"后台模式与进入\",{\"0\":{\"94\":1}}],[\"后续指令将在该目录下执行\",{\"1\":{\"62\":1}}],[\"后端技术\",{\"0\":{\"0\":1}}],[\"遵循从上到下原则\",{\"1\":{\"61\":1}}],[\"每次请求都是独立的\",{\"1\":{\"578\":1}}],[\"每次循环迭代后执行的操作\",{\"1\":{\"416\":1}}],[\"每隔指定时间发送一个信号\",{\"1\":{\"346\":1}}],[\"每条指令都会创建一个新的镜像层\",{\"1\":{\"61\":1}}],[\"每条保留字指令都必须为大写字母且后面要跟随至少一个参数\",{\"1\":{\"61\":1}}],[\"每个路由组都有各自的路由\",{\"1\":{\"576\":1}}],[\"每个进程都有自己的内存空间\",{\"1\":{\"504\":1}}],[\"每个步骤由一个\",{\"1\":{\"482\":1}}],[\"每个字段都以适当的内存对齐方式存储\",{\"1\":{\"451\":1}}],[\"每个\",{\"1\":{\"418\":1,\"496\":1,\"530\":1,\"532\":1,\"534\":1,\"535\":1,\"583\":1}}],[\"每个特性提供了强大的工具来处理函数的定义\",{\"1\":{\"397\":1}}],[\"每个构建步骤都会生成一个缓存层\",{\"1\":{\"68\":1}}],[\"每个指令都对应一个操作\",{\"1\":{\"58\":1}}],[\"每个服务可以使用不同的镜像\",{\"1\":{\"51\":1}}],[\"每个开发者都拥有完整的代码库副本\",{\"1\":{\"29\":1}}],[\"每个开发者都拥有本地代码库的完整副本\",{\"1\":{\"29\":1}}],[\"编写模板内容\",{\"1\":{\"604\":1}}],[\"编写\",{\"0\":{\"604\":1}}],[\"编写自定义中间件的基本形式是一个返回\",{\"1\":{\"543\":1}}],[\"编写代码\",{\"1\":{\"540\":1}}],[\"编写规则\",{\"0\":{\"61\":1}}],[\"编译器和运行时会在适当的位置插入内存屏障\",{\"1\":{\"512\":1}}],[\"编译器可能会在字段之间插入一些填充字节\",{\"1\":{\"451\":1}}],[\"编译器会根据元素个数自行推断数组的长度\",{\"1\":{\"356\":1}}],[\"编译后的二进制文件执行速度快\",{\"1\":{\"371\":1}}],[\"编译错误\",{\"1\":{\"356\":1}}],[\"编译代码\",{\"1\":{\"67\":1}}],[\"编码解码等常见功能\",{\"1\":{\"371\":1}}],[\"编码和解码\",{\"0\":{\"210\":1,\"224\":1}}],[\"编码器\",{\"1\":{\"209\":1,\"223\":1}}],[\"编码\",{\"0\":{\"202\":1,\"216\":1},\"1\":{\"211\":1}}],[\"编辑冲突文件\",{\"1\":{\"18\":1}}],[\"实际除了图片\",{\"1\":{\"566\":1}}],[\"实际操作的是底层数据的地址\",{\"1\":{\"455\":1}}],[\"实际上已经帮我们封装好了大部分内容\",{\"1\":{\"575\":1}}],[\"实际上\",{\"1\":{\"572\":1}}],[\"实际上这种方式也可以看做是\",{\"1\":{\"557\":1}}],[\"实际上这里只是重新定义了切片的范围\",{\"1\":{\"363\":1}}],[\"实际上这里是分两个步骤\",{\"1\":{\"356\":1}}],[\"实际上底层调用的是\",{\"1\":{\"551\":1,\"552\":1}}],[\"实际上就是这样\",{\"1\":{\"457\":1}}],[\"实际上变量的定义来源于数学\",{\"1\":{\"456\":1}}],[\"实际上是结构体指针\",{\"1\":{\"445\":1}}],[\"实际上的实现逻辑都是相同的\",{\"1\":{\"399\":1}}],[\"实际上切片不存储数据\",{\"1\":{\"363\":1}}],[\"实际上此时的\",{\"1\":{\"361\":1}}],[\"实数和虚数类型\",{\"1\":{\"454\":1}}],[\"实例\",{\"1\":{\"420\":1}}],[\"实例进行分析\",{\"1\":{\"45\":1}}],[\"实现会话管理的简单示例\",{\"1\":{\"590\":1}}],[\"实现超时机制\",{\"0\":{\"525\":1}}],[\"实现不断地监听多个通道的消息\",{\"1\":{\"418\":1}}],[\"实现自定义\",{\"1\":{\"252\":1}}],[\"实现简单的路由功能\",{\"1\":{\"247\":1}}],[\"实现\",{\"0\":{\"211\":1,\"212\":1,\"591\":1},\"1\":{\"161\":1,\"299\":1,\"306\":1,\"352\":1,\"422\":1}}],[\"实现数据的共享和重用\",{\"1\":{\"105\":1}}],[\"实现了可重复\",{\"1\":{\"59\":1}}],[\"实时查看docker容器名为user\",{\"1\":{\"99\":1}}],[\"开头的部分\",{\"1\":{\"575\":1}}],[\"开始时间\",{\"1\":{\"543\":1}}],[\"开始之前\",{\"0\":{\"399\":1}}],[\"开销较小\",{\"1\":{\"507\":1}}],[\"开销大\",{\"1\":{\"504\":1,\"507\":1}}],[\"开关\",{\"1\":{\"415\":1}}],[\"开箱即用\",{\"1\":{\"378\":1}}],[\"开发工具\",{\"0\":{\"376\":1}}],[\"开发\",{\"1\":{\"372\":1,\"373\":1}}],[\"开发的一种开源编程语言\",{\"1\":{\"370\":1}}],[\"开发者通常需要使用第三方库来实现会话管理\",{\"1\":{\"580\":1}}],[\"开发者需要手动处理错误\",{\"1\":{\"553\":1}}],[\"开发者日常编程的重要资源\",{\"1\":{\"135\":1}}],[\"开发者可以将应用程序的构建过程和运行时环境的配置以代码的方式进行描述\",{\"1\":{\"59\":1}}],[\"开源库\",{\"0\":{\"126\":1}}],[\"开源的分布式版本控制系统\",{\"1\":{\"29\":1}}],[\"暴露应用程序的端口\",{\"1\":{\"59\":1}}],[\"包作为模板引擎\",{\"1\":{\"606\":1}}],[\"包主要用于在不同的\",{\"1\":{\"485\":1}}],[\"包进行指针运算\",{\"1\":{\"437\":1}}],[\"包为单位\",{\"1\":{\"397\":1}}],[\"包来处理数据类型的转换和格式化\",{\"1\":{\"330\":1}}],[\"包来操作环形链表\",{\"1\":{\"164\":1}}],[\"包来操作双向链表\",{\"1\":{\"162\":1}}],[\"包本身不提供随机数生成功能\",{\"1\":{\"306\":1}}],[\"包实现更复杂的读写逻辑\",{\"1\":{\"280\":1}}],[\"包内常用的api\",{\"1\":{\"236\":1}}],[\"包是处理字符串和基本数据类型之间转换的重要工具\",{\"1\":{\"330\":1}}],[\"包是一个非常重要且常用的标准库\",{\"1\":{\"316\":1}}],[\"包是非常重要的\",{\"1\":{\"236\":1}}],[\"包是用于处理命令行参数的标准库\",{\"1\":{\"230\":1}}],[\"包还支持解析非命令行参数\",{\"1\":{\"233\":1}}],[\"包可以轻松地解析命令行参数\",{\"1\":{\"231\":1}}],[\"包的同步原语\",{\"1\":{\"509\":1}}],[\"包的原子操作和\",{\"1\":{\"509\":1}}],[\"包的一些基本介绍和常用功能\",{\"1\":{\"230\":1}}],[\"包的\",{\"1\":{\"186\":1,\"201\":1,\"215\":1,\"244\":1,\"261\":1,\"281\":1,\"300\":1,\"331\":1}}],[\"包及其子包中的基本\",{\"1\":{\"185\":1}}],[\"包及其子包的\",{\"1\":{\"166\":1}}],[\"包中常用的函数和用法示例\",{\"1\":{\"326\":1}}],[\"包中常用的函数和接口\",{\"1\":{\"321\":1}}],[\"包中常用的功能和api\",{\"1\":{\"316\":1}}],[\"包中的\",{\"1\":{\"315\":1}}],[\"包中的基本\",{\"1\":{\"157\":1,\"200\":1,\"214\":1,\"229\":1,\"260\":1,\"280\":1,\"299\":1,\"306\":1,\"352\":1}}],[\"包中并不单独提供\",{\"1\":{\"159\":1}}],[\"包中主要的数据结构\",{\"1\":{\"158\":1}}],[\"包提供了处理时间和日期的功能\",{\"1\":{\"331\":1}}],[\"包提供了字符串和基本数据类型之间的转换函数\",{\"1\":{\"326\":1}}],[\"包提供了相关功能\",{\"1\":{\"306\":1}}],[\"包提供了基本的数学函数和常量\",{\"1\":{\"300\":1}}],[\"包提供了基本的输入输出功能\",{\"1\":{\"261\":1}}],[\"包提供了简单的日志记录功能\",{\"1\":{\"281\":1}}],[\"包提供了用于构建\",{\"1\":{\"244\":1}}],[\"包提供了丰富的工具来处理格式化的输入和输出\",{\"1\":{\"243\":1}}],[\"包提供了对切片和用户定义的集合进行排序的函数\",{\"1\":{\"321\":1}}],[\"包提供了对\",{\"1\":{\"186\":1,\"201\":1,\"215\":1}}],[\"包提供了一种简洁而强大的方式来管理并发程序中的请求范围数据\",{\"1\":{\"493\":1}}],[\"包提供了一种用于在\",{\"1\":{\"485\":1}}],[\"包提供了一个简单而强大的方法来处理命令行参数\",{\"1\":{\"235\":1}}],[\"包提供了一个基于双链表实现的队列\",{\"1\":{\"160\":1}}],[\"包提供了一组用于加密和解密的功能\",{\"1\":{\"166\":1}}],[\"包提供了环形链表的实现\",{\"1\":{\"164\":1}}],[\"包提供了堆操作的接口\",{\"1\":{\"161\":1}}],[\"包提供了几种常用的数据结构实现\",{\"1\":{\"158\":1}}],[\"包提供了带缓冲的\",{\"1\":{\"143\":1}}],[\"包和\",{\"1\":{\"157\":1,\"280\":1}}],[\"包\",{\"1\":{\"143\":1,\"157\":1,\"163\":1,\"165\":1,\"306\":1,\"320\":1,\"325\":1,\"437\":1}}],[\"包含了\",{\"1\":{\"592\":2}}],[\"包含了字段和填充字节\",{\"1\":{\"451\":1}}],[\"包含了几乎所有的\",{\"1\":{\"79\":1}}],[\"包含一系列指令\",{\"1\":{\"58\":1}}],[\"包括临时重定向\",{\"1\":{\"568\":1}}],[\"包括它自己\",{\"1\":{\"423\":2}}],[\"包括变量\",{\"1\":{\"397\":1}}],[\"包括可选参数\",{\"1\":{\"235\":1}}],[\"包括哈希计算\",{\"1\":{\"185\":1}}],[\"包括时间的格式化\",{\"1\":{\"141\":1}}],[\"包括文件操作\",{\"1\":{\"139\":1,\"316\":1}}],[\"包括密码认证\",{\"1\":{\"133\":1}}],[\"包括认证\",{\"1\":{\"128\":1}}],[\"包括操作系统\",{\"1\":{\"78\":1}}],[\"包括docker\",{\"1\":{\"71\":1}}],[\"包括常见选项和示例\",{\"1\":{\"63\":1}}],[\"包括\",{\"1\":{\"35\":1,\"137\":1,\"141\":1}}],[\"包括工作目录和暂存区的更改\",{\"1\":{\"27\":1}}],[\"包括父目录\",{\"1\":{\"8\":1}}],[\"允许你对特定的路由组应用中间件\",{\"1\":{\"544\":1}}],[\"允许你对容器内的标准输入\",{\"1\":{\"90\":1}}],[\"允许一个\",{\"1\":{\"521\":1}}],[\"允许多个线程同时读取资源\",{\"1\":{\"530\":1}}],[\"允许多个\",{\"1\":{\"461\":1}}],[\"允许开发人员和运维团队轻松地追踪和回滚应用程序的版本\",{\"1\":{\"71\":1}}],[\"允许开发者将应用程序及其依赖项打包到一个可移植的容器中\",{\"1\":{\"58\":1}}],[\"允许在容器内运行应用程序\",{\"1\":{\"45\":1}}],[\"推送镜像\",{\"0\":{\"116\":1}}],[\"推送到远程仓库\",{\"1\":{\"39\":1}}],[\"推荐大家使用\",{\"1\":{\"94\":1}}],[\"推荐使用\",{\"1\":{\"56\":1,\"361\":1}}],[\"连接到指定的\",{\"1\":{\"310\":1}}],[\"连接到指定网络地址\",{\"1\":{\"309\":1}}],[\"连接到另一个容器的方法\",{\"1\":{\"53\":1}}],[\"连接\",{\"0\":{\"309\":1,\"310\":1}}],[\"连接的所有必要功能\",{\"1\":{\"128\":1}}],[\"连接容器\",{\"0\":{\"56\":1}}],[\"有几种方式可以创建一个上下文对象\",{\"1\":{\"487\":1}}],[\"有容量的通道在缓存未满时允许发送操作立即完成\",{\"1\":{\"468\":1}}],[\"有助于编写更高效的代码\",{\"1\":{\"451\":1}}],[\"有助于实现面向对象编程的抽象和多态\",{\"1\":{\"406\":1}}],[\"有助于实现良好的包封装\",{\"1\":{\"397\":1}}],[\"有时候一个操作会调用另一个可能出错的操作\",{\"1\":{\"384\":1}}],[\"有强大的生态支持\",{\"1\":{\"378\":1}}],[\"有较好支持\",{\"1\":{\"378\":1}}],[\"有必要存储append的结果\",{\"1\":{\"362\":1}}],[\"有\",{\"1\":{\"55\":1}}],[\"有一些重要的区别\",{\"1\":{\"364\":1}}],[\"有一些没有合并的文件\",{\"1\":{\"17\":1}}],[\"有一个连接系统允许将多个容器连接在一起\",{\"1\":{\"53\":1}}],[\"扩展和复用配置\",{\"1\":{\"52\":1}}],[\"配置\",{\"1\":{\"377\":1,\"378\":2}}],[\"配置变量\",{\"1\":{\"375\":1}}],[\"配置文件解析或者网络通信的程序时\",{\"1\":{\"330\":1}}],[\"配置文件名\",{\"1\":{\"95\":1}}],[\"配置文件等持久化存储在数据卷中\",{\"1\":{\"111\":1}}],[\"配置文件等\",{\"1\":{\"78\":1}}],[\"配置项解析\",{\"1\":{\"51\":1}}],[\"配置了卷\",{\"1\":{\"49\":1}}],[\"配置了工作目录\",{\"1\":{\"49\":1}}],[\"卷用于数据持久化和服务间共享数据\",{\"1\":{\"52\":1}}],[\"卷用于数据持久化和共享数据\",{\"1\":{\"51\":1}}],[\"卷挂载和数据持久化\",{\"1\":{\"52\":1}}],[\"卷\",{\"1\":{\"51\":1}}],[\"卷和镜像\",{\"1\":{\"50\":1}}],[\"您可以使用\",{\"1\":{\"129\":1}}],[\"您可以为不同的环境\",{\"1\":{\"52\":1}}],[\"您可以在多个项目中重用配置\",{\"1\":{\"52\":1}}],[\"您可以在\",{\"1\":{\"52\":1}}],[\"您可以定义卷并将其挂载到服务所需的位置\",{\"1\":{\"52\":1}}],[\"您可以定义一个卷\",{\"1\":{\"51\":1}}],[\"您可以定义一个或多个服务\",{\"1\":{\"51\":1}}],[\"您可以创建一个只供数据库和后端服务使用的内部网络\",{\"1\":{\"52\":1}}],[\"您可以自定义网络来实现服务间的隔离或通信\",{\"1\":{\"52\":1}}],[\"您就可以使用由一组容器组成的应用程序\",{\"1\":{\"43\":1}}],[\"还支持其他格式\",{\"1\":{\"572\":1}}],[\"还支持url解压缩和tar文件自动解压\",{\"1\":{\"62\":1}}],[\"还允许你在内部重定向到另一个路由处理函数\",{\"1\":{\"571\":1}}],[\"还提供了一些常见的\",{\"1\":{\"550\":1}}],[\"还提供了一种简化变量声明和初始化的语法糖\",{\"1\":{\"456\":1}}],[\"还提供了一种特殊的\",{\"1\":{\"416\":1}}],[\"还有其他常见的标签\",{\"1\":{\"449\":1}}],[\"还有一些运算符是右结合的\",{\"1\":{\"431\":1}}],[\"还可开发其他任意语言\",{\"1\":{\"378\":1}}],[\"还可以传递多种文件格式的文件\",{\"1\":{\"566\":1}}],[\"还可以用于定义数据结构\",{\"1\":{\"401\":1}}],[\"还可以当做变量\",{\"1\":{\"385\":1}}],[\"还可以结合\",{\"1\":{\"280\":1}}],[\"还可以进一步扩展和自定义这些功能\",{\"1\":{\"260\":1}}],[\"还是系统编程和数据处理\",{\"1\":{\"373\":1}}],[\"还是不会展现出任何变化\",{\"1\":{\"363\":1}}],[\"还是根据这个容量来限制呢\",{\"1\":{\"361\":1}}],[\"还是随机数生成\",{\"1\":{\"306\":1}}],[\"还是复杂的自定义处理\",{\"1\":{\"200\":1}}],[\"还能提供高效和可靠的解决方案\",{\"1\":{\"142\":1}}],[\"还包括了这些服务的配置\",{\"1\":{\"51\":1}}],[\"还原全部更改\",{\"1\":{\"27\":1}}],[\"还原文件到指定提交的状态\",{\"1\":{\"27\":1}}],[\"还原文件到暂存区的状态\",{\"1\":{\"27\":1}}],[\"还原文件到最新提交的状态\",{\"1\":{\"27\":1}}],[\"核心就是将\",{\"1\":{\"49\":1}}],[\"端口转发\",{\"1\":{\"133\":1}}],[\"端口上\",{\"1\":{\"118\":1}}],[\"端口绑定到容器内部的\",{\"1\":{\"118\":1}}],[\"端口映射到什么位置\",{\"1\":{\"121\":1}}],[\"端口映射既可以是本地端口映射\",{\"1\":{\"120\":1}}],[\"端口映射\",{\"1\":{\"51\":2}}],[\"端口\",{\"1\":{\"49\":2,\"119\":3,\"120\":2}}],[\"0x000c\",{\"1\":{\"455\":1}}],[\"0x0004\",{\"1\":{\"455\":1}}],[\"0x0000\",{\"1\":{\"455\":2}}],[\"0x1400012a0b0\",{\"1\":{\"435\":1}}],[\"07\",{\"1\":{\"336\":1}}],[\"0755\",{\"1\":{\"317\":2}}],[\"05\",{\"1\":{\"335\":2,\"336\":2}}],[\"0666\",{\"1\":{\"292\":1,\"297\":1}}],[\"09t12\",{\"1\":{\"99\":1}}],[\"02\",{\"1\":{\"99\":1,\"335\":1,\"336\":1}}],[\"00\",{\"1\":{\"99\":4}}],[\"001\",{\"1\":{\"98\":2,\"428\":1}}],[\"011\",{\"1\":{\"428\":1}}],[\"01\",{\"1\":{\"99\":4,\"335\":1,\"336\":1}}],[\"03\",{\"1\":{\"70\":1}}],[\"04\",{\"1\":{\"56\":2,\"85\":4,\"116\":3,\"335\":2,\"336\":1}}],[\"0\",{\"1\":{\"49\":2,\"62\":1,\"66\":1,\"70\":1,\"83\":2,\"92\":1,\"119\":4,\"120\":4,\"132\":9,\"161\":3,\"200\":1,\"234\":1,\"303\":2,\"306\":1,\"309\":1,\"312\":2,\"314\":1,\"340\":2,\"349\":1,\"351\":3,\"356\":2,\"357\":3,\"361\":2,\"362\":8,\"367\":2,\"389\":1,\"395\":3,\"401\":2,\"403\":1,\"415\":2,\"416\":2,\"421\":1,\"437\":2,\"450\":1,\"451\":3,\"456\":1,\"458\":1,\"462\":2,\"463\":2,\"464\":2,\"465\":3,\"475\":1,\"476\":1,\"483\":1,\"501\":1,\"514\":1,\"515\":2,\"516\":1,\"524\":1,\"530\":1,\"532\":1,\"534\":1,\"535\":2,\"540\":3,\"550\":1}}],[\"7519\",{\"1\":{\"590\":1,\"591\":1}}],[\"7\",{\"0\":{\"183\":1,\"259\":1,\"279\":1,\"314\":1,\"350\":1,\"353\":1,\"393\":1,\"459\":1,\"578\":1},\"1\":{\"49\":1,\"83\":1,\"351\":1,\"363\":1,\"390\":1,\"425\":1,\"428\":1}}],[\"桌面版和\",{\"1\":{\"48\":2}}],[\"obj\",{\"1\":{\"572\":9}}],[\"object\",{\"1\":{\"410\":1}}],[\"out\",{\"0\":{\"481\":1},\"1\":{\"480\":4,\"482\":12,\"490\":1,\"492\":1}}],[\"output\",{\"1\":{\"191\":1,\"192\":1,\"276\":1,\"299\":2,\"394\":1,\"480\":2}}],[\"omitempty\",{\"1\":{\"447\":2,\"448\":2}}],[\"or\",{\"1\":{\"492\":1}}],[\"orm\",{\"1\":{\"449\":1}}],[\"orresult\",{\"1\":{\"427\":1,\"428\":1}}],[\"order\",{\"0\":{\"321\":1}}],[\"org\",{\"0\":{\"127\":1},\"1\":{\"128\":1,\"129\":2,\"131\":1,\"132\":1,\"134\":1,\"309\":1,\"314\":1}}],[\"otherwise\",{\"1\":{\"550\":3}}],[\"other\",{\"1\":{\"315\":1}}],[\"ok\",{\"1\":{\"315\":2,\"411\":2,\"422\":2,\"474\":2,\"492\":4,\"550\":5,\"551\":5,\"598\":4}}],[\"of\",{\"1\":{\"234\":1,\"415\":1,\"451\":16,\"551\":4,\"576\":6}}],[\"offsetof\",{\"1\":{\"451\":6}}],[\"offset\",{\"1\":{\"451\":12}}],[\"official\",{\"1\":{\"82\":1}}],[\"off\",{\"1\":{\"62\":1}}],[\"oldpath\",{\"1\":{\"317\":1}}],[\"old\",{\"1\":{\"161\":4,\"421\":1,\"422\":1,\"569\":3,\"570\":3}}],[\"operations\",{\"0\":{\"535\":1},\"1\":{\"461\":1}}],[\"operator\",{\"1\":{\"455\":4}}],[\"openfile\",{\"1\":{\"292\":1,\"297\":1}}],[\"opening\",{\"1\":{\"180\":2,\"185\":2,\"188\":1,\"189\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1}}],[\"open\",{\"1\":{\"136\":1,\"180\":2,\"185\":2,\"188\":1,\"189\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"317\":2,\"381\":2}}],[\"optimizedstruct\",{\"1\":{\"451\":5}}],[\"options\",{\"1\":{\"64\":2}}],[\"os\",{\"0\":{\"316\":1},\"1\":{\"131\":3,\"132\":1,\"136\":3,\"150\":2,\"151\":2,\"152\":2,\"157\":1,\"179\":3,\"180\":3,\"184\":3,\"185\":3,\"188\":2,\"189\":2,\"191\":2,\"192\":2,\"194\":2,\"196\":2,\"198\":2,\"200\":2,\"209\":2,\"223\":2,\"234\":6,\"265\":2,\"268\":2,\"271\":2,\"273\":2,\"276\":3,\"280\":3,\"287\":1,\"288\":1,\"292\":3,\"297\":3,\"299\":2,\"316\":2,\"317\":7,\"318\":2,\"319\":3,\"320\":4,\"381\":1}}],[\"osx\",{\"1\":{\"31\":1}}],[\"overlay\",{\"1\":{\"55\":1}}],[\"one\",{\"1\":{\"403\":2,\"551\":1,\"552\":1}}],[\"on\",{\"1\":{\"51\":1,\"132\":1,\"540\":1,\"551\":1}}],[\"o\",{\"1\":{\"48\":1,\"143\":1,\"157\":1,\"292\":3,\"297\":3,\"506\":1,\"507\":2}}],[\"3600\",{\"1\":{\"584\":1}}],[\"35\",{\"1\":{\"444\":1}}],[\"34\",{\"1\":{\"336\":1}}],[\"32\",{\"1\":{\"329\":1,\"455\":1}}],[\"37\",{\"1\":{\"99\":1}}],[\"301\",{\"1\":{\"570\":2}}],[\"302\",{\"1\":{\"569\":2}}],[\"30\",{\"1\":{\"191\":1,\"192\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":1,\"214\":1,\"217\":1,\"218\":1,\"223\":1,\"225\":1,\"226\":1,\"231\":1,\"237\":2,\"240\":2,\"285\":1,\"288\":1,\"290\":1,\"323\":1,\"325\":1,\"420\":1,\"422\":1,\"425\":1,\"444\":1,\"447\":2}}],[\"30m\",{\"1\":{\"99\":1}}],[\"3000\",{\"1\":{\"49\":2}}],[\"3\",{\"0\":{\"109\":1,\"153\":1,\"161\":1,\"173\":1,\"193\":1,\"207\":1,\"221\":1,\"233\":1,\"239\":1,\"251\":1,\"269\":1,\"291\":1,\"303\":1,\"310\":1,\"324\":1,\"329\":1,\"337\":1,\"389\":1,\"452\":1,\"481\":1,\"521\":1,\"526\":1,\"532\":1,\"540\":1,\"545\":1,\"548\":1,\"552\":1,\"571\":1,\"584\":1,\"588\":1,\"599\":1,\"604\":1},\"1\":{\"48\":1,\"49\":2,\"51\":1,\"52\":3,\"112\":1,\"161\":2,\"164\":2,\"302\":12,\"305\":4,\"322\":4,\"327\":2,\"328\":2,\"356\":6,\"357\":7,\"361\":2,\"362\":16,\"363\":8,\"365\":1,\"366\":1,\"367\":5,\"387\":1,\"388\":2,\"389\":1,\"390\":1,\"393\":1,\"400\":1,\"402\":1,\"403\":1,\"404\":3,\"409\":1,\"416\":1,\"417\":3,\"418\":1,\"425\":2,\"428\":1,\"437\":1,\"451\":3,\"455\":4,\"479\":1,\"481\":1,\"482\":1,\"483\":1,\"490\":1,\"491\":1,\"492\":1,\"532\":1,\"540\":1}}],[\"$version\",{\"1\":{\"66\":1}}],[\"$\",{\"1\":{\"48\":3,\"52\":1}}],[\"yield\",{\"1\":{\"506\":1}}],[\"year\",{\"1\":{\"340\":1}}],[\"years\",{\"1\":{\"240\":2,\"421\":1,\"422\":1}}],[\"york\",{\"1\":{\"191\":1,\"192\":1,\"352\":2}}],[\"your\",{\"1\":{\"131\":3,\"231\":2,\"232\":4,\"234\":2,\"239\":1}}],[\"you\",{\"1\":{\"17\":1,\"540\":2}}],[\"y\",{\"1\":{\"59\":1,\"62\":1,\"302\":1,\"388\":5,\"393\":2,\"395\":3,\"396\":6,\"436\":8}}],[\"yaml\",{\"1\":{\"49\":1,\"449\":4,\"572\":3}}],[\"yaml格式\",{\"1\":{\"47\":1}}],[\"yarn\",{\"1\":{\"49\":2}}],[\"yml文件示例\",{\"1\":{\"51\":1}}],[\"yml文件是docker\",{\"1\":{\"51\":1}}],[\"yml中\",{\"1\":{\"51\":1}}],[\"yml\",{\"1\":{\"47\":2,\"51\":1}}],[\"最常见的实现方式是使用\",{\"1\":{\"579\":1}}],[\"最大并发数\",{\"1\":{\"532\":1}}],[\"最大可达\",{\"1\":{\"496\":1}}],[\"最大值和最小值\",{\"0\":{\"305\":1}}],[\"最终结果是不确定的\",{\"1\":{\"462\":1}}],[\"最核心的知识\",{\"1\":{\"77\":1}}],[\"最新版替换v后面的版本号即可\",{\"1\":{\"48\":1}}],[\"最新的\",{\"1\":{\"45\":1}}],[\"最后\",{\"1\":{\"47\":1,\"163\":1}}],[\"最后一个\",{\"1\":{\"7\":1}}],[\"不提供内置的会话管理功能\",{\"1\":{\"580\":1}}],[\"不太常见\",{\"1\":{\"579\":1}}],[\"不存在则返回空字符串数组\",{\"1\":{\"551\":1}}],[\"不存在则返回指定的默认值\",{\"1\":{\"550\":1}}],[\"不存在则返回\",{\"1\":{\"550\":1}}],[\"不必我们手动实现\",{\"1\":{\"445\":1}}],[\"不必理会\",{\"1\":{\"118\":1}}],[\"不能直接把\",{\"1\":{\"458\":1}}],[\"不能直接存储键值对\",{\"1\":{\"421\":1}}],[\"不能使用\",{\"1\":{\"444\":1}}],[\"不要使用\",{\"1\":{\"423\":1}}],[\"不等于\",{\"1\":{\"423\":1,\"426\":1,\"431\":1}}],[\"不等于任何值\",{\"1\":{\"423\":1}}],[\"不过\",{\"1\":{\"419\":1,\"437\":1,\"455\":1}}],[\"不需要像\",{\"1\":{\"415\":1}}],[\"不就可以了吗\",{\"1\":{\"399\":1}}],[\"不管调用者是不是指针\",{\"1\":{\"396\":1}}],[\"不仅仅支持这几种格式\",{\"1\":{\"572\":1}}],[\"不仅难度高\",{\"1\":{\"456\":1}}],[\"不仅可以当做代码的封装\",{\"1\":{\"385\":1}}],[\"不仅能帮助开发者快速构建应用程序\",{\"1\":{\"142\":1}}],[\"不同的是\",{\"1\":{\"385\":1}}],[\"不同日志级别\",{\"1\":{\"299\":1}}],[\"不同在于它是在容器内部运行的\",{\"1\":{\"45\":1}}],[\"不添加换行符\",{\"1\":{\"237\":1}}],[\"不包含任何方法\",{\"1\":{\"410\":1}}],[\"不包含换行符\",{\"1\":{\"148\":1}}],[\"不包含中文\",{\"1\":{\"8\":1}}],[\"不匹配\",{\"1\":{\"118\":1}}],[\"不但可以下载需要的镜像\",{\"1\":{\"114\":1}}],[\"不受容器生命周期影响\",{\"1\":{\"105\":1}}],[\"不理解属于正常情况\",{\"1\":{\"101\":1}}],[\"不会自动返回错误的响应\",{\"1\":{\"553\":1}}],[\"不会立即阻塞发送操作\",{\"1\":{\"473\":1}}],[\"不会影响原有的值\",{\"1\":{\"396\":1}}],[\"不会改变原有的数组值\",{\"1\":{\"358\":1}}],[\"不会导致容器的停止\",{\"1\":{\"94\":1}}],[\"不会重复下载\",{\"1\":{\"60\":1}}],[\"不变\",{\"1\":{\"87\":1}}],[\"不在当前目录下\",{\"1\":{\"66\":1}}],[\"不使用缓存重新构建\",{\"1\":{\"66\":1}}],[\"不使用缓存\",{\"1\":{\"65\":1,\"66\":1}}],[\"不可被覆盖\",{\"1\":{\"62\":1}}],[\"样例剖析\",{\"0\":{\"45\":1}}],[\"只能先转换为结构体\",{\"1\":{\"552\":1}}],[\"只能直接调用自身绑定的方法\",{\"1\":{\"396\":1}}],[\"只有当所有线程都到达这个点时\",{\"1\":{\"534\":1}}],[\"只有一个线程可以访问某个资源\",{\"1\":{\"530\":1}}],[\"只有在\",{\"1\":{\"451\":1}}],[\"只有在修改切片内元素的时候\",{\"1\":{\"363\":1}}],[\"只有在提交后\",{\"1\":{\"11\":1}}],[\"只需要在函数调用前加上\",{\"1\":{\"495\":1}}],[\"只需要使用\",{\"1\":{\"457\":1}}],[\"只需实现这个方法即可\",{\"1\":{\"380\":1}}],[\"只要能够拿到对应的数据地址\",{\"1\":{\"437\":1}}],[\"只要所有字段支持\",{\"1\":{\"421\":1}}],[\"只要动态类型支持\",{\"1\":{\"421\":1}}],[\"只要你实现了接口中定义的所有方法\",{\"1\":{\"408\":1}}],[\"只要出现如上的镜像链接\",{\"1\":{\"44\":1}}],[\"只接受可比较的类型\",{\"1\":{\"402\":1}}],[\"只是为了使下一个字段的起始地址满足对齐要求\",{\"1\":{\"451\":1}}],[\"只是数据类型不同\",{\"1\":{\"399\":1}}],[\"只是切片中没有初始化长度\",{\"1\":{\"361\":1}}],[\"只在函数名前面多了\",{\"1\":{\"396\":1}}],[\"只不过是在编译阶段\",{\"1\":{\"445\":1}}],[\"只不过数据类型从基本类型变成了指针类型\",{\"1\":{\"440\":1}}],[\"只不过该副本中的内容和原指针变量的内容相同\",{\"1\":{\"436\":1}}],[\"只不过\",{\"1\":{\"100\":1}}],[\"只显示最后100行\",{\"1\":{\"99\":1}}],[\"内容\",{\"1\":{\"603\":1,\"606\":1}}],[\"内容给客户端\",{\"1\":{\"601\":1}}],[\"内存屏障是一种\",{\"1\":{\"512\":1}}],[\"内存屏障\",{\"0\":{\"512\":1}}],[\"内存操作按程序顺序执行\",{\"1\":{\"509\":1}}],[\"内存模型规则\",{\"0\":{\"518\":1}}],[\"内存模型概述\",{\"0\":{\"509\":1}}],[\"内存模型描述了程序中线程或\",{\"1\":{\"508\":1}}],[\"内存模型\",{\"0\":{\"508\":1}}],[\"内存地址\",{\"1\":{\"455\":1}}],[\"内存布局优化\",{\"1\":{\"451\":1}}],[\"内存布局解释\",{\"1\":{\"451\":1}}],[\"内存优化\",{\"1\":{\"451\":1}}],[\"内存对齐实际上是一种用空间换时间的设计\",{\"1\":{\"451\":1}}],[\"内存对齐\",{\"1\":{\"451\":1}}],[\"内存消耗\",{\"1\":{\"450\":1}}],[\"内部重定向\",{\"0\":{\"571\":1}}],[\"内部\",{\"1\":{\"415\":1}}],[\"内置错误处理机制\",{\"1\":{\"538\":1}}],[\"内置的数据类型一样\",{\"1\":{\"446\":1}}],[\"内置的数据类型\",{\"1\":{\"443\":1}}],[\"内置的数据结构\",{\"1\":{\"420\":1}}],[\"内置了许多功能\",{\"1\":{\"378\":1}}],[\"内置函数将元素附加到切片的末尾\",{\"1\":{\"362\":1}}],[\"内\",{\"1\":{\"44\":1}}],[\"内核开发而开发的一个开放源码的版本控制软件\",{\"1\":{\"29\":1}}],[\"七牛云\",{\"1\":{\"44\":1}}],[\"even\",{\"1\":{\"550\":1}}],[\"events\",{\"0\":{\"533\":1}}],[\"email\",{\"1\":{\"447\":4,\"448\":1,\"556\":2}}],[\"emptystruct\",{\"1\":{\"450\":3}}],[\"empty\",{\"1\":{\"8\":1,\"450\":1,\"550\":2}}],[\"eappend\",{\"1\":{\"362\":1}}],[\"earlier\",{\"1\":{\"339\":4}}],[\"equal\",{\"1\":{\"342\":2}}],[\"eof\",{\"1\":{\"189\":1,\"196\":1,\"198\":1,\"228\":1,\"229\":1}}],[\"ec\",{\"1\":{\"184\":2}}],[\"ecdsa\",{\"0\":{\"184\":1},\"1\":{\"184\":6,\"185\":7}}],[\"echo\",{\"1\":{\"45\":3,\"66\":1,\"103\":2,\"372\":1}}],[\"elem2\",{\"1\":{\"362\":1}}],[\"elem1\",{\"1\":{\"362\":1}}],[\"elems\",{\"1\":{\"362\":1}}],[\"element\",{\"1\":{\"162\":1,\"163\":1,\"229\":1,\"437\":2}}],[\"elliptic\",{\"1\":{\"184\":2,\"185\":1}}],[\"else\",{\"1\":{\"132\":1,\"254\":1,\"312\":1,\"315\":1,\"411\":1,\"414\":6,\"415\":1,\"421\":1,\"492\":1,\"590\":1}}],[\"e\",{\"1\":{\"160\":5,\"162\":10,\"163\":1,\"301\":2,\"304\":3}}],[\"errfailedauthentication\",{\"1\":{\"598\":1}}],[\"errmissingloginvalues\",{\"1\":{\"598\":1}}],[\"err\",{\"1\":{\"131\":9,\"132\":18,\"145\":3,\"146\":3,\"147\":3,\"148\":3,\"151\":3,\"152\":3,\"154\":4,\"155\":4,\"177\":6,\"179\":12,\"180\":24,\"184\":15,\"185\":21,\"188\":6,\"189\":7,\"191\":6,\"192\":6,\"194\":6,\"196\":7,\"198\":7,\"200\":6,\"203\":3,\"204\":3,\"206\":3,\"208\":3,\"209\":3,\"211\":3,\"212\":6,\"214\":6,\"217\":3,\"218\":3,\"220\":3,\"222\":3,\"223\":3,\"225\":3,\"226\":6,\"228\":4,\"229\":7,\"241\":3,\"249\":6,\"250\":6,\"252\":6,\"263\":1,\"264\":3,\"265\":3,\"267\":1,\"268\":3,\"270\":3,\"271\":3,\"273\":6,\"275\":3,\"276\":6,\"278\":3,\"280\":3,\"292\":3,\"297\":3,\"308\":6,\"309\":10,\"310\":24,\"311\":3,\"313\":6,\"314\":4,\"315\":3,\"317\":18,\"318\":3,\"320\":11,\"327\":6,\"329\":6,\"336\":3,\"352\":3,\"383\":4,\"384\":3,\"395\":3,\"447\":6,\"550\":1,\"553\":8,\"555\":3,\"556\":3,\"559\":2,\"584\":2,\"598\":5}}],[\"errors\",{\"1\":{\"379\":1,\"382\":3,\"384\":5}}],[\"errorhandler\",{\"1\":{\"260\":2}}],[\"errorf\",{\"1\":{\"241\":2,\"395\":1}}],[\"error\",{\"1\":{\"99\":2,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"177\":2,\"179\":4,\"180\":8,\"184\":5,\"185\":7,\"188\":2,\"189\":3,\"191\":2,\"192\":2,\"194\":2,\"196\":3,\"198\":3,\"200\":2,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":2,\"212\":2,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":2,\"228\":2,\"229\":3,\"241\":2,\"263\":1,\"267\":1,\"315\":4,\"317\":7,\"318\":2,\"320\":3,\"327\":2,\"329\":3,\"336\":1,\"352\":1,\"379\":1,\"380\":4,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"395\":3,\"412\":2,\"447\":2,\"544\":1,\"553\":4,\"555\":2,\"556\":2,\"559\":1,\"598\":3}}],[\"e650c5f208da\",{\"1\":{\"87\":2,\"88\":2}}],[\"ee\",{\"1\":{\"70\":1}}],[\"edition\",{\"1\":{\"70\":2}}],[\"edu\",{\"1\":{\"44\":1}}],[\"exists\",{\"1\":{\"421\":2,\"423\":9,\"450\":2,\"550\":3,\"551\":1,\"552\":1}}],[\"exit\",{\"1\":{\"85\":1,\"287\":1,\"288\":1,\"319\":2}}],[\"expiration\",{\"1\":{\"592\":1}}],[\"expired\",{\"1\":{\"345\":1}}],[\"expression\",{\"1\":{\"415\":3}}],[\"exp\",{\"1\":{\"304\":3,\"592\":1}}],[\"expectedmac\",{\"1\":{\"182\":2}}],[\"exported\",{\"1\":{\"397\":1}}],[\"export\",{\"1\":{\"95\":1,\"540\":1}}],[\"expose\",{\"1\":{\"59\":2,\"62\":2,\"67\":1}}],[\"exec\",{\"1\":{\"94\":4}}],[\"example\",{\"1\":{\"49\":1,\"51\":1,\"62\":1,\"177\":1,\"249\":1,\"250\":1,\"252\":1,\"308\":2,\"313\":2,\"315\":1,\"553\":1}}],[\"encrypting\",{\"1\":{\"180\":1}}],[\"encryption\",{\"1\":{\"180\":1}}],[\"encryptpkcs1v15\",{\"1\":{\"180\":1}}],[\"encrypted\",{\"1\":{\"177\":1,\"180\":1}}],[\"encoder\",{\"1\":{\"209\":2,\"223\":2}}],[\"encode\",{\"1\":{\"179\":2,\"184\":2,\"209\":1,\"223\":1}}],[\"encoding\",{\"0\":{\"186\":1,\"201\":1,\"215\":1},\"1\":{\"140\":3,\"179\":1,\"180\":1,\"184\":1,\"185\":1,\"186\":2,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":2,\"201\":2,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":2,\"211\":1,\"212\":1,\"214\":2,\"215\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":2,\"225\":1,\"226\":1,\"228\":1,\"229\":2,\"447\":1}}],[\"enter\",{\"1\":{\"239\":1}}],[\"enterprise\",{\"1\":{\"70\":1}}],[\"entrypoint\",{\"1\":{\"62\":2}}],[\"env\",{\"1\":{\"62\":2,\"540\":1}}],[\"env文件中定义web\",{\"1\":{\"52\":1}}],[\"env文件来配置服务\",{\"1\":{\"52\":1}}],[\"environment\",{\"1\":{\"49\":1,\"51\":2}}],[\"endtime\",{\"1\":{\"543\":2}}],[\"end网络\",{\"1\":{\"52\":2}}],[\"end\",{\"1\":{\"52\":6,\"480\":2}}],[\"engine\",{\"1\":{\"44\":1,\"62\":1,\"540\":1}}],[\"etc\",{\"1\":{\"44\":1}}],[\"网络接口\",{\"0\":{\"311\":1}}],[\"网络地址解析\",{\"0\":{\"308\":1}}],[\"网络编程\",{\"0\":{\"536\":1},\"1\":{\"139\":1}}],[\"网络和io\",{\"0\":{\"139\":1}}],[\"网络和卷\",{\"1\":{\"43\":1}}],[\"网络端口映射\",{\"1\":{\"120\":1}}],[\"网络类型\",{\"1\":{\"55\":1}}],[\"网络配置\",{\"1\":{\"52\":1}}],[\"网络\",{\"1\":{\"50\":1,\"51\":1}}],[\"网易\",{\"1\":{\"44\":1}}],[\"阿里云\",{\"1\":{\"44\":1}}],[\"故一般用来传递一些非敏感信息\",{\"1\":{\"549\":1}}],[\"故一定和当前分支一致\",{\"1\":{\"10\":1}}],[\"故修改形参后能够对原数据造成改变\",{\"1\":{\"446\":1}}],[\"故修改形参时\",{\"1\":{\"396\":1}}],[\"故有指针的指针\",{\"1\":{\"439\":1}}],[\"故可以使用\",{\"1\":{\"420\":1}}],[\"故会修改原值\",{\"1\":{\"396\":1}}],[\"故在修改形参后\",{\"1\":{\"396\":1}}],[\"故方法的接收者为指针时\",{\"1\":{\"396\":1}}],[\"故这里不必定义可直接使用\",{\"1\":{\"388\":1}}],[\"故不会展现出任何变化\",{\"1\":{\"363\":1}}],[\"故不表现出任何变化\",{\"1\":{\"363\":1}}],[\"故表现出来的是没有做任何修改\",{\"1\":{\"363\":1}}],[\"故对形参修改\",{\"1\":{\"363\":1}}],[\"故操作形参数组\",{\"1\":{\"358\":1}}],[\"故多余的数为零值\",{\"1\":{\"356\":1}}],[\"故支持随机访问\",{\"1\":{\"354\":1}}],[\"故使用\",{\"1\":{\"79\":1}}],[\"故\",{\"1\":{\"72\":1,\"553\":1}}],[\"故此\",{\"1\":{\"44\":1}}],[\"镜像源默认是在海外\",{\"1\":{\"101\":1}}],[\"镜像名\",{\"1\":{\"100\":1}}],[\"镜像名称\",{\"1\":{\"90\":1,\"98\":1}}],[\"镜像导入\",{\"1\":{\"88\":1}}],[\"镜像导入和导出\",{\"0\":{\"88\":1}}],[\"镜像导出\",{\"1\":{\"88\":1}}],[\"镜像标签\",{\"0\":{\"87\":1}}],[\"镜像仓库源的名称\",{\"1\":{\"82\":1}}],[\"镜像为例做演示说明\",{\"1\":{\"82\":1}}],[\"镜像大小\",{\"1\":{\"81\":1}}],[\"镜像id\",{\"1\":{\"81\":1}}],[\"镜像列表\",{\"0\":{\"81\":1}}],[\"镜像不在本地仓库中\",{\"1\":{\"80\":1}}],[\"镜像实例化一个\",{\"1\":{\"79\":1}}],[\"镜像创建时间\",{\"1\":{\"81\":1}}],[\"镜像创建对象之前\",{\"1\":{\"79\":1}}],[\"镜像创建一个新容器\",{\"1\":{\"45\":1}}],[\"镜像可以看做是一个静态模板\",{\"1\":{\"79\":1}}],[\"镜像可以包含操作系统\",{\"1\":{\"78\":1}}],[\"镜像的\",{\"1\":{\"114\":1}}],[\"镜像的更新就是在目前运行的\",{\"1\":{\"85\":1}}],[\"镜像的描述\",{\"1\":{\"82\":1}}],[\"镜像的各种版本信息\",{\"1\":{\"82\":1}}],[\"镜像的标签\",{\"1\":{\"81\":1}}],[\"镜像的相关操作中\",{\"1\":{\"89\":1}}],[\"镜像的相关操作\",{\"1\":{\"80\":1}}],[\"镜像的地方\",{\"1\":{\"78\":1,\"79\":1,\"100\":1}}],[\"镜像的一个运行实例\",{\"1\":{\"78\":1}}],[\"镜像的文本文件\",{\"1\":{\"58\":1}}],[\"镜像是一个只读的模板\",{\"1\":{\"78\":1}}],[\"镜像结构\",{\"0\":{\"60\":1}}],[\"镜像存储在国外的\",{\"1\":{\"44\":1}}],[\"镜像\",{\"0\":{\"77\":1,\"79\":1},\"1\":{\"44\":1,\"49\":2,\"58\":1,\"63\":2,\"68\":1,\"78\":2,\"79\":3,\"83\":1,\"84\":2,\"85\":2,\"95\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"请参考\",{\"1\":{\"591\":1}}],[\"请参考官方文档和代码示例\",{\"1\":{\"134\":1}}],[\"请重启电脑使得环境变量生效即可\",{\"1\":{\"375\":1}}],[\"请求提交用户名和密码到\",{\"1\":{\"600\":1}}],[\"请求的\",{\"1\":{\"593\":1}}],[\"请求的参数通常涉及解析请求体中的数据\",{\"1\":{\"554\":1}}],[\"请求的参数不具有任何安全性\",{\"1\":{\"549\":1}}],[\"请求的参数会显式的展示在\",{\"1\":{\"549\":1}}],[\"请求体\",{\"1\":{\"555\":1}}],[\"请求传递了两个参数\",{\"1\":{\"549\":1}}],[\"请求参数的一种\",{\"1\":{\"557\":1}}],[\"请求参数\",{\"0\":{\"548\":1}}],[\"请求处理和响应处理等高级功能\",{\"1\":{\"577\":1}}],[\"请求处理和响应处理等\",{\"1\":{\"541\":1}}],[\"请求并读取响应\",{\"1\":{\"249\":1,\"250\":1}}],[\"请求并管理\",{\"1\":{\"43\":1}}],[\"请求\",{\"0\":{\"249\":1,\"250\":1},\"1\":{\"550\":1,\"551\":1,\"552\":1,\"553\":2,\"555\":1,\"556\":1,\"557\":1}}],[\"请在\",{\"1\":{\"44\":1}}],[\"请确保目录名\",{\"1\":{\"8\":1}}],[\"侦听\",{\"1\":{\"43\":1}}],[\"守护程序\",{\"1\":{\"43\":1}}],[\"守护进程也可以\",{\"1\":{\"43\":1}}],[\"守护进程\",{\"1\":{\"43\":2}}],[\"服务器不需要在本地存储会话信息\",{\"1\":{\"594\":1}}],[\"服务器不会自动跟踪用户的状态\",{\"1\":{\"578\":1}}],[\"服务器可以信任\",{\"1\":{\"593\":1}}],[\"服务器使用相同的算法和密钥解密\",{\"1\":{\"593\":1}}],[\"服务器使用私钥对\",{\"1\":{\"593\":1}}],[\"服务器验证用户身份成功后\",{\"1\":{\"593\":1}}],[\"服务器端\",{\"1\":{\"589\":1}}],[\"服务器为每个会话创建一个唯一的会话标识符\",{\"1\":{\"586\":1}}],[\"服务器通过\",{\"1\":{\"586\":1}}],[\"服务器通过解析\",{\"1\":{\"579\":1}}],[\"服务器通常会维护一个会话管理器来处理会话的创建\",{\"1\":{\"579\":1}}],[\"服务器在响应中设置一个名为\",{\"1\":{\"579\":1}}],[\"服务器将返回一个\",{\"1\":{\"569\":1,\"570\":1}}],[\"服务器并处理连接\",{\"1\":{\"132\":1}}],[\"服务器并执行命令\",{\"1\":{\"131\":1}}],[\"服务器示例\",{\"1\":{\"132\":1}}],[\"服务器\",{\"0\":{\"132\":1,\"245\":1,\"246\":1},\"1\":{\"246\":1,\"541\":1}}],[\"服务的\",{\"1\":{\"112\":1}}],[\"服务的机器\",{\"1\":{\"43\":1}}],[\"服务代表一个容器\",{\"1\":{\"51\":1}}],[\"服务使用了\",{\"1\":{\"49\":1}}],[\"服务使用到了\",{\"1\":{\"49\":2}}],[\"服务\",{\"1\":{\"43\":1,\"51\":1,\"372\":1}}],[\"服务端\",{\"1\":{\"43\":1}}],[\"另一个操作\",{\"1\":{\"511\":1}}],[\"另一个\",{\"1\":{\"43\":1}}],[\"另外当你在学习本小节时\",{\"1\":{\"101\":1}}],[\"另外\",{\"1\":{\"18\":1,\"120\":1,\"456\":1}}],[\"另外一种是我们自己创建本地的版本库\",{\"1\":{\"6\":1}}],[\"套接字或网络接口\",{\"1\":{\"43\":1}}],[\"进入临界区\",{\"1\":{\"530\":1,\"531\":2,\"532\":1}}],[\"进入该目录\",{\"1\":{\"8\":1}}],[\"进一步增强了代码的可重用性和可维护性\",{\"1\":{\"405\":1}}],[\"进程间通信\",{\"1\":{\"504\":1}}],[\"进程之间切换的开销较大\",{\"1\":{\"504\":1}}],[\"进程之间是相互独立的\",{\"1\":{\"504\":1}}],[\"进程是操作系统中资源分配的基本单位\",{\"1\":{\"504\":1}}],[\"进程\",{\"0\":{\"503\":1,\"504\":1},\"1\":{\"507\":1}}],[\"进程操作\",{\"0\":{\"319\":1}}],[\"进程管理等\",{\"1\":{\"316\":1}}],[\"进行用户身份验证\",{\"1\":{\"599\":1}}],[\"进行保护的路由示例\",{\"1\":{\"598\":1}}],[\"进行签名生成\",{\"1\":{\"593\":1}}],[\"进行签名生成的一段字符串\",{\"1\":{\"592\":1}}],[\"进行并行处理\",{\"1\":{\"481\":1}}],[\"进行信号传递时\",{\"1\":{\"450\":1}}],[\"进行操作\",{\"1\":{\"416\":1}}],[\"进行测试\",{\"1\":{\"258\":1}}],[\"进行高效的编码和解码操作\",{\"1\":{\"214\":1,\"229\":1}}],[\"进行高效的操作\",{\"1\":{\"200\":1}}],[\"进行数据完整性验证\",{\"1\":{\"182\":1}}],[\"进行交互\",{\"1\":{\"90\":1}}],[\"进行配置教程\",{\"1\":{\"44\":1}}],[\"进行通信\",{\"1\":{\"43\":1,\"494\":1}}],[\"通配符必须作为路径的最后一个元素\",{\"1\":{\"575\":1}}],[\"通配符时\",{\"1\":{\"575\":1}}],[\"通配符匹配所有\",{\"1\":{\"575\":1}}],[\"通配符在\",{\"1\":{\"575\":1}}],[\"通信复杂\",{\"1\":{\"504\":1}}],[\"通信\",{\"1\":{\"477\":1}}],[\"通信顺序\",{\"1\":{\"468\":1}}],[\"通知等待的\",{\"1\":{\"531\":1}}],[\"通知\",{\"1\":{\"450\":1}}],[\"通道关闭\",{\"1\":{\"527\":1}}],[\"通道传递规则\",{\"1\":{\"518\":1}}],[\"通道是\",{\"1\":{\"477\":1,\"497\":1,\"517\":1}}],[\"通道已关闭\",{\"1\":{\"474\":1}}],[\"通道使用\",{\"1\":{\"470\":1}}],[\"通道可以防止多个协程访问共享内存时发生资源争抢的问题\",{\"1\":{\"494\":1}}],[\"通道可以被显式关闭\",{\"1\":{\"474\":1}}],[\"通道可以使用\",{\"1\":{\"469\":1}}],[\"通道可以是有限容量的\",{\"1\":{\"468\":1}}],[\"通道的任务\",{\"1\":{\"481\":1}}],[\"通道的使用场景\",{\"0\":{\"477\":1}}],[\"通道的创建\",{\"0\":{\"469\":1}}],[\"通道的消息\",{\"1\":{\"418\":1}}],[\"通道保证发送和接收操作的顺序是一致的\",{\"1\":{\"468\":1}}],[\"通道本质上是并发安全的\",{\"1\":{\"468\":1}}],[\"通道提供了一种安全\",{\"1\":{\"467\":1}}],[\"通道\",{\"0\":{\"467\":1,\"517\":1},\"1\":{\"461\":1,\"465\":1,\"467\":1,\"479\":1,\"481\":1,\"509\":1}}],[\"通道和数据流\",{\"1\":{\"133\":1}}],[\"通道和流\",{\"1\":{\"133\":1}}],[\"通道和流的处理\",{\"1\":{\"128\":1}}],[\"通常不超过\",{\"1\":{\"589\":1}}],[\"通常会使用\",{\"1\":{\"587\":1}}],[\"通常会话标识符是一个唯一的字符串\",{\"1\":{\"579\":1}}],[\"通常情况下\",{\"1\":{\"575\":1}}],[\"通常在等待某个操作完成时使用\",{\"1\":{\"533\":1}}],[\"通常在程序的主函数\",{\"1\":{\"487\":1}}],[\"通常需要确保主程序等待所有\",{\"1\":{\"502\":1}}],[\"通常是\",{\"1\":{\"590\":1}}],[\"通常是短暂的\",{\"1\":{\"589\":1}}],[\"通常是浏览器\",{\"1\":{\"582\":1}}],[\"通常是更新变量的语句\",{\"1\":{\"416\":1}}],[\"通常是变量声明或赋值\",{\"1\":{\"416\":1}}],[\"通常使用\",{\"1\":{\"383\":1}}],[\"通常\",{\"1\":{\"381\":1}}],[\"通常存储在保存\",{\"1\":{\"362\":1}}],[\"通常用于暂时替代位置\",{\"1\":{\"487\":1}}],[\"通常用于描述镜像\",{\"1\":{\"62\":1}}],[\"通常用于安装软件包\",{\"1\":{\"62\":1}}],[\"通常就是该\",{\"1\":{\"7\":1}}],[\"通过签名保证数据的安全性和完整性\",{\"1\":{\"596\":1}}],[\"通过点号\",{\"1\":{\"592\":1}}],[\"通过标识符\",{\"1\":{\"590\":1}}],[\"通过设置\",{\"1\":{\"583\":1}}],[\"通过生成和验证签名的\",{\"1\":{\"580\":1}}],[\"通过上述内容\",{\"1\":{\"577\":1}}],[\"通过路由组\",{\"1\":{\"576\":1}}],[\"通过掌握中间件的使用方法\",{\"1\":{\"546\":1}}],[\"通过掌握这些\",{\"1\":{\"260\":1}}],[\"通过掌握这些基本的函数和格式化占位符\",{\"1\":{\"243\":1}}],[\"通过合理使用这些原语\",{\"1\":{\"535\":1}}],[\"通过合理使用这些模式\",{\"1\":{\"484\":1}}],[\"通过信号量控制并发数\",{\"1\":{\"532\":1}}],[\"通过灵活运用\",{\"1\":{\"528\":1}}],[\"通过正确地使用\",{\"1\":{\"493\":1}}],[\"通过理解和应用这些技术\",{\"1\":{\"466\":1}}],[\"通过变量名来访问变量的值\",{\"1\":{\"456\":1}}],[\"通过变量来访问数据\",{\"1\":{\"456\":1}}],[\"通过指针引用底层哈希表\",{\"1\":{\"455\":1}}],[\"通过指针引用底层数组\",{\"1\":{\"455\":1}}],[\"通过这个地址可以间接访问对应的变量\",{\"1\":{\"432\":1}}],[\"通过选择和处理多个通道中的消息\",{\"1\":{\"418\":1}}],[\"通过接口\",{\"1\":{\"412\":1}}],[\"通过泛型\",{\"1\":{\"405\":1}}],[\"通过首字母大小写\",{\"1\":{\"397\":1}}],[\"通过返回值和内置的\",{\"1\":{\"395\":1}}],[\"通过切片的底层结构不难看出\",{\"1\":{\"363\":1}}],[\"通过索引来访问切片\",{\"1\":{\"362\":1}}],[\"通过学习和使用\",{\"1\":{\"320\":1}}],[\"通过创建一个函数包装器实现中间件功能\",{\"1\":{\"256\":1}}],[\"通过实现\",{\"1\":{\"240\":1,\"323\":1}}],[\"通过命令行运行程序时\",{\"1\":{\"231\":1}}],[\"通过结构体标签自定义\",{\"1\":{\"225\":1}}],[\"通过以上这些\",{\"1\":{\"157\":1,\"185\":1,\"200\":1,\"214\":1,\"229\":1,\"280\":1,\"299\":1,\"306\":1,\"315\":1,\"352\":1}}],[\"通过使用模板渲染\",{\"1\":{\"606\":1}}],[\"通过使用同步原语如互斥锁\",{\"1\":{\"519\":1}}],[\"通过使用互斥锁\",{\"1\":{\"463\":1}}],[\"通过使用结构体标签\",{\"1\":{\"449\":1}}],[\"通过使用数据卷\",{\"1\":{\"113\":1}}],[\"通过使用extends关键字\",{\"1\":{\"52\":1}}],[\"通过备份和还原数据卷\",{\"1\":{\"111\":1}}],[\"通过该配置文件导入的也是\",{\"1\":{\"95\":1}}],[\"通过熟练掌握\",{\"1\":{\"68\":1}}],[\"通过多阶段构建\",{\"1\":{\"68\":1}}],[\"通过此命令\",{\"1\":{\"63\":1}}],[\"通过编写\",{\"1\":{\"59\":1}}],[\"通过适当的配置和环境准备\",{\"1\":{\"52\":1}}],[\"通过一个单独的\",{\"1\":{\"47\":1}}],[\"通过\",{\"1\":{\"43\":1,\"122\":2,\"123\":2,\"163\":1,\"165\":1,\"247\":1,\"252\":1,\"325\":2,\"371\":2,\"435\":1,\"509\":1,\"549\":1,\"583\":1,\"590\":2}}],[\"客户端将\",{\"1\":{\"593\":1}}],[\"客户端收到\",{\"1\":{\"593\":1}}],[\"客户端通过\",{\"1\":{\"586\":1}}],[\"客户端在后续的每个请求中都会携带这个\",{\"1\":{\"579\":1}}],[\"客户端会携带这个标识符\",{\"1\":{\"579\":1}}],[\"客户端会被引导到\",{\"1\":{\"569\":1,\"570\":1}}],[\"客户端示例\",{\"1\":{\"131\":1}}],[\"客户端和服务器均可访问\",{\"1\":{\"589\":1}}],[\"客户端和服务器应用程序\",{\"1\":{\"260\":1}}],[\"客户端和服务器的强大工具\",{\"1\":{\"244\":1}}],[\"客户端和服务器的包\",{\"1\":{\"128\":1}}],[\"客户端和服务器实现\",{\"1\":{\"139\":1}}],[\"客户端和守护程序使用\",{\"1\":{\"43\":1}}],[\"客户端和守护程序可以\",{\"1\":{\"43\":1}}],[\"客户端\",{\"0\":{\"131\":1,\"248\":1,\"251\":1},\"1\":{\"43\":1,\"252\":1,\"582\":1,\"589\":1}}],[\"客户端是\",{\"1\":{\"43\":1}}],[\"客户端连接到远程\",{\"1\":{\"43\":1}}],[\"客户端与\",{\"1\":{\"43\":1}}],[\"克隆\",{\"1\":{\"39\":1}}],[\"暂存区的内容\",{\"1\":{\"39\":1}}],[\"暂存区\",{\"1\":{\"39\":2}}],[\"从指定的文件系统中发送文件到客户端\",{\"1\":{\"572\":1}}],[\"从该通道接收到这个值\",{\"1\":{\"518\":1}}],[\"从通道接收数据\",{\"1\":{\"470\":1,\"499\":1}}],[\"从高到低排列\",{\"1\":{\"431\":1}}],[\"从切片的起始位置到底层数组的结尾的元素个数\",{\"1\":{\"363\":1}}],[\"从中间指定下标删除\",{\"1\":{\"362\":1}}],[\"从而避免数据竞争和不一致性\",{\"1\":{\"530\":1}}],[\"从而避免竞态条件\",{\"1\":{\"463\":1}}],[\"从而可以在单个\",{\"1\":{\"480\":1}}],[\"从而控制\",{\"1\":{\"455\":1}}],[\"从而达到节约内存的作用\",{\"1\":{\"453\":1}}],[\"从而达到流程控制的作用\",{\"1\":{\"418\":1}}],[\"从而提高系统整体的性能\",{\"1\":{\"451\":1}}],[\"从而提高处理器访问内存的效率\",{\"1\":{\"451\":1}}],[\"从而提高了工作流的效率\",{\"1\":{\"27\":1}}],[\"从而访问指定的数据\",{\"1\":{\"437\":1}}],[\"从而实现用户状态的跟踪和管理\",{\"1\":{\"590\":1}}],[\"从而实现状态维持\",{\"1\":{\"582\":1}}],[\"从而实现需求\",{\"1\":{\"431\":1}}],[\"从而实现对没有权限的数据的访问\",{\"1\":{\"397\":1}}],[\"从而实现了原值的修改\",{\"1\":{\"396\":1}}],[\"从而实现类似子数组的效果\",{\"1\":{\"357\":1}}],[\"从原始\",{\"1\":{\"278\":1}}],[\"从多个通道接收数据\",{\"0\":{\"524\":1}}],[\"从多个\",{\"1\":{\"275\":1}}],[\"从链表中移除指定的元素\",{\"1\":{\"163\":1}}],[\"从头到尾访问每个元素\",{\"1\":{\"163\":1}}],[\"从仓库拉取\",{\"1\":{\"79\":1}}],[\"从标准输入流中读取\",{\"1\":{\"66\":1}}],[\"从\",{\"1\":{\"66\":1,\"70\":1,\"264\":1,\"280\":1}}],[\"从远程存储库中的\",{\"1\":{\"66\":1}}],[\"从远程仓库获取代码库到本地需要两步\",{\"1\":{\"36\":1}}],[\"从远程获取代码库\",{\"0\":{\"36\":1}}],[\"从当前仓库中删除指定的远程仓库\",{\"1\":{\"35\":1}}],[\"指示该前缀的查询参数是否存在\",{\"1\":{\"552\":1}}],[\"指向\",{\"1\":{\"455\":1}}],[\"指向数组的第一个元素\",{\"1\":{\"437\":1}}],[\"指向变量\",{\"1\":{\"430\":1,\"434\":1}}],[\"指向底层数组\",{\"1\":{\"363\":1}}],[\"指向的是\",{\"1\":{\"361\":1}}],[\"指针为\",{\"1\":{\"455\":2}}],[\"指针数组本质上是一个数组\",{\"1\":{\"440\":1}}],[\"指针数组\",{\"0\":{\"440\":1}}],[\"指针的指针\",{\"0\":{\"439\":1}}],[\"指针运算\",{\"0\":{\"437\":1}}],[\"指针运算符\",{\"1\":{\"430\":1}}],[\"指针变量声明后\",{\"1\":{\"438\":1}}],[\"指针变量作为参数进行传递时\",{\"1\":{\"436\":1}}],[\"指针变量指向一个内存地址\",{\"1\":{\"432\":1}}],[\"指针是指向变量内存地址的值\",{\"1\":{\"439\":1}}],[\"指针是一个特殊类型的变量\",{\"1\":{\"432\":1}}],[\"指针是什么\",{\"1\":{\"432\":1}}],[\"指针类型\",{\"1\":{\"423\":1,\"455\":1}}],[\"指针接收者\",{\"1\":{\"396\":2}}],[\"指针\",{\"0\":{\"432\":1},\"1\":{\"363\":1,\"421\":1}}],[\"指针等类型的格式化输出\",{\"1\":{\"238\":1}}],[\"指数和对数函数\",{\"0\":{\"304\":1},\"1\":{\"306\":1}}],[\"指定了容量\",{\"1\":{\"361\":1}}],[\"指定了基础镜像\",{\"1\":{\"59\":1}}],[\"指定要创建的目标镜像名\",{\"1\":{\"85\":1}}],[\"指定要运行的镜像\",{\"1\":{\"45\":1}}],[\"指定镜像作者\",{\"1\":{\"85\":1}}],[\"指定容器启动时执行的命令\",{\"1\":{\"67\":1}}],[\"指定生成的镜像名称为\",{\"1\":{\"66\":1}}],[\"指定\",{\"1\":{\"65\":1,\"66\":1}}],[\"指定基础镜像\",{\"1\":{\"62\":1,\"67\":1}}],[\"指定一个远程仓库的名称和\",{\"1\":{\"35\":1}}],[\"指令定义构建参数\",{\"1\":{\"66\":1}}],[\"指令官方文档\",{\"1\":{\"62\":1}}],[\"指令汇总\",{\"0\":{\"62\":1}}],[\"指令顺序执行\",{\"1\":{\"61\":1}}],[\"指令检测\",{\"1\":{\"56\":1}}],[\"指令将工作区文件添加到暂存区\",{\"1\":{\"23\":1}}],[\"指令详看后续\",{\"1\":{\"20\":1}}],[\"指令\",{\"1\":{\"14\":1,\"49\":1,\"68\":1,\"85\":1,\"103\":1,\"512\":1}}],[\"远程\",{\"1\":{\"64\":1}}],[\"远程管理\",{\"0\":{\"34\":1}}],[\"远程仓库由\",{\"1\":{\"79\":1}}],[\"远程仓库操作\",{\"0\":{\"35\":1}}],[\"远程仓库\",{\"1\":{\"7\":1,\"39\":1}}],[\"起步\",{\"1\":{\"33\":1}}],[\"visualstudio\",{\"1\":{\"377\":1}}],[\"verify\",{\"1\":{\"185\":1}}],[\"version=1\",{\"1\":{\"66\":1}}],[\"version=\",{\"1\":{\"62\":1}}],[\"version=latest\",{\"1\":{\"62\":1}}],[\"version\",{\"1\":{\"49\":1,\"51\":1,\"52\":3,\"66\":1,\"112\":1}}],[\"val2\",{\"1\":{\"522\":1}}],[\"val1\",{\"1\":{\"522\":1}}],[\"val\",{\"1\":{\"423\":4,\"475\":2,\"501\":2}}],[\"valid\",{\"1\":{\"185\":3,\"544\":1}}],[\"value=\",{\"1\":{\"550\":1}}],[\"value2\",{\"1\":{\"415\":2}}],[\"value1\",{\"1\":{\"415\":2}}],[\"values\",{\"1\":{\"356\":1,\"550\":2,\"551\":4,\"572\":1}}],[\"value\",{\"1\":{\"160\":2,\"161\":5,\"162\":3,\"163\":2,\"164\":5,\"165\":1,\"318\":3,\"416\":5,\"417\":6,\"420\":1,\"422\":2,\"423\":4,\"470\":1,\"472\":1,\"474\":1,\"492\":5,\"499\":1,\"518\":4,\"540\":1,\"550\":10,\"551\":2,\"552\":2,\"584\":1,\"588\":1}}],[\"variables\",{\"0\":{\"531\":1}}],[\"variablename\",{\"1\":{\"456\":1}}],[\"variablename4\",{\"1\":{\"443\":2}}],[\"variablename3\",{\"1\":{\"443\":2}}],[\"variablename2\",{\"1\":{\"443\":2,\"456\":2}}],[\"variablename1\",{\"1\":{\"443\":2,\"456\":2}}],[\"var=value\",{\"1\":{\"62\":1}}],[\"var\",{\"1\":{\"51\":1,\"52\":1,\"157\":1,\"200\":1,\"206\":1,\"208\":1,\"212\":2,\"214\":1,\"220\":1,\"222\":1,\"226\":1,\"229\":2,\"231\":2,\"239\":1,\"355\":1,\"356\":4,\"357\":2,\"360\":1,\"361\":2,\"365\":1,\"366\":1,\"396\":9,\"404\":1,\"409\":1,\"415\":1,\"420\":1,\"422\":1,\"430\":6,\"433\":1,\"434\":1,\"436\":1,\"438\":1,\"439\":2,\"446\":1,\"447\":1,\"450\":1,\"451\":2,\"455\":9,\"456\":6,\"462\":2,\"463\":2,\"464\":2,\"465\":1,\"479\":1,\"480\":1,\"481\":1,\"484\":1,\"502\":1,\"514\":2,\"515\":2,\"516\":2,\"518\":2,\"530\":2,\"531\":2,\"534\":1,\"535\":1,\"553\":3,\"555\":1,\"556\":1,\"598\":3}}],[\"v8\",{\"1\":{\"118\":1}}],[\"v1和\",{\"1\":{\"576\":1}}],[\"v1\",{\"1\":{\"87\":3,\"576\":8}}],[\"volume\",{\"1\":{\"62\":2,\"107\":2,\"109\":2,\"110\":2}}],[\"volumes\",{\"1\":{\"49\":1,\"51\":3,\"52\":2,\"104\":2,\"112\":3}}],[\"v\",{\"1\":{\"35\":1,\"107\":1,\"108\":2,\"131\":3,\"132\":6,\"198\":1,\"228\":1,\"238\":2,\"254\":1,\"400\":2,\"403\":2,\"404\":2,\"410\":1,\"415\":4,\"423\":4,\"455\":1,\"543\":1,\"598\":2}}],[\"v2\",{\"1\":{\"33\":1,\"48\":1,\"576\":9,\"580\":1,\"591\":1,\"597\":2,\"598\":1}}],[\"vscode\",{\"0\":{\"377\":1},\"1\":{\"376\":1,\"377\":1,\"378\":5}}],[\"vs\",{\"0\":{\"471\":1},\"1\":{\"29\":1}}],[\"选择合适自己的开发工具即可\",{\"1\":{\"378\":1}}],[\"选择适合自己的版本进行下载即可\",{\"1\":{\"375\":1}}],[\"选择自己电脑适配的版本\",{\"1\":{\"33\":1}}],[\"选项\",{\"1\":{\"124\":1}}],[\"选项即可\",{\"1\":{\"25\":1,\"98\":1}}],[\"官方文档\",{\"1\":{\"134\":1}}],[\"官方发布\",{\"1\":{\"82\":1}}],[\"官方仓库拉取\",{\"1\":{\"79\":1}}],[\"官方维护的一个免费的公共仓库\",{\"1\":{\"114\":1}}],[\"官方维护\",{\"1\":{\"79\":1}}],[\"官方提供的\",{\"1\":{\"80\":1}}],[\"官方提供的国内加速服务为样例\",{\"1\":{\"44\":1}}],[\"官方提供了\",{\"1\":{\"78\":1}}],[\"官方和国内许多服务商提供了国内的加速器服务\",{\"1\":{\"44\":1}}],[\"官方安装\",{\"1\":{\"33\":1}}],[\"官网地址为\",{\"1\":{\"29\":1}}],[\"点击下一步即可安装\",{\"1\":{\"31\":1}}],[\"下面我们将详细介绍如何定义基本路由\",{\"1\":{\"575\":1}}],[\"下面我们对其进行端口的自定义操作\",{\"1\":{\"120\":1}}],[\"下面我们来创建一个\",{\"1\":{\"8\":1}}],[\"下面来学习关于\",{\"1\":{\"80\":1}}],[\"下面是一段\",{\"1\":{\"437\":1}}],[\"下面是一些使用\",{\"1\":{\"523\":1}}],[\"下面是一些常见的用法示例以及详细解释\",{\"1\":{\"485\":1}}],[\"下面是一些\",{\"1\":{\"316\":1}}],[\"下面是一个综合示例\",{\"1\":{\"492\":1}}],[\"下面是一个简单的示例\",{\"1\":{\"162\":1,\"164\":1,\"367\":1,\"591\":1}}],[\"下面是一个简单的\",{\"1\":{\"131\":1,\"132\":1}}],[\"下面是一个更复杂的docker\",{\"1\":{\"51\":1}}],[\"下面是关于\",{\"1\":{\"230\":1}}],[\"下面是本人制作的\",{\"1\":{\"76\":1}}],[\"下面是\",{\"1\":{\"63\":1}}],[\"下载后安装即可\",{\"1\":{\"378\":1}}],[\"下载好后安装即可\",{\"1\":{\"377\":1}}],[\"下载地址\",{\"1\":{\"375\":1}}],[\"下载公共镜像\",{\"1\":{\"45\":1}}],[\"下载远程代码并合并\",{\"0\":{\"37\":1}}],[\"下载\",{\"1\":{\"31\":1,\"378\":1}}],[\"下载安装\",{\"1\":{\"31\":1,\"377\":1,\"378\":1}}],[\"来存储\",{\"1\":{\"587\":1}}],[\"来存储会话标识符\",{\"1\":{\"579\":1}}],[\"来识别用户\",{\"1\":{\"579\":1}}],[\"来组织和管理路由\",{\"1\":{\"575\":1}}],[\"来获取所有文件\",{\"1\":{\"560\":1}}],[\"来获取上传的单个文件\",{\"1\":{\"559\":1}}],[\"来和资源路径区分\",{\"1\":{\"549\":1}}],[\"来简化\",{\"1\":{\"545\":1}}],[\"来定义内存操作之间的同步关系\",{\"1\":{\"509\":1}}],[\"来定义一组相关联的应用容器\",{\"1\":{\"47\":1}}],[\"来切换\",{\"1\":{\"506\":1}}],[\"来等待所有的\",{\"1\":{\"502\":1}}],[\"来实现状态管理\",{\"1\":{\"580\":1}}],[\"来实现这一点\",{\"1\":{\"502\":1}}],[\"来实现\",{\"1\":{\"497\":1,\"590\":1,\"591\":1}}],[\"来实现同样的效果\",{\"1\":{\"416\":1}}],[\"来执行\",{\"1\":{\"495\":1}}],[\"来处理大量的任务\",{\"1\":{\"479\":1}}],[\"来确保对共享变量的访问是安全的\",{\"1\":{\"463\":1}}],[\"来确定是否修改\",{\"1\":{\"29\":1}}],[\"来取出指针所指向的地址的值\",{\"1\":{\"455\":1}}],[\"来保护\",{\"1\":{\"422\":1}}],[\"来终止\",{\"1\":{\"415\":1}}],[\"来判断文件是否成功打开\",{\"1\":{\"381\":1}}],[\"来创建一个切片\",{\"1\":{\"357\":1}}],[\"来指定格式\",{\"1\":{\"335\":1}}],[\"来进行操作\",{\"1\":{\"98\":1}}],[\"来自定义\",{\"1\":{\"54\":1}}],[\"来管理和创建\",{\"1\":{\"43\":1}}],[\"来查看冲突信息\",{\"1\":{\"17\":1}}],[\"来查看\",{\"1\":{\"8\":1}}],[\"来查看该目录是否创建成功\",{\"1\":{\"8\":1}}],[\"更轻量级\",{\"1\":{\"506\":1,\"507\":1}}],[\"更节省内存\",{\"1\":{\"450\":1}}],[\"更易读\",{\"1\":{\"405\":1}}],[\"更加灵活\",{\"1\":{\"368\":1}}],[\"更加强大和灵活\",{\"1\":{\"29\":1}}],[\"更多高级用法\",{\"0\":{\"242\":1}}],[\"更改默认的分隔符\",{\"1\":{\"194\":1}}],[\"更新指定用户\",{\"1\":{\"574\":1}}],[\"更新部分信息\",{\"1\":{\"574\":1}}],[\"更新信息\",{\"1\":{\"574\":1}}],[\"更新后\",{\"1\":{\"85\":1}}],[\"更新\",{\"1\":{\"85\":1}}],[\"更新镜像\",{\"0\":{\"85\":1}}],[\"更新系统等\",{\"1\":{\"62\":1}}],[\"更重要的是容器性能开销极低\",{\"1\":{\"70\":1}}],[\"更快\",{\"1\":{\"29\":1}}],[\"比如\",{\"1\":{\"580\":1}}],[\"比传统线程更轻量级\",{\"1\":{\"496\":1}}],[\"比较运算符\",{\"1\":{\"431\":1}}],[\"比较都不相等\",{\"1\":{\"423\":1}}],[\"比较两个时间\",{\"1\":{\"342\":1}}],[\"比较元素大小的规则以及交换元素的位置\",{\"1\":{\"323\":1}}],[\"比较文件的不同\",{\"0\":{\"22\":1}}],[\"比\",{\"1\":{\"29\":1}}],[\"性能优化\",{\"1\":{\"365\":1}}],[\"性能\",{\"1\":{\"29\":1,\"105\":1,\"139\":1}}],[\"采用递增的数字版本号来标识每个提交\",{\"1\":{\"29\":1}}],[\"1gb\",{\"1\":{\"496\":1}}],[\"110\",{\"1\":{\"428\":1}}],[\"111\",{\"1\":{\"428\":1}}],[\"11\",{\"0\":{\"406\":1},\"1\":{\"393\":1}}],[\"13\",{\"0\":{\"379\":1},\"1\":{\"425\":1}}],[\"13999fa6f4f6\",{\"1\":{\"85\":2}}],[\"15\",{\"1\":{\"335\":2,\"336\":1,\"404\":1}}],[\"1a\",{\"1\":{\"329\":1}}],[\"192\",{\"1\":{\"312\":2}}],[\"1625477745\",{\"1\":{\"349\":1}}],[\"16\",{\"1\":{\"302\":2,\"329\":3,\"451\":3}}],[\"163\",{\"1\":{\"44\":1}}],[\"120\",{\"1\":{\"392\":1}}],[\"12\",{\"0\":{\"398\":1},\"1\":{\"336\":1,\"351\":1,\"451\":1}}],[\"1234567890\",{\"1\":{\"592\":1}}],[\"1234\",{\"1\":{\"177\":1,\"492\":1,\"550\":1}}],[\"123\",{\"1\":{\"120\":2,\"214\":1,\"226\":1,\"327\":2,\"557\":1}}],[\"127\",{\"1\":{\"49\":1}}],[\"140000\",{\"1\":{\"327\":1}}],[\"14t21\",{\"1\":{\"99\":2}}],[\"14\",{\"1\":{\"99\":2,\"302\":8,\"327\":1,\"328\":2}}],[\"1010\",{\"1\":{\"428\":1}}],[\"101\",{\"1\":{\"428\":1}}],[\"1024\",{\"1\":{\"310\":2}}],[\"1000\",{\"1\":{\"462\":1,\"463\":1,\"464\":1,\"465\":2,\"530\":2,\"535\":2}}],[\"100\",{\"1\":{\"304\":2,\"306\":1,\"367\":5,\"457\":1,\"500\":1}}],[\"10\",{\"0\":{\"419\":1},\"1\":{\"99\":1,\"252\":2,\"304\":1,\"362\":2,\"363\":2,\"388\":1,\"389\":1,\"391\":1,\"395\":1,\"396\":12,\"416\":3,\"425\":1,\"426\":1,\"428\":2,\"429\":1,\"430\":1,\"434\":1,\"435\":2,\"439\":1,\"455\":4,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"480\":1,\"481\":2,\"484\":1,\"514\":1,\"515\":2,\"516\":1,\"532\":2}}],[\"17\",{\"1\":{\"70\":1}}],[\"180\",{\"1\":{\"421\":1}}],[\"18版本引入了泛型\",{\"1\":{\"398\":1}}],[\"18\",{\"1\":{\"49\":2,\"430\":1,\"444\":1,\"445\":5,\"446\":5,\"455\":1,\"456\":1,\"457\":1}}],[\"1\",{\"0\":{\"107\":1,\"144\":1,\"159\":1,\"167\":1,\"187\":1,\"202\":1,\"216\":1,\"231\":1,\"237\":1,\"245\":1,\"262\":1,\"282\":1,\"301\":1,\"308\":1,\"322\":1,\"327\":1,\"332\":1,\"369\":1,\"387\":1,\"479\":1,\"494\":1,\"524\":1,\"530\":1,\"537\":1,\"538\":1,\"543\":1,\"550\":1,\"555\":1,\"569\":1,\"582\":1,\"586\":1,\"597\":1,\"602\":1},\"1\":{\"29\":2,\"49\":1,\"62\":1,\"161\":5,\"164\":2,\"171\":2,\"172\":2,\"200\":2,\"287\":1,\"288\":1,\"303\":4,\"304\":2,\"309\":1,\"312\":2,\"314\":1,\"319\":1,\"322\":4,\"328\":1,\"340\":1,\"346\":1,\"356\":4,\"357\":5,\"361\":2,\"362\":14,\"363\":9,\"365\":1,\"366\":1,\"367\":2,\"388\":1,\"389\":1,\"392\":3,\"400\":1,\"401\":2,\"403\":1,\"404\":3,\"415\":3,\"416\":4,\"417\":2,\"418\":2,\"425\":1,\"428\":3,\"437\":1,\"451\":4,\"455\":4,\"456\":2,\"458\":1,\"462\":1,\"463\":1,\"464\":2,\"465\":2,\"476\":1,\"479\":3,\"480\":2,\"481\":3,\"482\":1,\"483\":2,\"484\":5,\"489\":1,\"502\":3,\"514\":1,\"515\":2,\"516\":2,\"524\":1,\"525\":1,\"530\":1,\"531\":1,\"534\":1,\"535\":1,\"575\":3}}],[\"版本收费\",{\"1\":{\"378\":1}}],[\"版本控制\",{\"1\":{\"71\":1}}],[\"版本之后分为\",{\"1\":{\"70\":1}}],[\"版本号\",{\"1\":{\"29\":1}}],[\"版本引入的一个命令\",{\"1\":{\"27\":1}}],[\"因此可以很好地支持分布式和扩展性\",{\"1\":{\"594\":1}}],[\"因此可以安全地在用户和服务器之间传递数据\",{\"1\":{\"591\":1}}],[\"因此可以轻松实现多人协作和并行开发\",{\"1\":{\"29\":1}}],[\"因此切片是通过地址引用数组元素的\",{\"1\":{\"455\":1}}],[\"因此在表达式\",{\"1\":{\"431\":1}}],[\"因此对\",{\"1\":{\"421\":1}}],[\"因此输出结果会是\",{\"1\":{\"418\":1}}],[\"因此所有类型都实现了空接口\",{\"1\":{\"410\":1}}],[\"因此所有数据都存储在中央代码库中\",{\"1\":{\"29\":1}}],[\"因此rectangle类型就可以被赋值给shape接口变量\",{\"1\":{\"408\":1}}],[\"因此它们相比于传统的虚拟机更加轻量级\",{\"1\":{\"71\":1}}],[\"因此\",{\"1\":{\"48\":2,\"362\":1,\"366\":1,\"411\":1,\"451\":2,\"502\":1,\"518\":1}}],[\"因此往往只用于重要的版本分支\",{\"1\":{\"29\":1}}],[\"因为不涉及内核态的切换\",{\"1\":{\"506\":1}}],[\"因为字段\",{\"1\":{\"451\":1}}],[\"因为它不包含任何数据字段\",{\"1\":{\"450\":1}}],[\"因为它不占用内存空间\",{\"1\":{\"450\":1}}],[\"因为它会绕过\",{\"1\":{\"437\":1}}],[\"因为它会清除所有未提交的修改\",{\"1\":{\"27\":1}}],[\"因为你拷贝的只是指针的副本\",{\"1\":{\"363\":1}}],[\"因为使用\",{\"1\":{\"361\":1}}],[\"因为\",{\"1\":{\"18\":1,\"101\":1,\"423\":3,\"444\":1}}],[\"因为两个分支都修改了它\",{\"1\":{\"17\":1}}],[\"因为是基于当前分支的分支\",{\"1\":{\"10\":1}}],[\"权限控制不友好\",{\"1\":{\"29\":1}}],[\"缺点\",{\"1\":{\"29\":1}}],[\"灵活性\",{\"1\":{\"366\":1}}],[\"灵活且高效的方式来开发\",{\"1\":{\"71\":1}}],[\"灵活\",{\"1\":{\"29\":1}}],[\"速度快\",{\"1\":{\"29\":1,\"538\":1}}],[\"ln\",{\"1\":{\"309\":2}}],[\"ltime\",{\"1\":{\"294\":1}}],[\"ltime|log\",{\"1\":{\"292\":1,\"299\":1}}],[\"ldate\",{\"1\":{\"294\":1}}],[\"ldate|log\",{\"1\":{\"292\":1,\"299\":1}}],[\"least\",{\"1\":{\"551\":1,\"552\":1}}],[\"leftshift\",{\"1\":{\"428\":1}}],[\"less\",{\"1\":{\"161\":1,\"323\":2,\"325\":1}}],[\"length\",{\"1\":{\"551\":1}}],[\"len\",{\"1\":{\"132\":1,\"161\":5,\"164\":1,\"264\":1,\"323\":3,\"325\":2,\"356\":1,\"362\":1,\"363\":3,\"403\":1,\"421\":2,\"560\":1}}],[\"latency\",{\"1\":{\"543\":2}}],[\"later\",{\"1\":{\"338\":3}}],[\"latest\",{\"1\":{\"45\":2,\"59\":1,\"62\":1,\"65\":1,\"85\":3,\"87\":1,\"88\":4,\"90\":2,\"92\":1,\"95\":6,\"98\":2,\"100\":2,\"102\":1}}],[\"layout\",{\"1\":{\"336\":2}}],[\"large\",{\"1\":{\"196\":1}}],[\"lastname\",{\"1\":{\"550\":2}}],[\"lastname=\",{\"1\":{\"550\":2}}],[\"last\",{\"1\":{\"162\":1}}],[\"label\",{\"1\":{\"62\":2}}],[\"like\",{\"1\":{\"550\":1}}],[\"limitreader\",{\"1\":{\"278\":1}}],[\"limitedreader\",{\"1\":{\"278\":2}}],[\"line\",{\"1\":{\"145\":2,\"146\":2,\"148\":2,\"157\":2,\"270\":2}}],[\"linux学习笔记\",{\"1\":{\"73\":1}}],[\"linux环境中易于安装\",{\"1\":{\"43\":1}}],[\"linux\",{\"0\":{\"32\":1},\"1\":{\"29\":1,\"32\":1,\"48\":1,\"70\":1,\"73\":4,\"75\":2,\"118\":2,\"371\":1}}],[\"linus\",{\"1\":{\"29\":1}}],[\"list\",{\"0\":{\"162\":1},\"1\":{\"137\":1,\"160\":4,\"162\":6,\"163\":2,\"401\":5,\"576\":6}}],[\"listenudp\",{\"1\":{\"310\":2}}],[\"listenandserve\",{\"1\":{\"246\":2,\"247\":1,\"254\":1,\"256\":1,\"258\":1,\"260\":1}}],[\"listening\",{\"1\":{\"132\":1,\"540\":1}}],[\"listen\",{\"1\":{\"132\":2,\"139\":1,\"309\":2}}],[\"listener\",{\"1\":{\"132\":2}}],[\"lib\",{\"1\":{\"51\":1,\"52\":1}}],[\"locks\",{\"0\":{\"530\":1}}],[\"lock\",{\"1\":{\"463\":2,\"514\":1,\"515\":1,\"518\":3,\"530\":1,\"531\":2}}],[\"location\",{\"1\":{\"352\":1,\"572\":1}}],[\"localhost\",{\"1\":{\"120\":1,\"246\":1,\"247\":1,\"254\":1,\"256\":1,\"260\":1,\"310\":1,\"318\":1,\"540\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"557\":1,\"569\":2,\"570\":2,\"571\":2,\"575\":2,\"576\":2,\"584\":1}}],[\"local\",{\"1\":{\"36\":1,\"48\":1,\"229\":1}}],[\"loc\",{\"1\":{\"351\":2,\"352\":2}}],[\"lookupsrv\",{\"1\":{\"313\":2}}],[\"lookupcname\",{\"1\":{\"313\":2}}],[\"lookupip\",{\"1\":{\"308\":2}}],[\"lookuphost\",{\"1\":{\"308\":2}}],[\"los\",{\"1\":{\"191\":1,\"192\":1}}],[\"long\",{\"1\":{\"177\":1}}],[\"log2\",{\"1\":{\"304\":3}}],[\"log10\",{\"1\":{\"304\":3}}],[\"logger\",{\"1\":{\"292\":2,\"299\":2,\"450\":4,\"540\":1,\"543\":4}}],[\"loggedmux\",{\"1\":{\"256\":2}}],[\"loggingmiddleware\",{\"1\":{\"256\":2}}],[\"log\",{\"0\":{\"281\":1},\"1\":{\"131\":4,\"132\":9,\"141\":1,\"265\":1,\"268\":1,\"271\":1,\"273\":3,\"276\":2,\"281\":2,\"283\":3,\"284\":3,\"285\":2,\"287\":3,\"288\":2,\"289\":3,\"290\":2,\"292\":6,\"294\":7,\"295\":4,\"297\":6,\"299\":5,\"304\":3,\"308\":2,\"309\":3,\"310\":8,\"311\":1,\"312\":1,\"313\":2,\"314\":1,\"317\":7,\"318\":1,\"320\":3,\"450\":3}}],[\"logout\",{\"1\":{\"115\":1}}],[\"loginhandler\",{\"1\":{\"598\":1}}],[\"login\",{\"1\":{\"100\":1,\"115\":1,\"598\":1,\"599\":1,\"600\":1}}],[\"logs\",{\"1\":{\"50\":1,\"99\":8}}],[\"loadhtmlfiles\",{\"1\":{\"602\":1,\"606\":1}}],[\"loadhtmlglob\",{\"1\":{\"564\":1,\"602\":1,\"603\":1,\"606\":1}}],[\"loadint32\",{\"1\":{\"535\":1}}],[\"loading\",{\"1\":{\"352\":1}}],[\"loadlocation\",{\"1\":{\"352\":1}}],[\"load即可\",{\"1\":{\"88\":1}}],[\"load\",{\"1\":{\"88\":1,\"132\":1,\"422\":1}}],[\"l\",{\"1\":{\"48\":1,\"131\":1,\"401\":5}}],[\"lshortfile\",{\"1\":{\"292\":1,\"294\":1,\"299\":1}}],[\"ls\",{\"1\":{\"8\":1,\"109\":2,\"131\":1}}],[\"可扩展性和基于标准的特性\",{\"1\":{\"590\":1}}],[\"可使得在不显式声明数据类型时\",{\"1\":{\"456\":1}}],[\"可使用\",{\"1\":{\"455\":1}}],[\"可使用括号来提升表达式中指定运算符的优先级\",{\"1\":{\"431\":1}}],[\"可选\",{\"1\":{\"415\":1,\"418\":1}}],[\"可借助辅助函数或者接口\",{\"1\":{\"397\":1}}],[\"可变参数\",{\"1\":{\"389\":1}}],[\"可变参数函数\",{\"0\":{\"389\":1}}],[\"可用于控制逻辑执行\",{\"1\":{\"388\":1}}],[\"可用于打包\",{\"1\":{\"71\":1}}],[\"可直接定义并初始化变量\",{\"1\":{\"456\":1}}],[\"可直接初始化变量\",{\"1\":{\"456\":1}}],[\"可直接通过内存地址进行数据访问\",{\"1\":{\"456\":1}}],[\"可直接隐藏\",{\"1\":{\"388\":1}}],[\"可直接使用下标索引进行修改\",{\"1\":{\"362\":1}}],[\"可将切片中的所有数据置为零值\",{\"1\":{\"362\":1}}],[\"可通过索引下标来进行访问\",{\"1\":{\"357\":1}}],[\"可通过下标索引进行操作\",{\"1\":{\"354\":1}}],[\"可通过构建命令传递\",{\"1\":{\"62\":1}}],[\"可先学习自本小节起的后续章节\",{\"1\":{\"101\":1}}],[\"可移植的容器中\",{\"1\":{\"70\":1}}],[\"可移植和可自动化的容器化部署\",{\"1\":{\"59\":1}}],[\"可视化界面优秀\",{\"1\":{\"378\":1}}],[\"可视化界面配置\",{\"1\":{\"44\":1}}],[\"可视化构建和共享容器的应用程序\",{\"1\":{\"43\":1}}],[\"可能导致不可预知的行为\",{\"1\":{\"437\":1}}],[\"可能会导致数据竞态和程序崩溃\",{\"1\":{\"422\":1}}],[\"可能会导致数据丢失或无法恢复\",{\"1\":{\"29\":1}}],[\"可能会出现你完全按照教程进行\",{\"1\":{\"101\":1}}],[\"可能无法使用\",{\"1\":{\"27\":1}}],[\"可以存放一些关键性的信息\",{\"1\":{\"592\":1}}],[\"可以防止数据被篡改\",{\"1\":{\"594\":1}}],[\"可以防止\",{\"1\":{\"583\":1}}],[\"可以设置有效期\",{\"1\":{\"583\":1}}],[\"可以设置环境变量\",{\"1\":{\"51\":1}}],[\"可以学习\",{\"1\":{\"577\":1}}],[\"可以匹配任意长度的路径段\",{\"1\":{\"575\":1}}],[\"可以返回\",{\"1\":{\"561\":1}}],[\"可以大大提高\",{\"1\":{\"546\":1}}],[\"可以深入学习gin的更多功能\",{\"1\":{\"541\":1}}],[\"可以继续执行\",{\"1\":{\"521\":1,\"533\":1}}],[\"可以确保\",{\"1\":{\"519\":1,\"583\":1}}],[\"可以更好地控制\",{\"1\":{\"493\":1}}],[\"可以更方便地控制序列化和反序列化的行为\",{\"1\":{\"449\":1}}],[\"可以创建一个带有截止时间的上下文\",{\"1\":{\"491\":1}}],[\"可以创建一个带有超时的上下文\",{\"1\":{\"490\":1}}],[\"可以编写出高效\",{\"1\":{\"466\":1}}],[\"可以编译成跨平台的可执行文件\",{\"1\":{\"371\":1}}],[\"可以增长和收缩\",{\"1\":{\"455\":1}}],[\"可以重新排列字段的顺序\",{\"1\":{\"451\":1}}],[\"可以简化并发编程的复杂性\",{\"1\":{\"484\":1}}],[\"可以简化并发程序的编写和管理\",{\"1\":{\"418\":1}}],[\"可以简化声明\",{\"1\":{\"443\":1}}],[\"可以有无限指针的循环嵌套\",{\"1\":{\"439\":1}}],[\"可以有效地管理并发程序的复杂性\",{\"1\":{\"535\":1}}],[\"可以有效地管理并发通信\",{\"1\":{\"418\":1}}],[\"可以有效\",{\"1\":{\"29\":1}}],[\"可以访问共享资源\",{\"1\":{\"514\":1}}],[\"可以访问指针变量所指向的值\",{\"1\":{\"435\":1}}],[\"可以访问其定义时外部作用域中的变量\",{\"1\":{\"391\":1}}],[\"可以利用指针来简化一些任务的执行\",{\"1\":{\"432\":1}}],[\"可以直接操作内存数据\",{\"1\":{\"432\":1}}],[\"可以直接使用我们配置好的环境变量\",{\"1\":{\"377\":1}}],[\"可以作为\",{\"1\":{\"423\":1}}],[\"可以提升代码的可读性和性能\",{\"1\":{\"418\":1}}],[\"可以定义类似于\",{\"1\":{\"397\":1}}],[\"可以定义多个参数\",{\"1\":{\"388\":1}}],[\"可以思考切片这种类型做为参数传递\",{\"1\":{\"396\":1}}],[\"可以类似的看为形参\",{\"1\":{\"396\":1}}],[\"可以被编译器修改\",{\"1\":{\"458\":1}}],[\"可以被其他包访问\",{\"1\":{\"397\":1}}],[\"可以被直接调用或者作为值传递给其他函数\",{\"1\":{\"391\":1}}],[\"可以被覆盖\",{\"1\":{\"62\":1}}],[\"可以为返回值命名\",{\"1\":{\"388\":1}}],[\"可以快速构建高性能的\",{\"1\":{\"372\":1}}],[\"可以自动扩容\",{\"1\":{\"361\":1}}],[\"可以根据数据量来自动扩充\",{\"1\":{\"353\":1}}],[\"可以方便地对各种类型的数据进行排序操作\",{\"1\":{\"325\":1}}],[\"可以对用户定义的集合进行排序\",{\"1\":{\"323\":1}}],[\"可以进行更加复杂的网络应用开发\",{\"1\":{\"315\":1}}],[\"可以很好地满足大部分的格式化输出需求\",{\"1\":{\"243\":1}}],[\"可以生成格式化的错误信息\",{\"1\":{\"241\":1}}],[\"可以从标准输入中读取数据\",{\"1\":{\"239\":1}}],[\"可以指定进制进行字符串和整数之间的转换\",{\"1\":{\"329\":1}}],[\"可以指定默认值和参数的帮助信息\",{\"1\":{\"232\":1}}],[\"可以指定服务启动的顺序\",{\"1\":{\"51\":1}}],[\"可以逐步向\",{\"1\":{\"209\":1,\"223\":1}}],[\"可以逐步从\",{\"1\":{\"208\":1,\"222\":1}}],[\"可以逐行读取和处理记录以节省内存\",{\"1\":{\"196\":1}}],[\"可以高效地提取最小或最大元素\",{\"1\":{\"161\":1}}],[\"可以高效地构建和管理\",{\"1\":{\"68\":1}}],[\"可以用于条件逻辑\",{\"1\":{\"415\":1}}],[\"可以用于存储相同类型的数据集合\",{\"1\":{\"353\":1}}],[\"可以用作队列或者栈\",{\"1\":{\"160\":1}}],[\"可以用来创建\",{\"1\":{\"78\":1}}],[\"可以实现永久重定向\",{\"1\":{\"570\":1}}],[\"可以实现优先级通道\",{\"1\":{\"528\":1}}],[\"可以实现超时控制\",{\"1\":{\"418\":1}}],[\"可以实现更加灵活和可扩展的代码结构\",{\"1\":{\"412\":1}}],[\"可以实现更加复杂的\",{\"1\":{\"157\":1}}],[\"可以实现数据的持久化存储\",{\"1\":{\"113\":1}}],[\"可以轻松地管理和迁移数据\",{\"1\":{\"111\":1}}],[\"可以通过加载\",{\"1\":{\"601\":1}}],[\"可以通过数字签名来验证数据的完整性\",{\"1\":{\"591\":1}}],[\"可以通过一个指针\",{\"1\":{\"437\":1}}],[\"可以通过\",{\"1\":{\"105\":1,\"116\":1,\"468\":1,\"575\":2,\"579\":1}}],[\"可以连写的\",{\"1\":{\"90\":1}}],[\"可以看做是将\",{\"1\":{\"104\":1}}],[\"可以看做是给镜像起别名\",{\"1\":{\"87\":1}}],[\"可以看到\",{\"1\":{\"17\":1}}],[\"可以查看\",{\"1\":{\"82\":1}}],[\"可以查看在上次提交之后是否对文件有修改\",{\"1\":{\"21\":1}}],[\"可以理解为长度是实际的数据长度\",{\"1\":{\"361\":1}}],[\"可以理解为一个轻量级的虚拟机\",{\"1\":{\"78\":1}}],[\"可以理解为普通虚拟机是在宿主机的物理环境上\",{\"1\":{\"72\":1}}],[\"可以参考本站的\",{\"1\":{\"73\":1}}],[\"可以让开发者打包他们的应用以及依赖包到一个轻量级\",{\"1\":{\"70\":1}}],[\"可以在客户端和服务端之间安全地传递信息\",{\"1\":{\"595\":1}}],[\"可以在不同域名和服务之间安全传递信息\",{\"1\":{\"594\":1}}],[\"可以在请求到达路由处理函数之前或在响应发送给客户端之前执行一些操作\",{\"1\":{\"542\":1}}],[\"可以在go官网下载并安装最新版本\",{\"1\":{\"539\":1}}],[\"可以在上下文中存储键值对数据\",{\"1\":{\"492\":1}}],[\"可以在多种场景中提高代码的效率和简洁性\",{\"1\":{\"450\":1}}],[\"可以在\",{\"1\":{\"415\":1,\"606\":1}}],[\"可以在同一个\",{\"1\":{\"415\":1}}],[\"可以在容器之间共享和重用\",{\"1\":{\"104\":1}}],[\"可以在其中存储和分享\",{\"1\":{\"78\":1}}],[\"可以在一个\",{\"1\":{\"68\":1}}],[\"可以在构建过程中传递构建参数\",{\"1\":{\"66\":1}}],[\"可以适当进行简化\",{\"1\":{\"60\":1}}],[\"可以将相关的路由归类到一个组中\",{\"1\":{\"576\":1}}],[\"可以将rectangle类型的变量赋值给shape接口变量\",{\"1\":{\"409\":1}}],[\"可以将数据卷挂载到多个容器中\",{\"1\":{\"105\":1}}],[\"可以将\",{\"1\":{\"53\":1}}],[\"可以是发送操作\",{\"1\":{\"418\":1}}],[\"可以是本地主机\",{\"1\":{\"43\":1}}],[\"可以是基于命令行的\",{\"1\":{\"43\":1}}],[\"可以离线工作并在不同的工作流程之间自由转换\",{\"1\":{\"29\":1}}],[\"可以递归删除\",{\"1\":{\"25\":1}}],[\"可以不用带该参数\",{\"1\":{\"24\":1}}],[\"可以加上\",{\"1\":{\"21\":1}}],[\"可以多次合并到统一分支\",{\"1\":{\"14\":1}}],[\"可以使用通配符来实现模糊匹配的路由\",{\"1\":{\"575\":1}}],[\"可以使用第三方库来实现会话管理\",{\"1\":{\"590\":1}}],[\"可以使用第三方库\",{\"1\":{\"545\":1,\"591\":1}}],[\"可以使用带缓冲的通道来模拟\",{\"1\":{\"532\":1}}],[\"可以使用带有两个返回值的类型断言\",{\"1\":{\"411\":1}}],[\"可以使用以下方式检测通道是否关闭\",{\"1\":{\"474\":1}}],[\"可以使用以下命令安装gin\",{\"1\":{\"539\":1}}],[\"可以使用以下命令\",{\"1\":{\"27\":1}}],[\"可以使用原子操作来避免竞态条件\",{\"1\":{\"464\":1}}],[\"可以使用互斥锁\",{\"1\":{\"463\":1}}],[\"可以使用空的\",{\"1\":{\"416\":1}}],[\"可以使用切片表达式\",{\"1\":{\"366\":1}}],[\"可以使用切片操作符\",{\"1\":{\"357\":1}}],[\"可以使用各种格式化占位符来指定输出的格式\",{\"1\":{\"238\":1}}],[\"可以使用同一个数据卷来实现数据共享\",{\"1\":{\"111\":1}}],[\"可以使用这个命令\",{\"1\":{\"27\":1}}],[\"可以使用\",{\"1\":{\"26\":1,\"66\":1,\"107\":1,\"108\":1,\"109\":1,\"112\":1,\"231\":1,\"356\":1,\"378\":1,\"382\":1,\"422\":1,\"437\":1,\"489\":1,\"498\":1,\"502\":1,\"535\":1,\"553\":1,\"555\":1,\"556\":1,\"558\":1,\"567\":1,\"588\":1}}],[\"可以使用vim查看\",{\"1\":{\"17\":1}}],[\"可以使用如下指令将文件从暂存区添加到本地仓库\",{\"1\":{\"23\":1}}],[\"可以使用如下指令来查看仓库当前状态\",{\"1\":{\"21\":1}}],[\"可以使用如下指令\",{\"1\":{\"11\":1,\"22\":1}}],[\"可以使用ls\",{\"1\":{\"8\":1}}],[\"2kb\",{\"1\":{\"496\":1}}],[\"21\",{\"1\":{\"362\":1}}],[\"26\",{\"1\":{\"329\":1}}],[\"25\",{\"1\":{\"191\":1,\"192\":1,\"238\":2,\"323\":1,\"325\":1,\"420\":1,\"422\":1,\"444\":1,\"447\":2}}],[\"256\",{\"1\":{\"174\":2,\"175\":2}}],[\"22\",{\"1\":{\"131\":1,\"132\":2}}],[\"200\",{\"1\":{\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"550\":1,\"559\":1,\"560\":1,\"562\":1,\"563\":1,\"576\":4,\"590\":3}}],[\"2006\",{\"1\":{\"335\":2,\"336\":1}}],[\"2048\",{\"1\":{\"179\":1}}],[\"2018\",{\"1\":{\"99\":1}}],[\"2024\",{\"1\":{\"99\":4,\"336\":1,\"351\":1}}],[\"20\",{\"1\":{\"56\":2,\"85\":2,\"116\":3,\"231\":1,\"232\":2,\"234\":1,\"323\":1,\"325\":1,\"396\":2,\"446\":3}}],[\"246b23d5d5a5\",{\"1\":{\"95\":2}}],[\"24\",{\"1\":{\"48\":1}}],[\"23\",{\"1\":{\"27\":1,\"99\":1,\"120\":1}}],[\"2\",{\"0\":{\"108\":1,\"149\":1,\"160\":1,\"170\":1,\"190\":1,\"205\":1,\"219\":1,\"232\":1,\"238\":1,\"248\":1,\"266\":1,\"286\":1,\"302\":1,\"309\":1,\"323\":1,\"328\":1,\"334\":1,\"374\":1,\"388\":1,\"467\":1,\"480\":1,\"525\":1,\"531\":1,\"539\":1,\"544\":1,\"551\":1,\"556\":1,\"570\":1,\"573\":1,\"583\":1,\"587\":1,\"598\":1,\"603\":1},\"1\":{\"27\":1,\"161\":2,\"200\":1,\"299\":1,\"302\":2,\"303\":4,\"304\":1,\"312\":2,\"322\":2,\"335\":1,\"338\":1,\"339\":1,\"342\":2,\"344\":2,\"345\":1,\"356\":4,\"357\":8,\"361\":2,\"362\":15,\"363\":11,\"365\":1,\"366\":1,\"367\":5,\"387\":1,\"389\":1,\"391\":1,\"396\":2,\"400\":1,\"401\":1,\"403\":1,\"404\":3,\"408\":1,\"415\":3,\"416\":3,\"417\":3,\"418\":2,\"428\":1,\"437\":2,\"450\":1,\"455\":4,\"456\":2,\"473\":1,\"476\":3,\"479\":1,\"482\":2,\"483\":2,\"484\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"518\":1,\"524\":3,\"525\":1}}],[\"执行原子加操作\",{\"1\":{\"535\":1}}],[\"执行后的结果为\",{\"1\":{\"396\":1}}],[\"执行命令\",{\"1\":{\"59\":1,\"62\":1}}],[\"执行下列指令安装即可\",{\"1\":{\"56\":1}}],[\"执行以下指令即可安装\",{\"1\":{\"48\":1}}],[\"执行\",{\"1\":{\"31\":2,\"32\":2,\"47\":1,\"418\":1}}],[\"执行这个命令它会打开一个交互式界面\",{\"1\":{\"27\":1}}],[\"执行完上述步骤后\",{\"1\":{\"7\":1}}],[\"ignored\",{\"1\":{\"447\":1}}],[\"ignore\",{\"1\":{\"447\":3}}],[\"issuer\",{\"1\":{\"592\":1}}],[\"iss\",{\"1\":{\"592\":1}}],[\"isfalse\",{\"1\":{\"427\":3}}],[\"istrue\",{\"1\":{\"427\":4}}],[\"isgreaterorequal\",{\"1\":{\"426\":1}}],[\"isless\",{\"1\":{\"426\":1}}],[\"isnotequal\",{\"1\":{\"426\":1}}],[\"isequal\",{\"1\":{\"426\":1}}],[\"is\",{\"1\":{\"247\":1,\"283\":1,\"284\":1,\"287\":1,\"289\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"299\":1,\"342\":3,\"415\":9,\"421\":3,\"422\":1,\"450\":1,\"532\":2,\"533\":2,\"534\":1,\"540\":1,\"550\":4,\"559\":1,\"569\":1,\"570\":1,\"571\":1}}],[\"iv\",{\"1\":{\"177\":4}}],[\"i++\",{\"1\":{\"164\":1,\"416\":1,\"462\":2,\"463\":2,\"464\":2,\"465\":2,\"475\":1,\"476\":1,\"480\":1,\"483\":2,\"501\":1,\"502\":1,\"514\":1,\"515\":2,\"516\":1,\"524\":1,\"530\":1,\"532\":1,\"534\":1,\"535\":1}}],[\"iota\",{\"0\":{\"458\":1},\"1\":{\"458\":8}}],[\"ioutil\",{\"1\":{\"180\":3,\"185\":3,\"249\":2,\"250\":2,\"252\":1}}],[\"io\",{\"0\":{\"261\":1},\"1\":{\"132\":2,\"139\":6,\"157\":1,\"168\":1,\"169\":3,\"172\":3,\"175\":3,\"177\":2,\"180\":1,\"185\":1,\"208\":1,\"209\":1,\"222\":1,\"223\":1,\"242\":1,\"249\":1,\"250\":1,\"261\":2,\"263\":1,\"264\":3,\"265\":4,\"267\":1,\"268\":3,\"273\":3,\"275\":5,\"276\":4,\"278\":5,\"280\":7}}],[\"iface\",{\"1\":{\"311\":3}}],[\"if\",{\"0\":{\"414\":1},\"1\":{\"131\":3,\"132\":8,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"160\":1,\"177\":2,\"179\":4,\"180\":8,\"184\":5,\"185\":7,\"188\":2,\"189\":3,\"191\":2,\"192\":2,\"194\":2,\"196\":3,\"198\":3,\"200\":2,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":2,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":2,\"228\":2,\"229\":4,\"241\":1,\"249\":2,\"250\":2,\"252\":2,\"254\":1,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":2,\"275\":1,\"276\":2,\"278\":1,\"280\":1,\"292\":1,\"297\":1,\"308\":2,\"309\":3,\"310\":8,\"311\":1,\"312\":2,\"313\":2,\"314\":1,\"315\":2,\"317\":6,\"318\":1,\"320\":3,\"327\":2,\"329\":2,\"336\":1,\"352\":1,\"383\":2,\"384\":1,\"392\":1,\"395\":2,\"402\":1,\"411\":1,\"414\":11,\"415\":1,\"416\":1,\"421\":1,\"422\":1,\"438\":1,\"447\":2,\"450\":1,\"474\":1,\"492\":2,\"544\":1,\"550\":5,\"551\":1,\"553\":3,\"555\":1,\"556\":1,\"559\":1,\"584\":1,\"588\":1,\"590\":1,\"598\":4}}],[\"itoa\",{\"1\":{\"328\":2}}],[\"itemsrequest\",{\"1\":{\"553\":2}}],[\"items\",{\"1\":{\"161\":2,\"401\":4,\"551\":3,\"553\":1}}],[\"item\",{\"1\":{\"161\":16,\"401\":2}}],[\"it\",{\"1\":{\"90\":2,\"550\":9}}],[\"itd\",{\"1\":{\"56\":2}}],[\"import\",{\"1\":{\"88\":1,\"95\":1,\"131\":1,\"132\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"157\":1,\"160\":1,\"161\":1,\"162\":1,\"164\":1,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"184\":1,\"185\":1,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":1,\"214\":1,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"241\":1,\"246\":1,\"247\":1,\"249\":1,\"250\":1,\"252\":1,\"254\":1,\"256\":1,\"258\":1,\"260\":1,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"275\":1,\"276\":1,\"278\":1,\"280\":1,\"283\":1,\"284\":1,\"285\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"299\":1,\"301\":1,\"302\":5,\"303\":2,\"304\":2,\"305\":1,\"306\":2,\"317\":1,\"322\":1,\"325\":1,\"327\":2,\"328\":2,\"329\":2,\"333\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"342\":1,\"344\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"351\":1,\"352\":1,\"367\":1,\"382\":1,\"384\":1,\"416\":4,\"418\":1,\"422\":1,\"423\":1,\"447\":1,\"450\":4,\"451\":2,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"475\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"483\":1,\"484\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":2,\"501\":1,\"502\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"524\":1,\"525\":1,\"526\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"584\":1,\"588\":1,\"590\":1,\"598\":1,\"602\":1,\"603\":1}}],[\"images\",{\"1\":{\"81\":1,\"85\":1,\"102\":1,\"103\":1}}],[\"image\",{\"1\":{\"49\":3,\"51\":2,\"52\":5,\"62\":1,\"81\":1,\"112\":1}}],[\"ipc\",{\"1\":{\"504\":1}}],[\"ipv6\",{\"1\":{\"312\":1}}],[\"ipv4\",{\"1\":{\"312\":1}}],[\"ipnet\",{\"1\":{\"312\":1}}],[\"ips\",{\"1\":{\"308\":4}}],[\"ip\",{\"0\":{\"312\":1},\"1\":{\"119\":1,\"120\":1,\"308\":6,\"312\":11}}],[\"iphone\",{\"1\":{\"70\":1}}],[\"iputils\",{\"1\":{\"56\":1}}],[\"identitykey\",{\"1\":{\"598\":4,\"599\":1}}],[\"identifier\",{\"1\":{\"456\":1,\"579\":1}}],[\"ids\",{\"1\":{\"551\":6,\"553\":3}}],[\"id=3\",{\"1\":{\"551\":1}}],[\"id=2\",{\"1\":{\"551\":1}}],[\"id=1\",{\"1\":{\"551\":1}}],[\"id=1234\",{\"1\":{\"550\":1}}],[\"id\",{\"1\":{\"65\":1,\"81\":1,\"84\":1,\"85\":1,\"87\":2,\"88\":1,\"95\":1,\"96\":1,\"98\":2,\"122\":1,\"123\":1,\"449\":1,\"479\":3,\"481\":2,\"484\":4,\"492\":1,\"502\":3,\"532\":3,\"534\":2,\"550\":3,\"551\":2,\"553\":1,\"557\":4,\"574\":3,\"575\":5,\"586\":3,\"587\":1,\"588\":1,\"589\":1,\"598\":1}}],[\"i\",{\"1\":{\"27\":1,\"85\":2,\"90\":2,\"94\":2,\"143\":1,\"157\":1,\"161\":7,\"164\":3,\"323\":7,\"325\":5,\"362\":2,\"410\":3,\"415\":6,\"416\":3,\"430\":3,\"436\":3,\"437\":3,\"455\":5,\"458\":2,\"462\":4,\"463\":4,\"464\":4,\"465\":4,\"475\":3,\"476\":2,\"480\":3,\"483\":4,\"501\":3,\"502\":3,\"506\":1,\"507\":2,\"514\":2,\"515\":4,\"516\":2,\"524\":2,\"530\":2,\"532\":3,\"534\":3,\"535\":2}}],[\"indentedjson\",{\"1\":{\"572\":2}}],[\"index\",{\"1\":{\"39\":3,\"161\":5,\"401\":2,\"416\":5,\"417\":6,\"564\":1,\"602\":1,\"603\":3,\"604\":1}}],[\"increment\",{\"1\":{\"462\":2,\"463\":2,\"464\":2,\"465\":2,\"514\":2,\"516\":2,\"530\":4}}],[\"include\",{\"1\":{\"437\":1}}],[\"incoming\",{\"1\":{\"132\":1}}],[\"invalid\",{\"1\":{\"312\":1,\"329\":1}}],[\"intlist\",{\"1\":{\"401\":4}}],[\"int32\",{\"1\":{\"399\":1,\"404\":1,\"451\":5,\"454\":1,\"464\":1,\"516\":1,\"535\":2}}],[\"int16\",{\"1\":{\"399\":1,\"454\":1}}],[\"int8\",{\"1\":{\"399\":1,\"454\":1}}],[\"int64\",{\"1\":{\"349\":1,\"399\":1,\"404\":1,\"451\":5,\"454\":1}}],[\"internal\",{\"1\":{\"571\":3}}],[\"interval\",{\"1\":{\"483\":2}}],[\"interfaces\",{\"1\":{\"311\":4}}],[\"interface\",{\"1\":{\"161\":4,\"163\":2,\"164\":2,\"165\":1,\"211\":1,\"263\":1,\"267\":1,\"323\":1,\"325\":1,\"380\":1,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":2,\"410\":2,\"412\":3,\"415\":1,\"422\":1,\"572\":10,\"598\":2}}],[\"integer\",{\"1\":{\"327\":2,\"329\":2}}],[\"ints\",{\"1\":{\"322\":5,\"400\":2,\"404\":2}}],[\"intn\",{\"1\":{\"306\":2}}],[\"intvar\",{\"1\":{\"231\":2,\"232\":2}}],[\"int\",{\"1\":{\"161\":5,\"165\":2,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":2,\"214\":1,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"229\":1,\"231\":1,\"234\":1,\"240\":1,\"263\":1,\"267\":1,\"306\":2,\"319\":3,\"322\":1,\"323\":6,\"325\":4,\"356\":4,\"357\":2,\"360\":1,\"361\":5,\"362\":5,\"363\":8,\"365\":2,\"366\":2,\"367\":3,\"387\":6,\"388\":8,\"389\":2,\"390\":2,\"391\":5,\"392\":2,\"393\":11,\"395\":2,\"396\":22,\"399\":3,\"400\":1,\"401\":2,\"403\":1,\"404\":2,\"412\":1,\"415\":2,\"416\":1,\"417\":3,\"420\":2,\"421\":1,\"423\":1,\"430\":4,\"433\":1,\"436\":2,\"437\":4,\"438\":1,\"444\":1,\"446\":2,\"447\":1,\"449\":2,\"454\":1,\"455\":18,\"462\":1,\"463\":1,\"465\":2,\"469\":2,\"472\":1,\"473\":1,\"475\":2,\"476\":2,\"479\":5,\"480\":9,\"481\":3,\"482\":9,\"484\":5,\"498\":1,\"500\":1,\"501\":2,\"502\":1,\"514\":1,\"515\":2,\"518\":1,\"524\":2,\"525\":1,\"526\":1,\"530\":1,\"532\":1,\"534\":1,\"553\":1,\"572\":12,\"598\":1}}],[\"instance\",{\"1\":{\"540\":1}}],[\"installer\",{\"1\":{\"31\":1}}],[\"install\",{\"1\":{\"31\":2,\"32\":1,\"49\":1,\"56\":1,\"59\":2,\"62\":1,\"75\":6,\"375\":1}}],[\"insecureignorehostkey\",{\"1\":{\"131\":1}}],[\"information\",{\"1\":{\"550\":1}}],[\"info\",{\"1\":{\"44\":1,\"292\":1,\"294\":1,\"299\":1}}],[\"in\",{\"0\":{\"480\":1},\"1\":{\"8\":1,\"16\":1,\"351\":1,\"352\":2,\"356\":1,\"421\":1,\"450\":1,\"482\":4,\"492\":1,\"540\":2,\"543\":1,\"576\":6}}],[\"initquerycache\",{\"1\":{\"551\":1,\"552\":1}}],[\"initialization\",{\"1\":{\"416\":3}}],[\"initializer\",{\"1\":{\"356\":1}}],[\"initialized\",{\"1\":{\"8\":1}}],[\"init\",{\"1\":{\"8\":2,\"10\":1,\"161\":1,\"540\":1}}],[\"以展示其灵活性和强大之处\",{\"1\":{\"523\":1}}],[\"以通知接收者没有更多的数据将被发送\",{\"1\":{\"474\":1}}],[\"以确保程序符合内存模型的要求\",{\"1\":{\"512\":1}}],[\"以确保内存访问的效率\",{\"1\":{\"451\":1}}],[\"以确保在不同环境中的一致性和可移植性\",{\"1\":{\"58\":1}}],[\"以节省内存\",{\"1\":{\"450\":1}}],[\"以本节中的\",{\"1\":{\"445\":1}}],[\"以满足实际需求\",{\"1\":{\"414\":1}}],[\"以便为其他结构体提供方法集合\",{\"1\":{\"450\":1}}],[\"以便处理接口类型的不同实现\",{\"1\":{\"415\":1}}],[\"以便在不同的场景中使用\",{\"1\":{\"412\":1}}],[\"以便限制泛型类型的使用范围\",{\"1\":{\"404\":1}}],[\"以便于匹配\",{\"1\":{\"396\":1}}],[\"以便外部访问\",{\"1\":{\"51\":1}}],[\"以其简洁\",{\"1\":{\"373\":1}}],[\"以其简洁的语法和高效的编译速度而闻名\",{\"1\":{\"371\":1}}],[\"以避免因为数据的添加而导致的不断扩容\",{\"1\":{\"361\":1}}],[\"以及授权访问特定资源\",{\"1\":{\"595\":1}}],[\"以及如何使用路由组来组织和管理路由\",{\"1\":{\"577\":1}}],[\"以及如何使用路由组\",{\"1\":{\"575\":1}}],[\"以及如何启动\",{\"1\":{\"541\":1}}],[\"以及如何遍历链表并打印每个元素\",{\"1\":{\"163\":1}}],[\"以及与数据库\",{\"1\":{\"449\":1}}],[\"以及通道\",{\"1\":{\"417\":1}}],[\"以及实现接口的类型\",{\"1\":{\"406\":1}}],[\"以及其他类型之间的转换\",{\"1\":{\"326\":1}}],[\"以上是\",{\"1\":{\"134\":1}}],[\"以上示例定义了一个名为\",{\"1\":{\"112\":1}}],[\"以上命令将文件\",{\"1\":{\"27\":1}}],[\"以最终创建一个镜像\",{\"1\":{\"58\":1}}],[\"以\",{\"1\":{\"45\":1}}],[\"以下是它们的主要区别\",{\"1\":{\"503\":1}}],[\"以下是go语言中常见运算符的优先级\",{\"1\":{\"431\":1}}],[\"以下是关于通道的一些重要特性和使用方法\",{\"1\":{\"467\":1}}],[\"以下是关于\",{\"1\":{\"418\":1}}],[\"以下是几种\",{\"1\":{\"414\":1}}],[\"以下是一个使用\",{\"1\":{\"590\":1}}],[\"以下是一个简单的\",{\"1\":{\"501\":1}}],[\"以下是一个简单的使用通道在\",{\"1\":{\"475\":1}}],[\"以下是一个示例\",{\"1\":{\"423\":1}}],[\"以下是一个结合了自定义排序和使用\",{\"1\":{\"325\":1}}],[\"以下是一个网络配置的例子\",{\"1\":{\"52\":1}}],[\"以下是一些常见的控制原语\",{\"1\":{\"529\":1}}],[\"以下是一些常见的并发模式\",{\"1\":{\"478\":1}}],[\"以下是一些常用的\",{\"1\":{\"143\":1,\"166\":1,\"186\":1,\"201\":1,\"215\":1,\"244\":1,\"261\":1,\"281\":1,\"300\":1,\"306\":1,\"331\":1}}],[\"以下是一些\",{\"1\":{\"236\":1}}],[\"以下是一些主要的\",{\"1\":{\"135\":1}}],[\"以下是docker的一些主要功能和用途\",{\"1\":{\"71\":1}}],[\"以下是\",{\"1\":{\"35\":1,\"158\":1,\"321\":1,\"326\":1,\"385\":1,\"444\":1,\"572\":1}}],[\"以下命令允许你以交互方式选择要还原或保留的更改\",{\"1\":{\"27\":1}}],[\"以下命令将还原所有未提交的更改\",{\"1\":{\"27\":1}}],[\"恢复到特定提交\",{\"1\":{\"27\":1}}],[\"恢复到暂存区的状态\",{\"1\":{\"27\":1}}],[\"恢复到最新的提交状态\",{\"1\":{\"27\":1}}],[\"恢复或撤销文件的更改\",{\"0\":{\"27\":1}}],[\"丢弃所有未提交的更改\",{\"1\":{\"27\":1}}],[\"丢弃已暂存但未提交的更改等\",{\"1\":{\"27\":1}}],[\"丢弃未暂存的更改\",{\"1\":{\"27\":1}}],[\"移动指针到下一个元素\",{\"1\":{\"437\":1}}],[\"移动或重命名一个文件\",{\"1\":{\"26\":1}}],[\"移动或重命名工作区文件\",{\"0\":{\"26\":1}}],[\"移除等操作\",{\"1\":{\"15\":1}}],[\"目标路由\",{\"1\":{\"571\":1}}],[\"目录下创建一个\",{\"1\":{\"604\":1}}],[\"目录下的所有\",{\"1\":{\"602\":1}}],[\"目录下的所有文件和子目录\",{\"1\":{\"25\":1}}],[\"目录操作\",{\"1\":{\"317\":1}}],[\"目录上\",{\"1\":{\"112\":1}}],[\"目录\",{\"0\":{\"41\":1},\"1\":{\"108\":1,\"320\":1}}],[\"目录或软连接\",{\"1\":{\"26\":1}}],[\"目前一个项目内有\",{\"1\":{\"14\":1}}],[\"与任何值\",{\"1\":{\"423\":1}}],[\"与其他编程语言不同\",{\"1\":{\"416\":1}}],[\"与其他守护进程通信以管理\",{\"1\":{\"43\":1}}],[\"与\",{\"1\":{\"385\":1,\"427\":1,\"444\":1,\"491\":1}}],[\"与检测到的主机平台\",{\"1\":{\"118\":1}}],[\"与容器内部文件系统相比\",{\"1\":{\"105\":1}}],[\"与容器的生命周期分离\",{\"1\":{\"104\":1}}],[\"与前面的\",{\"1\":{\"45\":1}}],[\"与本地分支进行合并\",{\"1\":{\"37\":1}}],[\"与linux中类似\",{\"1\":{\"25\":1}}],[\"与事务有所区别\",{\"1\":{\"16\":1}}],[\"仅服务器可访问\",{\"1\":{\"589\":1}}],[\"仅能被设置它的域名和路径访问\",{\"1\":{\"583\":1}}],[\"仅通过\",{\"1\":{\"583\":1}}],[\"仅获取对应键的值\",{\"1\":{\"421\":1}}],[\"仅对\",{\"1\":{\"378\":1}}],[\"仅对普通容器进行了演示\",{\"1\":{\"117\":1}}],[\"仅声明\",{\"1\":{\"356\":1}}],[\"仅用于测试\",{\"1\":{\"131\":1}}],[\"仅此而已\",{\"1\":{\"101\":1}}],[\"仅需在指令中设置\",{\"1\":{\"98\":1}}],[\"仅供参考使用\",{\"1\":{\"76\":1}}],[\"仅仅只虚拟化所指定的依赖项\",{\"1\":{\"72\":1}}],[\"仅在包内可见\",{\"1\":{\"397\":1}}],[\"仅在构建时输出镜像\",{\"1\":{\"65\":1}}],[\"仅在关键部分进行分层\",{\"1\":{\"60\":1}}],[\"仅限于获取\",{\"1\":{\"36\":1}}],[\"仅是从跟踪清单中删除\",{\"1\":{\"25\":1}}],[\"仅将文件从暂存区删除\",{\"1\":{\"25\":1}}],[\"换句话说\",{\"1\":{\"25\":1}}],[\"则执行此\",{\"1\":{\"522\":1}}],[\"则阻塞直到所有的\",{\"1\":{\"502\":1}}],[\"则\",{\"1\":{\"456\":1}}],[\"则在序列化时忽略它\",{\"1\":{\"447\":1,\"448\":1}}],[\"则表示打开文件操作成功\",{\"1\":{\"381\":1}}],[\"则返回一个非\",{\"1\":{\"381\":1}}],[\"则重新许可目的地以容纳新元素\",{\"1\":{\"362\":1}}],[\"则会立即执行\",{\"1\":{\"526\":1}}],[\"则会执行超时的\",{\"1\":{\"525\":1}}],[\"则会执行\",{\"1\":{\"418\":1}}],[\"则会自动扩容\",{\"1\":{\"361\":1}}],[\"则会递归删除整个目录中的所有子目录和文件\",{\"1\":{\"25\":1}}],[\"则默认会将所有的数组置为\",{\"1\":{\"356\":1}}],[\"则使用export\",{\"1\":{\"88\":1}}],[\"则可以省略冒号和远程分支名\",{\"1\":{\"38\":1}}],[\"则可以省略本地分支名\",{\"1\":{\"37\":1}}],[\"则需要检查文件的元数据\",{\"1\":{\"29\":1}}],[\"则必须要用强制删除选项\",{\"1\":{\"25\":1}}],[\"则全部回滚\",{\"1\":{\"16\":1}}],[\"n3\",{\"1\":{\"457\":1}}],[\"n2\",{\"1\":{\"457\":1}}],[\"n1\",{\"1\":{\"457\":1}}],[\"numworkers\",{\"1\":{\"479\":2,\"534\":3}}],[\"numjobs\",{\"1\":{\"479\":4}}],[\"numbers\",{\"1\":{\"416\":3}}],[\"number\",{\"1\":{\"404\":2,\"423\":3,\"551\":1}}],[\"nums\",{\"1\":{\"389\":2,\"417\":2,\"482\":4}}],[\"num\",{\"1\":{\"327\":4,\"328\":4,\"329\":2,\"389\":2,\"417\":2,\"434\":3,\"435\":2,\"439\":3}}],[\"nread\",{\"1\":{\"280\":1}}],[\"ncopied\",{\"1\":{\"265\":1}}],[\"native\",{\"0\":{\"608\":1}}],[\"nan\",{\"1\":{\"423\":18}}],[\"nanosecond\",{\"1\":{\"348\":1}}],[\"nafter\",{\"1\":{\"164\":1}}],[\"name=john\",{\"1\":{\"553\":1}}],[\"name=manu\",{\"1\":{\"550\":3}}],[\"name=\",{\"1\":{\"254\":2}}],[\"name\",{\"1\":{\"36\":3,\"54\":2,\"56\":2,\"82\":1,\"98\":3,\"108\":1,\"191\":1,\"192\":1,\"200\":2,\"203\":3,\"204\":3,\"206\":3,\"208\":3,\"209\":3,\"211\":4,\"212\":6,\"214\":3,\"217\":4,\"218\":4,\"220\":3,\"222\":3,\"223\":4,\"225\":2,\"226\":4,\"229\":3,\"231\":8,\"232\":5,\"233\":1,\"234\":2,\"237\":4,\"238\":4,\"239\":4,\"240\":2,\"250\":1,\"254\":2,\"285\":3,\"288\":3,\"290\":3,\"311\":1,\"317\":4,\"320\":1,\"323\":2,\"325\":5,\"381\":1,\"421\":2,\"430\":4,\"444\":5,\"445\":11,\"446\":14,\"447\":6,\"448\":2,\"449\":2,\"455\":1,\"456\":4,\"457\":1,\"483\":2,\"550\":3,\"553\":2,\"556\":2,\"572\":1,\"592\":1}}],[\"name><age>25<\",{\"1\":{\"229\":1}}],[\"name><age>30<\",{\"1\":{\"220\":1,\"222\":1,\"228\":1,\"229\":1}}],[\"name>\",{\"1\":{\"11\":1,\"35\":6,\"36\":1}}],[\"nwelcome\",{\"1\":{\"146\":1,\"147\":1,\"148\":1,\"154\":1}}],[\"n\",{\"1\":{\"145\":1,\"146\":1,\"147\":1,\"150\":1,\"151\":1,\"152\":1,\"157\":2,\"161\":3,\"165\":4,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":2,\"180\":2,\"182\":1,\"185\":1,\"198\":1,\"200\":1,\"206\":1,\"208\":1,\"212\":1,\"214\":1,\"220\":1,\"222\":1,\"226\":1,\"228\":1,\"229\":1,\"234\":5,\"237\":1,\"238\":1,\"239\":1,\"254\":1,\"263\":1,\"264\":3,\"265\":3,\"267\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"276\":1,\"309\":5,\"310\":6,\"314\":3,\"319\":1,\"323\":1,\"325\":1,\"327\":2,\"328\":2,\"329\":1,\"362\":6,\"392\":4,\"410\":1,\"415\":1,\"416\":1,\"417\":3,\"421\":1,\"422\":1,\"423\":2,\"437\":2,\"447\":1,\"451\":8,\"455\":2,\"465\":2,\"479\":2,\"480\":4,\"481\":1,\"482\":9,\"484\":2,\"492\":1,\"502\":2,\"532\":2,\"534\":1,\"543\":1}}],[\"nil\",{\"1\":{\"131\":3,\"132\":8,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"160\":2,\"162\":2,\"169\":1,\"172\":1,\"175\":1,\"177\":2,\"179\":4,\"180\":8,\"182\":1,\"184\":5,\"185\":7,\"188\":2,\"189\":2,\"191\":2,\"192\":2,\"194\":2,\"196\":2,\"198\":2,\"200\":2,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":3,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":2,\"228\":1,\"229\":2,\"241\":1,\"246\":1,\"249\":2,\"250\":2,\"252\":2,\"254\":1,\"258\":1,\"260\":1,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":2,\"275\":1,\"276\":2,\"278\":1,\"280\":1,\"292\":1,\"297\":1,\"308\":2,\"309\":3,\"310\":9,\"311\":1,\"312\":2,\"313\":2,\"314\":1,\"315\":1,\"317\":6,\"318\":1,\"320\":3,\"327\":2,\"329\":2,\"336\":1,\"352\":1,\"361\":1,\"381\":2,\"383\":3,\"384\":1,\"395\":2,\"421\":1,\"438\":3,\"447\":2,\"553\":3,\"555\":1,\"556\":1,\"559\":1,\"584\":1,\"588\":1,\"590\":1,\"598\":4}}],[\"nginx\",{\"1\":{\"49\":2,\"51\":1,\"52\":2,\"62\":1,\"66\":1,\"108\":1,\"112\":1}}],[\"nor\",{\"1\":{\"415\":1}}],[\"none\",{\"1\":{\"550\":3}}],[\"non\",{\"1\":{\"233\":1}}],[\"now\",{\"1\":{\"141\":1,\"306\":2,\"333\":3,\"335\":3,\"338\":4,\"339\":5,\"340\":4,\"342\":12,\"348\":4,\"352\":1,\"491\":1,\"543\":2,\"598\":1}}],[\"noclientauth\",{\"1\":{\"132\":1}}],[\"no\",{\"1\":{\"65\":1,\"66\":1,\"68\":1,\"418\":1,\"526\":1,\"559\":1}}],[\"node\",{\"1\":{\"49\":2,\"66\":1,\"164\":1}}],[\"notes\",{\"1\":{\"444\":1,\"445\":5,\"446\":5}}],[\"notresult\",{\"1\":{\"427\":1}}],[\"not\",{\"1\":{\"25\":1,\"132\":1,\"260\":1,\"421\":1,\"423\":3,\"492\":1,\"540\":1,\"584\":1,\"588\":1,\"590\":1,\"607\":1}}],[\"neither\",{\"1\":{\"415\":1}}],[\"negative\",{\"1\":{\"415\":1}}],[\"nextyear\",{\"1\":{\"340\":2}}],[\"next\",{\"1\":{\"160\":1,\"162\":3,\"163\":1,\"164\":1,\"256\":2,\"340\":1,\"543\":1,\"544\":1}}],[\"newperson\",{\"1\":{\"444\":1}}],[\"newpath\",{\"1\":{\"317\":1}}],[\"newticker\",{\"1\":{\"346\":1}}],[\"newtimer\",{\"1\":{\"345\":1}}],[\"newline\",{\"1\":{\"284\":1}}],[\"newbuffer\",{\"1\":{\"250\":1}}],[\"newencoder\",{\"1\":{\"209\":1,\"223\":1}}],[\"newdecoder\",{\"1\":{\"208\":1,\"222\":1,\"228\":1,\"229\":1}}],[\"newcond\",{\"1\":{\"531\":1}}],[\"newcfbdecrypter\",{\"1\":{\"177\":1}}],[\"newcfbencrypter\",{\"1\":{\"177\":1}}],[\"newcipher\",{\"1\":{\"177\":1}}],[\"newchannel\",{\"1\":{\"132\":4}}],[\"newreadwriter\",{\"1\":{\"157\":1}}],[\"newreader\",{\"1\":{\"139\":1,\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"154\":1,\"155\":1,\"157\":2,\"188\":1,\"189\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"208\":1,\"222\":1,\"228\":1,\"229\":1,\"264\":1,\"265\":1,\"270\":3,\"275\":2,\"278\":1,\"280\":1,\"309\":2,\"314\":1}}],[\"newstore\",{\"1\":{\"588\":1,\"590\":1}}],[\"newscanner\",{\"1\":{\"154\":1,\"155\":1}}],[\"newservemux\",{\"1\":{\"247\":1,\"256\":1}}],[\"newserverconn\",{\"1\":{\"132\":1}}],[\"newsession\",{\"1\":{\"131\":1}}],[\"newwriter\",{\"1\":{\"139\":1,\"150\":1,\"151\":1,\"152\":1,\"157\":1,\"191\":1,\"192\":1,\"271\":2}}],[\"new\",{\"1\":{\"132\":1,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"169\":1,\"172\":1,\"175\":1,\"182\":2,\"191\":1,\"192\":1,\"275\":1,\"278\":1,\"280\":1,\"292\":1,\"299\":1,\"352\":2,\"361\":1,\"382\":2,\"384\":1,\"444\":5,\"445\":1,\"446\":1,\"569\":5,\"570\":5,\"598\":1}}],[\"newfile\",{\"1\":{\"26\":2}}],[\"neterr\",{\"1\":{\"315\":2}}],[\"net2\",{\"1\":{\"56\":2}}],[\"net1\",{\"1\":{\"56\":2}}],[\"network\",{\"1\":{\"55\":1,\"56\":2,\"65\":1}}],[\"networks\",{\"1\":{\"51\":4,\"52\":4}}],[\"net\",{\"0\":{\"244\":1,\"307\":1},\"1\":{\"31\":1,\"55\":1,\"56\":2,\"132\":3,\"139\":3,\"244\":2,\"246\":1,\"247\":1,\"249\":1,\"250\":1,\"252\":1,\"254\":1,\"256\":1,\"258\":1,\"260\":2,\"308\":4,\"309\":5,\"310\":6,\"311\":2,\"312\":5,\"313\":4,\"314\":2,\"315\":4,\"544\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"584\":1,\"598\":1,\"603\":1}}],[\"rfc\",{\"1\":{\"590\":1,\"591\":1}}],[\"rlock\",{\"1\":{\"515\":1}}],[\"rightshift\",{\"1\":{\"428\":1}}],[\"ring\",{\"0\":{\"164\":1},\"1\":{\"164\":5,\"165\":3}}],[\"router\",{\"0\":{\"576\":1},\"1\":{\"575\":1}}],[\"route\",{\"1\":{\"569\":1,\"570\":1,\"571\":1,\"576\":1}}],[\"round\",{\"1\":{\"302\":5}}],[\"role\",{\"1\":{\"544\":1}}],[\"rob\",{\"1\":{\"370\":1}}],[\"robert\",{\"1\":{\"370\":1}}],[\"rotation\",{\"1\":{\"164\":1}}],[\"r2\",{\"1\":{\"275\":2}}],[\"r1\",{\"1\":{\"275\":2}}],[\"race\",{\"0\":{\"462\":1},\"1\":{\"459\":1}}],[\"rawtoken\",{\"1\":{\"228\":1}}],[\"random\",{\"1\":{\"306\":4}}],[\"rand\",{\"1\":{\"177\":2,\"179\":2,\"180\":3,\"184\":2,\"185\":2,\"306\":10}}],[\"range提供了一种方便的方法来迭代数据结构的元素\",{\"1\":{\"417\":1}}],[\"range会迭代通道接收的数据\",{\"1\":{\"417\":1}}],[\"range返回两个值\",{\"1\":{\"417\":3}}],[\"range关键字用于迭代数组\",{\"1\":{\"417\":1}}],[\"range\",{\"0\":{\"417\":1},\"1\":{\"132\":2,\"161\":1,\"188\":1,\"191\":1,\"194\":1,\"200\":2,\"229\":1,\"308\":2,\"311\":1,\"313\":1,\"323\":1,\"325\":1,\"346\":1,\"389\":1,\"400\":1,\"403\":1,\"404\":1,\"416\":4,\"417\":4,\"421\":1,\"422\":1,\"450\":1,\"465\":1,\"475\":1,\"479\":2,\"480\":3,\"481\":1,\"482\":4,\"484\":1,\"501\":1,\"560\":1}}],[\"rsa\",{\"0\":{\"179\":1},\"1\":{\"179\":6,\"180\":5,\"592\":1}}],[\"rwmutex\",{\"0\":{\"515\":1},\"1\":{\"422\":1,\"461\":1,\"515\":1,\"530\":1}}],[\"rw\",{\"1\":{\"157\":4}}],[\"running\",{\"1\":{\"540\":1}}],[\"runlock\",{\"1\":{\"515\":1}}],[\"run\",{\"1\":{\"45\":3,\"49\":1,\"54\":1,\"56\":2,\"59\":3,\"62\":2,\"66\":1,\"67\":1,\"85\":2,\"90\":1,\"98\":1,\"102\":1,\"103\":1,\"108\":1,\"118\":2,\"120\":1,\"131\":2,\"231\":1,\"540\":2,\"543\":1,\"544\":1,\"545\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"584\":1,\"588\":1,\"590\":1,\"598\":1,\"602\":1,\"603\":1}}],[\"r\",{\"1\":{\"25\":1,\"59\":1,\"185\":4,\"246\":1,\"247\":2,\"254\":6,\"256\":4,\"260\":1,\"273\":2,\"309\":2,\"314\":2,\"396\":5,\"408\":6,\"411\":6,\"540\":3,\"543\":4,\"544\":3,\"545\":4,\"550\":1,\"551\":2,\"552\":2,\"553\":3,\"555\":1,\"556\":1,\"557\":1,\"559\":1,\"560\":1,\"562\":3,\"563\":3,\"564\":4,\"565\":3,\"566\":3,\"567\":3,\"569\":4,\"570\":4,\"571\":6,\"574\":4,\"575\":6,\"576\":4,\"584\":4,\"588\":5,\"590\":5,\"598\":4,\"602\":4,\"603\":4}}],[\"rmi\",{\"1\":{\"84\":2}}],[\"rm\",{\"1\":{\"25\":4,\"65\":2,\"84\":1,\"96\":1,\"110\":2,\"124\":2}}],[\"rewriting\",{\"1\":{\"579\":1}}],[\"redirect\",{\"1\":{\"569\":2,\"570\":2,\"572\":2}}],[\"redis7\",{\"1\":{\"83\":1}}],[\"redis\",{\"1\":{\"43\":1,\"82\":4,\"83\":4,\"95\":6,\"98\":4,\"100\":2}}],[\"remainder\",{\"1\":{\"388\":2,\"425\":1}}],[\"removal\",{\"1\":{\"162\":1}}],[\"removeall\",{\"1\":{\"317\":2}}],[\"remove\",{\"1\":{\"35\":1,\"160\":1,\"162\":1,\"163\":1,\"317\":2}}],[\"remoteaddr\",{\"1\":{\"132\":1}}],[\"remote\",{\"1\":{\"35\":9,\"36\":2,\"39\":2}}],[\"recommend\",{\"1\":{\"540\":1}}],[\"recovery\",{\"1\":{\"540\":1}}],[\"record\",{\"1\":{\"188\":2,\"189\":2,\"191\":2,\"194\":2,\"196\":2,\"198\":3,\"200\":4}}],[\"records\",{\"1\":{\"188\":2,\"194\":2,\"200\":2}}],[\"receive\",{\"1\":{\"468\":1}}],[\"received\",{\"1\":{\"256\":1,\"309\":2,\"310\":2,\"418\":3,\"476\":2,\"524\":2,\"525\":1,\"526\":2,\"559\":1}}],[\"rect\",{\"1\":{\"396\":2}}],[\"rectangle结构体实现了shape接口的area\",{\"1\":{\"408\":1}}],[\"rectangle\",{\"1\":{\"396\":5,\"408\":3,\"409\":1,\"411\":2}}],[\"rectanglearea\",{\"1\":{\"388\":1}}],[\"refreshhandler\",{\"1\":{\"598\":1}}],[\"refresh\",{\"1\":{\"598\":1,\"599\":1}}],[\"reflect\",{\"1\":{\"200\":1}}],[\"reference\",{\"1\":{\"62\":1}}],[\"realm\",{\"1\":{\"598\":1}}],[\"really\",{\"1\":{\"177\":3}}],[\"reached\",{\"1\":{\"491\":1}}],[\"ready\",{\"1\":{\"531\":3}}],[\"readperson\",{\"1\":{\"446\":6}}],[\"readwritecloser\",{\"1\":{\"412\":1}}],[\"readwriter\",{\"0\":{\"156\":1}}],[\"readall\",{\"1\":{\"180\":2,\"185\":2,\"188\":1,\"194\":1,\"200\":1,\"249\":1,\"250\":1,\"252\":1}}],[\"readfromudp\",{\"1\":{\"310\":2}}],[\"readfull\",{\"1\":{\"177\":1,\"264\":1}}],[\"readfile\",{\"1\":{\"132\":1}}],[\"read\",{\"1\":{\"157\":1,\"189\":1,\"196\":1,\"198\":1,\"263\":2,\"264\":1,\"515\":2}}],[\"readline\",{\"1\":{\"148\":1}}],[\"readbytes\",{\"1\":{\"147\":1}}],[\"reading\",{\"1\":{\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"180\":2,\"185\":2,\"188\":1,\"189\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1}}],[\"readstring\",{\"1\":{\"145\":1,\"146\":1,\"157\":1,\"270\":1,\"309\":2,\"314\":1}}],[\"reader\",{\"1\":{\"139\":1,\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"157\":2,\"177\":1,\"179\":1,\"180\":2,\"184\":1,\"185\":1,\"188\":2,\"189\":2,\"194\":3,\"196\":2,\"198\":2,\"200\":2,\"208\":3,\"222\":3,\"228\":2,\"229\":2,\"263\":2,\"264\":3,\"265\":1,\"270\":2,\"275\":4,\"278\":4,\"280\":2,\"412\":1,\"518\":4}}],[\"reply\",{\"1\":{\"132\":2}}],[\"repo\",{\"1\":{\"66\":1}}],[\"repository\",{\"1\":{\"8\":1,\"39\":2,\"81\":1}}],[\"reject\",{\"1\":{\"132\":1}}],[\"returns\",{\"1\":{\"550\":6,\"551\":2,\"552\":2}}],[\"return\",{\"1\":{\"132\":2,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"151\":1,\"152\":1,\"161\":3,\"177\":2,\"179\":4,\"180\":8,\"184\":5,\"185\":7,\"188\":2,\"189\":2,\"191\":2,\"192\":1,\"194\":2,\"196\":2,\"198\":1,\"200\":2,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"211\":2,\"212\":3,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"225\":1,\"226\":2,\"228\":1,\"229\":2,\"240\":1,\"241\":1,\"249\":2,\"250\":2,\"252\":2,\"256\":1,\"315\":1,\"323\":2,\"325\":2,\"327\":2,\"329\":1,\"336\":1,\"352\":1,\"382\":1,\"383\":1,\"384\":1,\"387\":1,\"388\":4,\"389\":1,\"390\":1,\"391\":2,\"392\":2,\"393\":3,\"395\":2,\"396\":1,\"399\":2,\"401\":1,\"402\":2,\"403\":1,\"404\":1,\"408\":2,\"422\":1,\"437\":1,\"444\":1,\"447\":2,\"455\":1,\"480\":1,\"482\":3,\"483\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"515\":1,\"543\":1,\"544\":2,\"550\":5,\"551\":3,\"552\":2,\"553\":3,\"555\":1,\"556\":1,\"559\":1,\"584\":1,\"588\":1,\"598\":5}}],[\"req\",{\"1\":{\"132\":5,\"553\":3}}],[\"required\",{\"1\":{\"553\":2}}],[\"requirements\",{\"1\":{\"59\":1}}],[\"request\",{\"1\":{\"132\":1,\"246\":1,\"247\":2,\"254\":1,\"256\":3,\"260\":1,\"543\":1,\"550\":2,\"571\":2}}],[\"requests\",{\"1\":{\"132\":4}}],[\"reqs\",{\"1\":{\"132\":2}}],[\"releasemode\",{\"1\":{\"540\":1}}],[\"release\",{\"1\":{\"540\":1}}],[\"releases\",{\"1\":{\"48\":1}}],[\"reload\",{\"1\":{\"44\":1}}],[\"registered\",{\"1\":{\"592\":1}}],[\"registry\",{\"1\":{\"44\":5}}],[\"reg\",{\"1\":{\"44\":1}}],[\"rename\",{\"1\":{\"35\":1,\"54\":1,\"317\":1}}],[\"resolveudpaddr\",{\"1\":{\"310\":2}}],[\"resp\",{\"1\":{\"249\":3,\"250\":3,\"252\":3}}],[\"responsewriter\",{\"1\":{\"246\":1,\"247\":2,\"254\":1,\"256\":2,\"260\":1}}],[\"restful\",{\"0\":{\"574\":1},\"1\":{\"557\":1,\"574\":1}}],[\"restart\",{\"1\":{\"44\":1,\"93\":1,\"123\":2}}],[\"rest\",{\"1\":{\"43\":1}}],[\"restore\",{\"1\":{\"27\":8}}],[\"reset\",{\"1\":{\"24\":4}}],[\"results\",{\"1\":{\"479\":6}}],[\"result\",{\"1\":{\"16\":1,\"383\":3,\"387\":2,\"390\":2,\"391\":2,\"392\":2,\"393\":4,\"395\":1,\"479\":3}}],[\"删除指定用户\",{\"1\":{\"574\":1}}],[\"删除指定的环境变量\",{\"1\":{\"318\":1}}],[\"删除信息\",{\"1\":{\"574\":1}}],[\"删除所有元素\",{\"1\":{\"362\":1}}],[\"删除前\",{\"1\":{\"362\":1}}],[\"删除后\",{\"1\":{\"362\":1}}],[\"删除文件\",{\"1\":{\"317\":1}}],[\"删除一个文件\",{\"1\":{\"317\":1}}],[\"删除或者遍历操作的场景\",{\"1\":{\"163\":1}}],[\"删除操作\",{\"1\":{\"163\":1}}],[\"删除链表中的一个元素\",{\"1\":{\"162\":1}}],[\"删除和遍历操作\",{\"1\":{\"162\":1}}],[\"删除web应用容器\",{\"0\":{\"124\":1}}],[\"删除数据卷\",{\"0\":{\"110\":1}}],[\"删除\",{\"1\":{\"84\":2,\"105\":1,\"362\":1,\"421\":1}}],[\"删除镜像\",{\"0\":{\"84\":1}}],[\"删除远程分支\",{\"1\":{\"38\":1}}],[\"删除暂存区和工作区文件\",{\"0\":{\"25\":1}}],[\"删除分支\",{\"0\":{\"12\":1}}],[\"上并发执行\",{\"1\":{\"505\":1}}],[\"上下文对象通常作为函数的第一个参数进行传递\",{\"1\":{\"488\":1}}],[\"上下文\",{\"0\":{\"485\":1}}],[\"上下文管理\",{\"1\":{\"138\":1}}],[\"上述的所有逻辑控制语句均可嵌套使用\",{\"1\":{\"418\":1}}],[\"上述代码将输出\",{\"1\":{\"416\":1}}],[\"上述代码将输出从\",{\"1\":{\"416\":1}}],[\"上述代码会输出\",{\"1\":{\"416\":1}}],[\"上述对容器的操作都是针对容器\",{\"1\":{\"98\":1}}],[\"上面的例子定义了一个shape接口\",{\"1\":{\"407\":1}}],[\"上传远程代码并合并\",{\"0\":{\"38\":1}}],[\"上提供了\",{\"1\":{\"37\":1,\"38\":1}}],[\"上上上一个版本\",{\"1\":{\"24\":2}}],[\"上上一个版本\",{\"1\":{\"24\":2}}],[\"上一个版本\",{\"1\":{\"24\":2}}],[\"上创建版本库有两种方式\",{\"1\":{\"6\":1}}],[\"说明了切片这种数据类型底层实际上存储了指向切片的指针\",{\"1\":{\"396\":1}}],[\"说明方法属于该接收者\",{\"1\":{\"396\":1}}],[\"说明数组和切片在传递和使用时的区别\",{\"1\":{\"367\":1}}],[\"说明\",{\"1\":{\"24\":1}}],[\"它具有自包含性\",{\"1\":{\"590\":1}}],[\"它具有以下特点\",{\"1\":{\"538\":1}}],[\"它将客户端请求映射到处理函数\",{\"1\":{\"575\":1}}],[\"它类似于\",{\"1\":{\"476\":1}}],[\"它通过将内存划分成大小均匀的小块\",{\"1\":{\"451\":1}}],[\"它首先会去更新\",{\"1\":{\"421\":1}}],[\"它是引用类型\",{\"1\":{\"455\":1}}],[\"它是一个并发安全的\",{\"1\":{\"422\":1}}],[\"它是一种无序集合\",{\"1\":{\"419\":1}}],[\"它是可选的\",{\"1\":{\"418\":1}}],[\"它是方法集合的抽象表示\",{\"1\":{\"406\":1}}],[\"它可以控制同时访问某个资源的线程数\",{\"1\":{\"532\":1}}],[\"它可以是\",{\"1\":{\"418\":1}}],[\"它可以方便地进行环形数据结构的操作\",{\"1\":{\"164\":1}}],[\"它简化了对数据的遍历操作\",{\"1\":{\"417\":1}}],[\"它要求实现该接口的类型必须实现area\",{\"1\":{\"407\":1}}],[\"它限制类型参数必须是数值类型\",{\"1\":{\"404\":1}}],[\"它支持并发编程\",{\"1\":{\"371\":1}}],[\"它支持高效的插入\",{\"1\":{\"162\":1}}],[\"它由\",{\"1\":{\"370\":1}}],[\"它的值为\",{\"1\":{\"438\":1}}],[\"它的语法形式有所不同\",{\"1\":{\"417\":1}}],[\"它的签名是\",{\"1\":{\"381\":1}}],[\"它的长度和容量可以动态改变\",{\"1\":{\"366\":1}}],[\"它的引入使得\",{\"1\":{\"27\":1}}],[\"它实现了常见的排序算法\",{\"1\":{\"321\":1}}],[\"它只有一个方法\",{\"1\":{\"263\":1,\"267\":1}}],[\"它们才会继续执行\",{\"1\":{\"534\":1}}],[\"它们通常与互斥锁结合使用\",{\"1\":{\"531\":1}}],[\"它们帮助程序确保资源的正确使用和状态的一致性\",{\"1\":{\"529\":1}}],[\"它们有不同的特性和适用场景\",{\"1\":{\"503\":1}}],[\"它们是并发执行代码的基础\",{\"1\":{\"494\":1}}],[\"它们是一系列提交的引用\",{\"1\":{\"9\":1}}],[\"它们都指向同一个底层数据结构\",{\"1\":{\"421\":1}}],[\"它们用于指示函数调用或操作是否成功以及发生了什么问题\",{\"1\":{\"379\":1}}],[\"它们用于将数据输出到控制台或其他输出设备\",{\"1\":{\"237\":1}}],[\"它使得你可以轻松定义\",{\"1\":{\"235\":1}}],[\"它使用yaml格式来描述和配置您的应用服务\",{\"1\":{\"51\":1}}],[\"它提供了丰富的功能和灵活的选项\",{\"1\":{\"330\":1}}],[\"它提供了与操作系统交互的功能\",{\"1\":{\"316\":1}}],[\"它提供了一种简单而直接的方式来解析和使用命令行参数\",{\"1\":{\"230\":1}}],[\"它提供了处理格式化输入和输出的基本工具\",{\"1\":{\"236\":1}}],[\"它提供了处理\",{\"1\":{\"128\":1}}],[\"它包含了丰富的功能模块\",{\"1\":{\"135\":1}}],[\"它会返回一个非\",{\"1\":{\"383\":1}}],[\"它会逐行执行其中的指令\",{\"1\":{\"58\":1}}],[\"它会删除回退点之前的所有信息\",{\"1\":{\"24\":1}}],[\"谨慎使用\",{\"1\":{\"24\":1}}],[\"警告\",{\"1\":{\"24\":1}}],[\"将后端处理的数据有效地展示给用户\",{\"1\":{\"606\":1}}],[\"将内部重定向到\",{\"1\":{\"571\":1}}],[\"将多个通道合并为一个通道\",{\"1\":{\"480\":1}}],[\"将结构体序列化为\",{\"1\":{\"447\":1}}],[\"将该类型的值赋值给接口类型的变量\",{\"1\":{\"408\":1}}],[\"将值接收者变为指针接收者\",{\"1\":{\"396\":1}}],[\"将上述代码进行修改\",{\"1\":{\"396\":1}}],[\"将一些逻辑封装成临时使用的函数\",{\"1\":{\"391\":1}}],[\"将分配一个新的底层阵列\",{\"1\":{\"362\":1}}],[\"将指定的时间段添加到时间\",{\"1\":{\"338\":1}}],[\"将时间格式化为字符串\",{\"1\":{\"335\":1}}],[\"将浮点数转换为字符串类型\",{\"1\":{\"328\":1}}],[\"将整数转换为字符串类型\",{\"1\":{\"328\":1}}],[\"将基本数据类型转换为字符串\",{\"0\":{\"328\":1}}],[\"将字符串添加到\",{\"1\":{\"362\":1}}],[\"将字符串解析为时间\",{\"1\":{\"336\":1}}],[\"将字符串转换为浮点数类型\",{\"1\":{\"327\":1}}],[\"将字符串转换为整数类型\",{\"1\":{\"327\":1}}],[\"将字符串转换为基本数据类型\",{\"0\":{\"327\":1}}],[\"将字符串形式的\",{\"1\":{\"312\":1}}],[\"将数据写入多个\",{\"1\":{\"276\":1}}],[\"将数据从一个\",{\"1\":{\"265\":1}}],[\"将数据库文件\",{\"1\":{\"111\":1}}],[\"将链表向前移动一个位置\",{\"1\":{\"165\":1}}],[\"将环形链表向前\",{\"1\":{\"165\":1}}],[\"将元素添加到链表的头部\",{\"1\":{\"163\":1}}],[\"将元素添加到链表的末尾\",{\"1\":{\"163\":1}}],[\"将容器内部使用的网络端口随机映射到我们使用的主机上\",{\"1\":{\"118\":1}}],[\"将容器内的端口映射到宿主机的端口\",{\"1\":{\"51\":1}}],[\"将名为\",{\"1\":{\"108\":1}}],[\"将准备好的镜像推送至仓库\",{\"1\":{\"100\":1}}],[\"将错误日志写入文件\",{\"1\":{\"99\":1}}],[\"将操作系统进行虚拟化\",{\"1\":{\"72\":1}}],[\"将当前目录下的所有文件复制到容器的工作目录\",{\"1\":{\"59\":1}}],[\"将本地文件复制到镜像中\",{\"1\":{\"67\":1}}],[\"将本地仓库区的内容\",{\"1\":{\"39\":1}}],[\"将本地分支没有的数据合并到本地分支\",{\"1\":{\"36\":1}}],[\"将\",{\"1\":{\"39\":1,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"217\":1,\"218\":1,\"220\":1,\"349\":1,\"396\":8,\"447\":1,\"592\":1}}],[\"将创作后的内容\",{\"1\":{\"39\":1}}],[\"将已配置的远程仓库重命名\",{\"1\":{\"35\":1}}],[\"将其添加到当前仓库中\",{\"1\":{\"35\":1}}],[\"将文件保存到指定目录\",{\"1\":{\"559\":1}}],[\"将文件添加到暂存区\",{\"1\":{\"27\":1}}],[\"将文件从暂存区和工作区中删除\",{\"1\":{\"25\":1}}],[\"将暂存区与工作区都回到上一次版本\",{\"1\":{\"24\":1}}],[\"将冲突文件添加到暂存区\",{\"1\":{\"18\":1}}],[\"`form\",{\"1\":{\"553\":3,\"556\":3}}],[\"`c\",{\"1\":{\"550\":2}}],[\"`yaml\",{\"1\":{\"449\":1}}],[\"`bson\",{\"1\":{\"449\":1}}],[\"`gorm\",{\"1\":{\"449\":1}}],[\"`git\",{\"1\":{\"24\":1}}],[\"`<people><person><name>alice<\",{\"1\":{\"229\":1}}],[\"`<person><name>alice<\",{\"1\":{\"220\":1,\"222\":1,\"228\":1}}],[\"`xml\",{\"1\":{\"217\":3,\"218\":3,\"220\":3,\"222\":3,\"223\":3,\"225\":3,\"226\":6,\"229\":2}}],[\"`json\",{\"1\":{\"203\":2,\"204\":2,\"206\":2,\"208\":2,\"209\":2,\"212\":2,\"214\":5,\"447\":4,\"555\":2,\"598\":2}}],[\"`docker\",{\"1\":{\"94\":1}}],[\"`\",{\"1\":{\"24\":1,\"203\":2,\"204\":2,\"206\":4,\"208\":4,\"209\":2,\"212\":4,\"214\":5,\"217\":3,\"218\":3,\"220\":3,\"222\":3,\"223\":3,\"225\":3,\"226\":6,\"229\":2,\"250\":2,\"447\":6,\"449\":3,\"550\":8,\"553\":3,\"555\":2,\"556\":3,\"598\":2}}],[\"保护的路由组\",{\"1\":{\"599\":1}}],[\"保留了结构体\",{\"1\":{\"442\":1}}],[\"保留我们所需要的文本即可\",{\"1\":{\"18\":1}}],[\"保存公钥到文件\",{\"1\":{\"179\":1,\"184\":1}}],[\"保存私钥到文件\",{\"1\":{\"179\":1,\"184\":1}}],[\"保存后\",{\"1\":{\"44\":1}}],[\"保持共同的基础配置\",{\"1\":{\"52\":1}}],[\"保持一致\",{\"1\":{\"24\":1}}],[\"保证了代码的整体性和可靠性\",{\"1\":{\"29\":1}}],[\"用来存储其他变量的内存地址\",{\"1\":{\"432\":1}}],[\"用逗号分隔\",{\"1\":{\"415\":1}}],[\"用面向对象的思想来看\",{\"1\":{\"78\":1}}],[\"用户提交用户名和密码进行登录\",{\"1\":{\"599\":1}}],[\"用户登录\",{\"1\":{\"598\":1}}],[\"用户登录后\",{\"1\":{\"116\":1}}],[\"用户通过用户名和密码等方式向服务器发送认证请求\",{\"1\":{\"593\":1}}],[\"用户资源来操作时\",{\"1\":{\"574\":1}}],[\"用户态调度\",{\"1\":{\"507\":1}}],[\"用户也可以自建私有仓库来存储和管理自己的\",{\"1\":{\"78\":1}}],[\"用户不需要单独安装\",{\"1\":{\"48\":2}}],[\"用户能够更容易地处理不同阶段的更改\",{\"1\":{\"27\":1}}],[\"用于刷新\",{\"1\":{\"599\":1}}],[\"用于生成\",{\"1\":{\"599\":1}}],[\"用于生成日志消息\",{\"1\":{\"141\":1}}],[\"用于标识用户身份的键名\",{\"1\":{\"599\":1}}],[\"用于签署和验证\",{\"1\":{\"599\":1}}],[\"用于验证数据的完整性和身份\",{\"1\":{\"592\":1}}],[\"用于匹配某种模式下的路径\",{\"1\":{\"575\":1}}],[\"用于管理项目的依赖关系\",{\"1\":{\"540\":1}}],[\"用于确保在多线程环境下变量的操作是安全的\",{\"1\":{\"535\":1}}],[\"用于确保同一时刻只有一个\",{\"1\":{\"461\":1}}],[\"用于限制对资源的访问次数\",{\"1\":{\"532\":1}}],[\"用于实现更复杂的同步场景\",{\"1\":{\"531\":1}}],[\"用于等待所有\",{\"1\":{\"530\":1,\"531\":1,\"534\":1}}],[\"用于保护共享资源\",{\"1\":{\"530\":1,\"531\":1}}],[\"用于保护临界区\",{\"1\":{\"530\":1}}],[\"用于控制内存操作的顺序\",{\"1\":{\"512\":1}}],[\"用于描述操作之间的内存顺序关系\",{\"1\":{\"511\":1}}],[\"用于描述集合的长度\",{\"1\":{\"323\":1}}],[\"用于增加计数\",{\"1\":{\"502\":1}}],[\"用于有效地管理和协调多个并发任务\",{\"1\":{\"478\":1}}],[\"用于传递特定的参数给服务器\",{\"1\":{\"575\":1}}],[\"用于传递\",{\"1\":{\"467\":1}}],[\"用于对基本数据类型进行原子操作\",{\"1\":{\"461\":1}}],[\"用于声明一个\",{\"1\":{\"455\":1}}],[\"用于声明一个指向类型\",{\"1\":{\"455\":1}}],[\"用于在网络应用间安全地传输声明\",{\"1\":{\"591\":1}}],[\"用于在多个\",{\"1\":{\"467\":1}}],[\"用于在\",{\"1\":{\"455\":1,\"465\":1}}],[\"用于组织不同类型的字段\",{\"1\":{\"455\":1}}],[\"用于构建集合数据结构\",{\"1\":{\"450\":1}}],[\"用于\",{\"1\":{\"449\":3}}],[\"用于提供给反射等工具以获取结构体字段的额外信息\",{\"1\":{\"447\":1}}],[\"用于存储键值对\",{\"1\":{\"419\":1}}],[\"用于存储相同类型\",{\"1\":{\"359\":1}}],[\"用于迭代数组\",{\"1\":{\"416\":1}}],[\"用于重复执行一段代码块\",{\"1\":{\"416\":1}}],[\"用于重置暂存区的文件与上一次的提交\",{\"1\":{\"24\":1}}],[\"用于连接两个\",{\"1\":{\"273\":1}}],[\"用于表示数据的写入\",{\"1\":{\"267\":1}}],[\"用于表示数据的读取\",{\"1\":{\"263\":1}}],[\"用于格式化输出到文件或其他\",{\"1\":{\"242\":1}}],[\"用于同时进行缓冲读写\",{\"1\":{\"157\":1}}],[\"用于处理跨\",{\"1\":{\"138\":1}}],[\"用于处理命令行输入参数\",{\"1\":{\"136\":1}}],[\"用于持久化数据\",{\"1\":{\"62\":1}}],[\"用于从将本地的分支版本上传到远程并合并\",{\"1\":{\"38\":1}}],[\"用于从远程获取代码并合并本地的版本\",{\"1\":{\"37\":1}}],[\"用于用于管理\",{\"1\":{\"35\":1}}],[\"用于敏捷高效地处理任何或小或大的项目\",{\"1\":{\"29\":1}}],[\"用编辑器打开没有被合并的文件\",{\"1\":{\"17\":1}}],[\"|=\",{\"1\":{\"429\":1,\"431\":1}}],[\"||\",{\"1\":{\"427\":2,\"431\":1}}],[\"|\",{\"1\":{\"24\":2,\"64\":2,\"99\":1,\"294\":2,\"404\":4,\"428\":2,\"431\":1}}],[\"回退版本\",{\"0\":{\"24\":1}}],[\"前面使用\",{\"1\":{\"23\":1}}],[\"两个返回值\",{\"1\":{\"550\":1,\"551\":1}}],[\"两个\",{\"1\":{\"524\":1}}],[\"两个分支\",{\"1\":{\"14\":1}}],[\"两种类型\",{\"1\":{\"396\":1}}],[\"两种写法均可\",{\"1\":{\"22\":1}}],[\"两者的区别请参考\",{\"1\":{\"444\":1}}],[\"两者也可同时兼备\",{\"1\":{\"378\":1}}],[\"两者几乎类似\",{\"1\":{\"353\":1}}],[\"对特定路由应用中间件或对路由组应用中间件\",{\"1\":{\"542\":1}}],[\"对一个互斥锁的解锁操作\",{\"1\":{\"518\":1}}],[\"对共享资源的访问\",{\"1\":{\"460\":1}}],[\"对齐意味着字段的起始地址必须是其类型大小的倍数\",{\"1\":{\"451\":1}}],[\"对应的rune值\",{\"1\":{\"417\":1}}],[\"对应的也会造成原值的改变\",{\"1\":{\"396\":1}}],[\"对切片的操作是通过该指针来进行的\",{\"1\":{\"396\":1}}],[\"对\",{\"1\":{\"325\":1}}],[\"对实现了\",{\"1\":{\"325\":1}}],[\"对字符串类型的切片进行升序排序\",{\"1\":{\"322\":1}}],[\"对浮点数类型的切片进行升序排序\",{\"1\":{\"322\":1}}],[\"对整数类型的切片进行升序排序\",{\"1\":{\"322\":1}}],[\"对结构体输出字段名\",{\"1\":{\"238\":1}}],[\"对称加密\",{\"1\":{\"185\":1}}],[\"对上一节中的\",{\"1\":{\"45\":1}}],[\"对象作为模板的数据上下文\",{\"1\":{\"605\":1}}],[\"对象方法\",{\"1\":{\"396\":1}}],[\"对象转换为带缩进格式的\",{\"1\":{\"204\":1,\"218\":1}}],[\"对象转换为\",{\"1\":{\"203\":1,\"217\":1}}],[\"对象\",{\"1\":{\"43\":1,\"206\":1,\"220\":1}}],[\"对本地分支不做任何更改\",{\"1\":{\"36\":1}}],[\"对于多文件上传\",{\"1\":{\"560\":1}}],[\"对于简单的计数操作\",{\"1\":{\"464\":1}}],[\"对于通道\",{\"1\":{\"417\":1}}],[\"对于映射\",{\"1\":{\"417\":1}}],[\"对于字符串\",{\"1\":{\"417\":1}}],[\"对于数组和切片\",{\"1\":{\"417\":1}}],[\"对于调试开发更为优雅舒适\",{\"1\":{\"378\":1}}],[\"对于希望构建高性能\",{\"1\":{\"373\":1}}],[\"对于大文件\",{\"1\":{\"196\":1}}],[\"对于使用\",{\"1\":{\"44\":1}}],[\"对于远程仓库的操作\",{\"1\":{\"35\":1}}],[\"对于分支合并\",{\"1\":{\"14\":1}}],[\"对工作区文件做出了修改\",{\"1\":{\"22\":1}}],[\"squared\",{\"1\":{\"482\":2}}],[\"squarer\",{\"1\":{\"482\":2}}],[\"sqrt\",{\"1\":{\"302\":3}}],[\"sqrtphi\",{\"1\":{\"301\":2}}],[\"sqrtpi\",{\"1\":{\"301\":2}}],[\"sqrte\",{\"1\":{\"301\":2}}],[\"sqrt2\",{\"1\":{\"301\":2}}],[\"safe\",{\"1\":{\"540\":1}}],[\"safety\",{\"0\":{\"460\":1},\"1\":{\"459\":1}}],[\"saturday\",{\"1\":{\"415\":1}}],[\"saveuploadedfile\",{\"1\":{\"559\":2,\"560\":1}}],[\"saved\",{\"1\":{\"179\":1,\"184\":1}}],[\"save\",{\"1\":{\"88\":1,\"552\":1,\"588\":1,\"590\":1}}],[\"sleep\",{\"1\":{\"344\":1,\"346\":1,\"418\":2,\"450\":1,\"475\":1,\"476\":2,\"479\":1,\"480\":1,\"481\":1,\"483\":1,\"484\":2,\"489\":3,\"490\":2,\"491\":2,\"492\":2,\"501\":1,\"502\":1,\"524\":2,\"525\":1,\"532\":2}}],[\"sleeping\",{\"1\":{\"344\":1}}],[\"sliceheader\",{\"1\":{\"363\":1}}],[\"slice\",{\"0\":{\"159\":1},\"1\":{\"360\":1,\"361\":6,\"362\":39,\"363\":13,\"364\":1,\"366\":2,\"367\":6,\"417\":1,\"455\":1,\"551\":3}}],[\"srv\",{\"1\":{\"313\":1}}],[\"src\",{\"1\":{\"265\":2,\"280\":2}}],[\"successfully\",{\"1\":{\"559\":1}}],[\"sunday\",{\"1\":{\"415\":1}}],[\"subject\",{\"1\":{\"592\":1}}],[\"sub\",{\"1\":{\"339\":1,\"543\":1,\"592\":2}}],[\"submit\",{\"1\":{\"254\":1}}],[\"sum256\",{\"1\":{\"174\":1,\"185\":1}}],[\"sum\",{\"1\":{\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"175\":1,\"182\":1,\"389\":2,\"399\":2,\"404\":6,\"416\":5,\"425\":1}}],[\"sudo\",{\"1\":{\"31\":1,\"44\":2,\"48\":1}}],[\"specified\",{\"1\":{\"550\":1}}],[\"sprintf\",{\"1\":{\"164\":1,\"240\":1,\"242\":1,\"483\":1,\"560\":1}}],[\"split\",{\"1\":{\"155\":2}}],[\"switah\",{\"1\":{\"415\":1}}],[\"switch\",{\"0\":{\"415\":1},\"1\":{\"132\":1,\"229\":1,\"415\":14,\"418\":1,\"476\":1,\"540\":1}}],[\"swap\",{\"1\":{\"161\":1,\"323\":2,\"325\":1,\"436\":2}}],[\"scanwords\",{\"1\":{\"155\":1}}],[\"scanning\",{\"1\":{\"154\":1,\"155\":1}}],[\"scanner\",{\"0\":{\"153\":1},\"1\":{\"154\":4,\"155\":6}}],[\"scan\",{\"1\":{\"154\":1,\"155\":1,\"239\":2}}],[\"scm\",{\"1\":{\"29\":1,\"33\":2}}],[\"syntax\",{\"1\":{\"329\":1}}],[\"sync\",{\"1\":{\"138\":3,\"422\":5,\"462\":3,\"463\":4,\"464\":4,\"465\":3,\"479\":3,\"480\":1,\"481\":3,\"484\":4,\"502\":5,\"509\":2,\"514\":3,\"515\":3,\"516\":3,\"518\":5,\"530\":3,\"531\":4,\"534\":4,\"535\":2}}],[\"systemctl\",{\"1\":{\"44\":2}}],[\"systemd\",{\"1\":{\"44\":1}}],[\"sshconn\",{\"1\":{\"132\":4}}],[\"ssh\",{\"0\":{\"127\":1},\"1\":{\"128\":3,\"129\":2,\"131\":9,\"132\":12,\"133\":2,\"134\":1}}],[\"signal\",{\"1\":{\"531\":1}}],[\"signalcondition\",{\"1\":{\"531\":3}}],[\"signature\",{\"1\":{\"185\":3,\"592\":1,\"593\":1}}],[\"signing\",{\"1\":{\"185\":1}}],[\"sign\",{\"1\":{\"185\":1}}],[\"sin\",{\"1\":{\"141\":1,\"303\":3}}],[\"since\",{\"1\":{\"99\":1}}],[\"since=\",{\"1\":{\"99\":4}}],[\"sizeof\",{\"1\":{\"450\":1,\"451\":2}}],[\"size\",{\"1\":{\"81\":1,\"451\":4}}],[\"store\",{\"1\":{\"422\":2,\"588\":2,\"590\":2}}],[\"stopped\",{\"1\":{\"346\":1}}],[\"stop\",{\"1\":{\"93\":1,\"122\":2,\"346\":1}}],[\"stice\",{\"1\":{\"362\":1}}],[\"st\",{\"1\":{\"214\":1,\"226\":1}}],[\"str\",{\"1\":{\"327\":4,\"328\":4,\"329\":4,\"336\":2,\"417\":2}}],[\"street\",{\"1\":{\"214\":3,\"226\":3}}],[\"stream\",{\"1\":{\"177\":4}}],[\"structname\",{\"1\":{\"443\":2,\"445\":1}}],[\"struct\",{\"1\":{\"161\":1,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":2,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":2,\"229\":1,\"240\":1,\"323\":1,\"325\":1,\"363\":1,\"396\":1,\"401\":1,\"408\":1,\"430\":1,\"443\":3,\"444\":1,\"446\":2,\"447\":1,\"449\":1,\"450\":9,\"451\":3,\"455\":2,\"532\":3,\"553\":2,\"555\":1,\"556\":1,\"598\":1}}],[\"stringlist\",{\"1\":{\"401\":4}}],[\"string\",{\"1\":{\"147\":1,\"148\":1,\"157\":1,\"161\":1,\"191\":1,\"192\":1,\"200\":2,\"203\":2,\"204\":2,\"206\":1,\"208\":1,\"209\":1,\"211\":3,\"212\":2,\"214\":4,\"217\":2,\"218\":2,\"220\":1,\"222\":1,\"223\":1,\"225\":2,\"226\":4,\"229\":1,\"231\":1,\"234\":1,\"239\":1,\"240\":4,\"249\":1,\"250\":1,\"252\":1,\"264\":1,\"275\":1,\"278\":1,\"280\":1,\"309\":1,\"310\":2,\"312\":1,\"317\":7,\"318\":4,\"320\":3,\"323\":1,\"325\":1,\"328\":4,\"380\":2,\"381\":1,\"400\":1,\"401\":1,\"403\":1,\"415\":2,\"417\":2,\"418\":2,\"420\":2,\"421\":1,\"423\":2,\"430\":1,\"444\":1,\"446\":2,\"447\":4,\"449\":1,\"450\":2,\"454\":1,\"455\":3,\"456\":1,\"483\":3,\"492\":2,\"550\":9,\"551\":4,\"552\":6,\"553\":2,\"555\":2,\"556\":3,\"565\":3,\"569\":1,\"570\":1,\"571\":1,\"572\":9,\"575\":5,\"584\":3,\"588\":3,\"598\":5}}],[\"strings\",{\"1\":{\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"154\":2,\"157\":3,\"208\":2,\"222\":2,\"228\":2,\"229\":2,\"264\":2,\"265\":1,\"270\":2,\"275\":4,\"278\":3,\"280\":3,\"322\":1,\"400\":2,\"551\":2}}],[\"stringvar\",{\"1\":{\"136\":1,\"231\":2,\"232\":2}}],[\"strconv\",{\"0\":{\"326\":1},\"1\":{\"137\":3,\"200\":2,\"326\":2,\"327\":4,\"328\":4,\"329\":5,\"330\":2}}],[\"stderr\",{\"1\":{\"131\":2,\"234\":5}}],[\"stdout\",{\"1\":{\"131\":2,\"150\":1,\"151\":1,\"152\":1,\"209\":1,\"223\":1,\"265\":1,\"268\":1,\"271\":1,\"273\":1,\"276\":1,\"280\":1,\"299\":1}}],[\"stdin\",{\"1\":{\"90\":1}}],[\"stateless\",{\"1\":{\"594\":1}}],[\"static\",{\"1\":{\"258\":2}}],[\"statusmovedpermanently\",{\"1\":{\"570\":1}}],[\"statusfound\",{\"1\":{\"569\":1}}],[\"statusbadrequest\",{\"1\":{\"553\":2,\"555\":1,\"556\":1,\"584\":1,\"588\":1}}],[\"statusok\",{\"1\":{\"551\":3,\"552\":2,\"553\":3,\"555\":1,\"556\":1,\"557\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"574\":4,\"575\":6,\"584\":2,\"588\":2,\"598\":1,\"603\":1}}],[\"statusunauthorized\",{\"1\":{\"544\":1}}],[\"statusnotfound\",{\"1\":{\"260\":1}}],[\"status\",{\"1\":{\"17\":1,\"21\":2,\"25\":1,\"309\":2,\"314\":2,\"562\":1,\"563\":1}}],[\"starttime\",{\"1\":{\"543\":2}}],[\"starting\",{\"1\":{\"502\":1}}],[\"started\",{\"1\":{\"246\":1,\"247\":1,\"254\":1,\"256\":1,\"260\":1,\"450\":2,\"479\":1,\"492\":1}}],[\"startelement\",{\"1\":{\"229\":1}}],[\"start\",{\"1\":{\"92\":1,\"480\":2}}],[\"star\",{\"1\":{\"82\":1}}],[\"stars\",{\"1\":{\"82\":1}}],[\"stage\",{\"1\":{\"39\":1}}],[\"staged\",{\"1\":{\"22\":1,\"25\":1,\"27\":1}}],[\"shouldbind\",{\"1\":{\"598\":1}}],[\"shouldbindquery\",{\"1\":{\"553\":5}}],[\"shortcut\",{\"1\":{\"550\":2}}],[\"show\",{\"1\":{\"35\":1}}],[\"shell\",{\"1\":{\"49\":1,\"132\":1}}],[\"sh\",{\"1\":{\"49\":1}}],[\"shape\",{\"1\":{\"407\":1,\"409\":1}}],[\"sha1\",{\"1\":{\"171\":2,\"172\":2}}],[\"sha256\",{\"1\":{\"141\":1,\"174\":2,\"175\":2,\"182\":2,\"185\":2,\"592\":1}}],[\"sha\",{\"1\":{\"29\":2,\"171\":2,\"172\":2,\"174\":2,\"175\":2}}],[\"secret\",{\"1\":{\"588\":1,\"590\":1,\"598\":1}}],[\"secure\",{\"1\":{\"583\":1}}],[\"securejson\",{\"1\":{\"572\":2}}],[\"secondelement\",{\"1\":{\"162\":2}}],[\"seconds\",{\"1\":{\"92\":1,\"344\":1}}],[\"second\",{\"1\":{\"22\":1,\"252\":1,\"314\":1,\"344\":1,\"345\":1,\"346\":2,\"418\":2,\"450\":1,\"475\":1,\"476\":2,\"479\":1,\"481\":1,\"483\":2,\"484\":1,\"489\":2,\"490\":2,\"491\":2,\"492\":2,\"501\":1,\"502\":1,\"522\":1,\"524\":2,\"525\":2,\"532\":2}}],[\"see\",{\"1\":{\"550\":1}}],[\"seed\",{\"1\":{\"306\":2}}],[\"sem\",{\"1\":{\"532\":5}}],[\"semaphores\",{\"0\":{\"532\":1}}],[\"send\",{\"1\":{\"468\":1}}],[\"select\",{\"0\":{\"418\":1,\"476\":1,\"521\":1},\"1\":{\"418\":13,\"476\":3,\"483\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"521\":3,\"522\":1,\"523\":1,\"524\":2,\"525\":2,\"526\":2,\"527\":3,\"528\":2}}],[\"se\",{\"1\":{\"229\":3}}],[\"sessions\",{\"1\":{\"580\":1,\"588\":7,\"590\":8}}],[\"sessionid\",{\"1\":{\"579\":2}}],[\"session\",{\"0\":{\"585\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1},\"1\":{\"131\":6,\"132\":1,\"578\":1,\"579\":1,\"580\":2,\"586\":4,\"587\":1,\"588\":15,\"589\":3,\"590\":13}}],[\"serving\",{\"1\":{\"540\":1}}],[\"services\",{\"1\":{\"49\":1,\"51\":2,\"52\":3,\"112\":1}}],[\"servehttp\",{\"1\":{\"256\":1}}],[\"servefile\",{\"1\":{\"254\":1}}],[\"servemux\",{\"1\":{\"247\":1}}],[\"serverconfig\",{\"1\":{\"132\":2}}],[\"server\",{\"1\":{\"131\":1,\"246\":1,\"247\":1,\"254\":1,\"256\":1,\"260\":1,\"310\":2,\"313\":1,\"450\":5}}],[\"search查找\",{\"1\":{\"82\":1}}],[\"search\",{\"1\":{\"82\":2,\"325\":1,\"549\":1,\"550\":2,\"575\":3}}],[\"setsession\",{\"1\":{\"590\":1}}],[\"setcookie\",{\"1\":{\"584\":1}}],[\"settings\",{\"1\":{\"544\":3}}],[\"setmode\",{\"1\":{\"540\":1}}],[\"setenv\",{\"1\":{\"318\":2}}],[\"setoutput\",{\"1\":{\"297\":1}}],[\"setprefix\",{\"1\":{\"295\":1}}],[\"setflags\",{\"1\":{\"294\":1}}],[\"set\",{\"1\":{\"35\":1,\"397\":1,\"450\":1,\"540\":1,\"567\":1,\"584\":2,\"588\":3,\"590\":3}}],[\"svn\",{\"1\":{\"29\":8}}],[\"svn和git都是版本控制系统\",{\"1\":{\"29\":1}}],[\"something\",{\"1\":{\"241\":1,\"382\":2,\"384\":2}}],[\"somefunction\",{\"1\":{\"241\":2,\"382\":1,\"383\":1}}],[\"some\",{\"1\":{\"177\":1}}],[\"sorted\",{\"1\":{\"323\":1,\"325\":1}}],[\"sort\",{\"1\":{\"137\":1,\"321\":2,\"322\":5,\"323\":3,\"325\":12}}],[\"sourceforge\",{\"1\":{\"31\":1}}],[\"source=<commit>\",{\"1\":{\"27\":1}}],[\"soft\",{\"1\":{\"24\":3}}],[\"s\",{\"1\":{\"21\":2,\"32\":1,\"43\":1,\"48\":1,\"132\":2,\"161\":1,\"177\":1,\"180\":1,\"185\":4,\"234\":1,\"237\":1,\"238\":2,\"239\":1,\"240\":1,\"264\":1,\"285\":1,\"288\":1,\"290\":1,\"310\":3,\"323\":1,\"325\":1,\"328\":2,\"400\":2,\"404\":2,\"409\":2,\"411\":2,\"417\":1,\"421\":2,\"422\":2,\"446\":2,\"451\":10,\"483\":1,\"492\":1,\"575\":3,\"584\":1,\"588\":1}}],[\"显示指定远程仓库的详细信息\",{\"1\":{\"35\":1}}],[\"显示两次提交之间的差异\",{\"1\":{\"22\":1}}],[\"显示暂存区和上一次提交\",{\"1\":{\"22\":1}}],[\"显示尚未纳入版本控制的新文件列表\",{\"1\":{\"21\":1}}],[\"显示已修改但尚未使用\",{\"1\":{\"21\":1}}],[\"未初始化的\",{\"1\":{\"421\":1}}],[\"未导出\",{\"1\":{\"397\":1}}],[\"未知数组长度\",{\"1\":{\"356\":1}}],[\"未跟踪的文件\",{\"1\":{\"21\":1}}],[\"未暂存的修改\",{\"1\":{\"21\":1}}],[\"未合并的路径\",{\"1\":{\"17\":1}}],[\"例如路由参数\",{\"1\":{\"541\":1}}],[\"例如赋值运算符=\",{\"1\":{\"431\":1}}],[\"例如在一定时间内等待某个操作完成或者超时返回默认结果\",{\"1\":{\"418\":1}}],[\"例如函数参数或者存储任意类型的数据\",{\"1\":{\"410\":1}}],[\"例如泛型列表\",{\"1\":{\"401\":1}}],[\"例如打印错误信息或者进行其他操作\",{\"1\":{\"383\":1}}],[\"例如将整数转换为字符串\",{\"1\":{\"326\":1}}],[\"例如实现循环队列\",{\"1\":{\"165\":1}}],[\"例如实现队列\",{\"1\":{\"163\":1}}],[\"例如文件操作\",{\"1\":{\"136\":1}}],[\"例如更新包列表\",{\"1\":{\"59\":1}}],[\"例如安装软件包\",{\"1\":{\"58\":1}}],[\"例如使用的docker镜像\",{\"1\":{\"51\":1}}],[\"例如映像\",{\"1\":{\"43\":1}}],[\"例如\",{\"1\":{\"21\":1,\"52\":3,\"65\":1,\"136\":2,\"137\":1,\"139\":1,\"231\":1,\"381\":1,\"382\":1,\"383\":1,\"402\":1,\"404\":1,\"407\":1,\"408\":1,\"409\":1,\"411\":1,\"417\":4,\"421\":1,\"431\":2,\"449\":1,\"451\":2,\"462\":1,\"495\":1,\"502\":1,\"528\":1,\"549\":1,\"575\":1,\"592\":2}}],[\"该互斥锁的后续加锁操作\",{\"1\":{\"518\":1}}],[\"该示例定义了两个数据类型为\",{\"1\":{\"456\":1}}],[\"该示例定义了一个数据类型为\",{\"1\":{\"456\":1}}],[\"该长度为键值对的个数\",{\"1\":{\"421\":1}}],[\"该变量的作用域仅限于\",{\"1\":{\"415\":1}}],[\"该函数可以求两个整数的和\",{\"1\":{\"399\":1}}],[\"该接口包括\",{\"1\":{\"323\":1}}],[\"该命令可以将指定文件\",{\"1\":{\"27\":1}}],[\"该命令作用包括还原文件到最新提交的状态\",{\"1\":{\"27\":1}}],[\"该命令显示如下信息\",{\"1\":{\"21\":1}}],[\"该语句会删除\",{\"1\":{\"25\":1}}],[\"该指令即查看名为\",{\"1\":{\"121\":1}}],[\"该指令一次性清除所有的停止状态的容器\",{\"1\":{\"97\":1}}],[\"该指令的功能就是将远程主机上的远程分支拉过来\",{\"1\":{\"37\":1}}],[\"该指令的功能是删除名为\",{\"1\":{\"12\":1}}],[\"该指令是无法直接删除运行中的容器\",{\"1\":{\"124\":1}}],[\"该指令是在获取远程分支数据后\",{\"1\":{\"36\":1}}],[\"该指令是获取远程分支\",{\"1\":{\"36\":1}}],[\"该指令把文件从暂存区域移除\",{\"1\":{\"25\":1}}],[\"该指令会回到分支合并之前的状态\",{\"1\":{\"18\":1}}],[\"dl\",{\"1\":{\"375\":1}}],[\"duration\",{\"1\":{\"339\":2,\"483\":1}}],[\"dst\",{\"1\":{\"265\":2,\"280\":2}}],[\"d3a11e669e88\",{\"1\":{\"92\":1,\"93\":2,\"94\":2}}],[\"d\",{\"1\":{\"54\":1,\"55\":2,\"94\":1,\"98\":1,\"108\":1,\"118\":3,\"120\":1,\"161\":1,\"164\":1,\"237\":1,\"238\":2,\"240\":1,\"264\":1,\"265\":1,\"285\":1,\"288\":1,\"290\":1,\"319\":2,\"323\":1,\"325\":1,\"327\":1,\"329\":1,\"416\":2,\"417\":4,\"421\":1,\"422\":1,\"436\":4,\"437\":3,\"446\":2,\"451\":8,\"479\":4,\"481\":2,\"483\":1,\"484\":4,\"502\":2,\"532\":2,\"534\":1,\"560\":1}}],[\"dave\",{\"1\":{\"444\":1}}],[\"david\",{\"1\":{\"162\":1,\"421\":3}}],[\"day\",{\"1\":{\"415\":1}}],[\"date\",{\"1\":{\"294\":1,\"351\":1}}],[\"dataslice\",{\"1\":{\"363\":12}}],[\"data3\",{\"1\":{\"356\":1}}],[\"data2\",{\"1\":{\"356\":1}}],[\"data1\",{\"1\":{\"356\":1}}],[\"datatype4\",{\"1\":{\"443\":1}}],[\"datatype3\",{\"1\":{\"443\":1}}],[\"datatype2\",{\"1\":{\"443\":1}}],[\"datatype1\",{\"1\":{\"443\":2}}],[\"datatype\",{\"1\":{\"355\":1,\"356\":2,\"443\":1}}],[\"data的卷\",{\"1\":{\"52\":1}}],[\"data用于持久化数据库的数据\",{\"1\":{\"51\":1}}],[\"data\",{\"1\":{\"51\":3,\"52\":3,\"62\":1,\"108\":3,\"112\":2,\"155\":2,\"168\":2,\"171\":2,\"174\":2,\"188\":1,\"189\":1,\"191\":2,\"192\":2,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"203\":2,\"204\":2,\"206\":2,\"208\":2,\"211\":2,\"212\":4,\"214\":3,\"217\":2,\"218\":2,\"220\":2,\"222\":2,\"225\":2,\"226\":3,\"228\":2,\"229\":2,\"250\":2,\"280\":1,\"363\":1,\"526\":1,\"572\":3,\"574\":4,\"598\":2}}],[\"daemon\",{\"1\":{\"44\":2,\"62\":1}}],[\"db\",{\"1\":{\"49\":4,\"51\":4,\"52\":4,\"318\":1}}],[\"doe\",{\"1\":{\"592\":1}}],[\"dowork\",{\"1\":{\"489\":2,\"490\":2,\"491\":2,\"492\":4}}],[\"down\",{\"1\":{\"50\":1}}],[\"download\",{\"1\":{\"33\":1,\"48\":1}}],[\"done\",{\"1\":{\"450\":3,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"479\":1,\"480\":1,\"481\":1,\"484\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"502\":4,\"514\":1,\"515\":2,\"516\":1,\"517\":6,\"518\":2,\"530\":1,\"531\":1,\"532\":1,\"533\":6,\"534\":2}}],[\"doubled\",{\"1\":{\"482\":2}}],[\"doubler\",{\"1\":{\"482\":2}}],[\"double\",{\"1\":{\"391\":2,\"396\":10}}],[\"dosomething\",{\"1\":{\"384\":2,\"488\":2}}],[\"do\",{\"1\":{\"164\":2,\"165\":1,\"384\":1}}],[\"dokcer\",{\"1\":{\"85\":1}}],[\"doc\",{\"1\":{\"375\":1}}],[\"doctype\",{\"1\":{\"254\":1,\"564\":1,\"604\":1}}],[\"docs\",{\"1\":{\"62\":1,\"75\":3}}],[\"document\",{\"1\":{\"44\":1}}],[\"docker仓库\",{\"0\":{\"100\":1},\"1\":{\"78\":1}}],[\"docker镜像\",{\"0\":{\"80\":1},\"1\":{\"78\":1}}],[\"docker镜像加速\",{\"0\":{\"44\":1}}],[\"docker和普通虚拟机的区别\",{\"0\":{\"72\":1}}],[\"docker通过容器化技术提供了一种便捷\",{\"1\":{\"71\":1}}],[\"docker通过优化资源使用\",{\"1\":{\"71\":1}}],[\"docker拥有丰富的生态系统\",{\"1\":{\"71\":1}}],[\"docker容器\",{\"0\":{\"89\":1},\"1\":{\"78\":1}}],[\"docker容器提供了进程级别的隔离\",{\"1\":{\"71\":1}}],[\"docker容器可以快速启动\",{\"1\":{\"71\":1}}],[\"docker容器可以在不同的操作系统和云平台上运行\",{\"1\":{\"71\":1}}],[\"docker容器的镜像可以被版本控制\",{\"1\":{\"71\":1}}],[\"docker容器共享宿主操作系统的内核\",{\"1\":{\"71\":1}}],[\"docker允许开发人员将应用程序及其所有依赖项打包到一个称为容器的独立单元中\",{\"1\":{\"71\":1}}],[\"docker是一种容器化平台\",{\"1\":{\"71\":1}}],[\"docker是什么\",{\"0\":{\"70\":1}}],[\"docker能干什么\",{\"0\":{\"71\":1}}],[\"dockerfile\",{\"0\":{\"57\":1},\"1\":{\"47\":1,\"58\":3,\"59\":2,\"63\":1,\"64\":3,\"65\":2,\"66\":10,\"68\":3}}],[\"docker官方安装教程\",{\"0\":{\"75\":1}}],[\"docker官方\",{\"1\":{\"44\":1}}],[\"dockerhub\",{\"1\":{\"44\":1}}],[\"docker桌面\",{\"1\":{\"43\":1}}],[\"docker守护进程\",{\"1\":{\"43\":1}}],[\"docker服务端\",{\"1\":{\"43\":1}}],[\"docker客户端\",{\"1\":{\"43\":1}}],[\"docker架构\",{\"0\":{\"43\":1}}],[\"docker\",{\"0\":{\"42\":1,\"46\":1,\"53\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"101\":1,\"104\":1,\"105\":1,\"112\":1,\"114\":1,\"117\":1,\"125\":1},\"1\":{\"43\":19,\"44\":13,\"45\":10,\"47\":6,\"48\":9,\"49\":3,\"50\":5,\"51\":2,\"52\":3,\"53\":4,\"54\":4,\"55\":2,\"56\":3,\"58\":4,\"60\":1,\"62\":2,\"63\":4,\"64\":2,\"66\":6,\"68\":4,\"70\":3,\"72\":4,\"73\":1,\"75\":6,\"76\":1,\"77\":1,\"78\":8,\"79\":15,\"80\":6,\"81\":1,\"82\":8,\"83\":4,\"84\":8,\"85\":9,\"87\":3,\"88\":2,\"89\":2,\"90\":1,\"91\":1,\"92\":1,\"93\":2,\"94\":6,\"95\":4,\"96\":2,\"97\":1,\"98\":1,\"99\":7,\"100\":9,\"101\":5,\"102\":3,\"103\":3,\"104\":4,\"105\":1,\"107\":2,\"108\":1,\"109\":2,\"110\":2,\"112\":1,\"113\":2,\"114\":4,\"115\":3,\"116\":4,\"117\":1,\"118\":3,\"119\":3,\"120\":2,\"121\":2,\"122\":6,\"123\":4,\"124\":2,\"372\":1}}],[\"dicts\",{\"1\":{\"552\":2}}],[\"division\",{\"1\":{\"395\":1}}],[\"divide\",{\"1\":{\"388\":2,\"395\":2}}],[\"discardrequests\",{\"1\":{\"132\":1}}],[\"dialer\",{\"0\":{\"314\":1},\"1\":{\"314\":4}}],[\"dialudp\",{\"1\":{\"310\":2}}],[\"dial\",{\"1\":{\"131\":2,\"139\":1,\"309\":2,\"314\":1,\"315\":1}}],[\"difference\",{\"1\":{\"339\":1}}],[\"diff\",{\"1\":{\"22\":4,\"425\":1}}],[\"directory\",{\"1\":{\"318\":1,\"320\":1}}],[\"dir\",{\"1\":{\"20\":1,\"25\":2,\"49\":1,\"258\":1,\"320\":2}}],[\"deadline\",{\"1\":{\"491\":3}}],[\"debug\",{\"1\":{\"295\":1,\"540\":6}}],[\"debian\",{\"1\":{\"32\":1}}],[\"defaultvalue\",{\"1\":{\"550\":3}}],[\"defaultquery\",{\"1\":{\"550\":6,\"575\":1}}],[\"default\",{\"1\":{\"234\":2,\"415\":5,\"418\":6,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"522\":1,\"526\":3,\"527\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":3,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"584\":1,\"588\":3,\"590\":3,\"598\":1,\"602\":1,\"603\":1}}],[\"defer\",{\"1\":{\"131\":1,\"132\":2,\"179\":2,\"180\":2,\"184\":2,\"185\":2,\"188\":1,\"189\":1,\"191\":2,\"192\":2,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"249\":1,\"250\":1,\"252\":1,\"273\":1,\"276\":1,\"309\":1,\"310\":1,\"315\":1,\"317\":2,\"394\":3,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"479\":1,\"481\":1,\"484\":2,\"490\":1,\"491\":1,\"492\":1,\"502\":1,\"514\":1,\"515\":3,\"516\":1,\"518\":3,\"530\":2,\"531\":1,\"534\":1}}],[\"decoding\",{\"1\":{\"208\":1,\"222\":1,\"228\":1,\"229\":2}}],[\"decodeelement\",{\"1\":{\"229\":1}}],[\"decoder\",{\"1\":{\"208\":2,\"222\":2,\"228\":2,\"229\":3}}],[\"decode\",{\"1\":{\"180\":2,\"185\":2,\"208\":1,\"222\":1}}],[\"decrypting\",{\"1\":{\"180\":1}}],[\"decryptpkcs1v15\",{\"1\":{\"180\":1}}],[\"decrypted\",{\"1\":{\"177\":1,\"180\":3}}],[\"destination\",{\"1\":{\"559\":1}}],[\"describe\",{\"1\":{\"410\":4}}],[\"description\",{\"1\":{\"82\":1}}],[\"description=\",{\"1\":{\"62\":1}}],[\"desktop\",{\"1\":{\"75\":6,\"82\":2}}],[\"depends\",{\"1\":{\"51\":1,\"551\":1}}],[\"detail\",{\"1\":{\"44\":1}}],[\"delete\",{\"1\":{\"38\":1,\"421\":2,\"574\":3,\"575\":1}}],[\"deleted\",{\"1\":{\"17\":1}}],[\"dev\",{\"1\":{\"14\":4,\"17\":3,\"49\":1}}],[\"devprojects\",{\"1\":{\"8\":1}}],[\"添加用户\",{\"1\":{\"574\":1}}],[\"添加元素\",{\"1\":{\"450\":1}}],[\"添加元数据\",{\"1\":{\"62\":1}}],[\"添加数据到切片末尾\",{\"1\":{\"362\":1}}],[\"添加\",{\"1\":{\"362\":1}}],[\"添加到\",{\"1\":{\"39\":1}}],[\"添加到暂存区的文件列表\",{\"1\":{\"21\":1}}],[\"添加一个新的远程仓库\",{\"1\":{\"35\":1}}],[\"添加一个或多个文件到暂存区\",{\"1\":{\"20\":1}}],[\"添加当前目录下的所有文件到暂存区\",{\"1\":{\"20\":1}}],[\"添加指定目录到暂存区\",{\"1\":{\"20\":1}}],[\"添加文件到暂存区\",{\"0\":{\"20\":1}}],[\"时将重定向到\",{\"1\":{\"571\":1}}],[\"时将永久重定向到\",{\"1\":{\"570\":1}}],[\"时将临时重定向到\",{\"1\":{\"569\":1}}],[\"时返回的键值对的顺序是不确定的\",{\"1\":{\"419\":1}}],[\"时退出循环\",{\"1\":{\"416\":1}}],[\"时执行的代码块\",{\"1\":{\"415\":2}}],[\"时执行的语句\",{\"1\":{\"414\":6}}],[\"时间计算还是处理不同的时区\",{\"1\":{\"352\":1}}],[\"时间区和本地化\",{\"0\":{\"350\":1}}],[\"时间戳转换为时间\",{\"1\":{\"349\":1}}],[\"时间戳\",{\"0\":{\"347\":1},\"1\":{\"348\":1}}],[\"时间比较\",{\"0\":{\"341\":1}}],[\"时间操作\",{\"0\":{\"337\":1}}],[\"时间处理\",{\"1\":{\"141\":1}}],[\"时\",{\"1\":{\"58\":1,\"423\":1,\"569\":1,\"570\":1,\"571\":1}}],[\"时就会在\",{\"1\":{\"25\":1}}],[\"时哪些文件做出了修改\",{\"1\":{\"20\":1}}],[\"时已经帮我们创建好了\",{\"1\":{\"10\":1}}],[\"告诉\",{\"1\":{\"20\":1}}],[\"常见的锁类型有\",{\"1\":{\"530\":1}}],[\"常见的并发安全技术\",{\"0\":{\"461\":1}}],[\"常见的包括\",{\"1\":{\"447\":1}}],[\"常量\",{\"0\":{\"301\":1,\"457\":1},\"1\":{\"397\":1}}],[\"常用于身份验证\",{\"1\":{\"595\":1}}],[\"常用于处理请求生命周期管理\",{\"1\":{\"485\":1}}],[\"常用选项\",{\"0\":{\"65\":1}}],[\"常用工具\",{\"0\":{\"2\":1}}],[\"常常使用到不止一个容器\",{\"1\":{\"46\":1}}],[\"常常在项目版本控制的过程中\",{\"1\":{\"24\":1}}],[\"常常遇到当冲突发生后\",{\"1\":{\"18\":1}}],[\"提供一种无锁机制\",{\"1\":{\"461\":1}}],[\"提供的语法糖\",{\"1\":{\"445\":1}}],[\"提供静态文件服务\",{\"0\":{\"258\":1},\"1\":{\"258\":1}}],[\"提供了方便的方法来操作\",{\"1\":{\"584\":1}}],[\"提供了多种方法来实现\",{\"1\":{\"568\":1}}],[\"提供了多种同步原语来确保内存操作的顺序性和可见性\",{\"1\":{\"513\":1}}],[\"提供了封装方法\",{\"1\":{\"553\":1}}],[\"提供了两个直接\",{\"1\":{\"551\":1,\"552\":1}}],[\"提供了类型推导\",{\"1\":{\"456\":1}}],[\"提供了指针\",{\"1\":{\"432\":1}}],[\"提供了非常高效的查找\",{\"1\":{\"419\":1}}],[\"提供了丰富的标准库\",{\"1\":{\"371\":1}}],[\"提供了强大的并发处理能力\",{\"1\":{\"371\":1}}],[\"提供了基本的数学函数和常量\",{\"1\":{\"141\":1}}],[\"提供了基本的同步操作\",{\"1\":{\"138\":1}}],[\"提供了更强大的跨平台性\",{\"1\":{\"71\":1}}],[\"提供了\",{\"1\":{\"35\":1,\"139\":1}}],[\"提高安全性\",{\"1\":{\"583\":1}}],[\"提高代码的可读性和维护性\",{\"1\":{\"493\":1}}],[\"提高代码的可维护性和扩展性\",{\"1\":{\"484\":1}}],[\"提高\",{\"1\":{\"139\":1}}],[\"提高了系统的效率\",{\"1\":{\"71\":1}}],[\"提高了应用程序的部署速度\",{\"1\":{\"71\":1}}],[\"提高了效率\",{\"1\":{\"60\":1}}],[\"提示\",{\"1\":{\"45\":1,\"73\":1,\"77\":1,\"84\":1,\"101\":1,\"114\":1}}],[\"提示如下信息\",{\"1\":{\"16\":1}}],[\"提交的描述信息\",{\"1\":{\"85\":1}}],[\"提交容器副本\",{\"1\":{\"85\":1}}],[\"提交到仓库区\",{\"1\":{\"39\":1}}],[\"提交暂存区的指定文件到本地仓库\",{\"1\":{\"23\":1}}],[\"提交暂存区中所有文件到本地仓库\",{\"1\":{\"23\":1}}],[\"提交暂存区到本地仓库\",{\"0\":{\"23\":1}}],[\"提交\",{\"1\":{\"18\":1}}],[\"决定要保留的内容\",{\"1\":{\"18\":1}}],[\"主要关注于包级别的访问限制\",{\"1\":{\"397\":1}}],[\"主要包括\",{\"1\":{\"372\":1}}],[\"主要功能\",{\"0\":{\"133\":1}}],[\"主要有以下步骤\",{\"1\":{\"18\":1}}],[\"主要的分支通常是\",{\"1\":{\"9\":1}}],[\"需要加载存放\",{\"1\":{\"602\":1}}],[\"需要我们去填的主要是路径和参数两部分内容\",{\"1\":{\"575\":1}}],[\"需要我们对冲突文件进行操作\",{\"1\":{\"18\":1}}],[\"需要使用第一中方法手动构建\",{\"1\":{\"553\":1}}],[\"需要保存和恢复大量上下文信息\",{\"1\":{\"504\":1}}],[\"需要对齐到\",{\"1\":{\"451\":1}}],[\"需要对其进行查找操作\",{\"1\":{\"423\":1}}],[\"需要在请求中包含有效的\",{\"1\":{\"599\":1}}],[\"需要在\",{\"1\":{\"451\":1}}],[\"需要熟练掌握\",{\"1\":{\"397\":1}}],[\"需要自己配置安装\",{\"1\":{\"378\":1}}],[\"需要配置插件\",{\"1\":{\"378\":1}}],[\"需要借助\",{\"1\":{\"362\":1}}],[\"需要通过实现\",{\"1\":{\"161\":1}}],[\"需要手动清除\",{\"1\":{\"97\":1}}],[\"需要先进行登录\",{\"1\":{\"115\":1}}],[\"需要先将容器先停止运行\",{\"1\":{\"96\":1}}],[\"需要先拉取\",{\"1\":{\"79\":1}}],[\"需要备份\",{\"1\":{\"88\":1}}],[\"需要重点学习\",{\"1\":{\"77\":1}}],[\"需要重启才能够生效\",{\"1\":{\"44\":1}}],[\"需要什么基础\",{\"0\":{\"73\":1}}],[\"需要注意的是\",{\"1\":{\"11\":1,\"411\":1,\"494\":1,\"502\":1}}],[\"把这个两难问题的决定权交给我们\",{\"1\":{\"18\":1}}],[\"分隔\",{\"1\":{\"592\":1}}],[\"分隔符\",{\"1\":{\"575\":1}}],[\"分别是\",{\"1\":{\"592\":1}}],[\"分别在不同的时间向\",{\"1\":{\"524\":1}}],[\"分别用于整数\",{\"1\":{\"238\":1}}],[\"分别用于定义一个字符串类型和整数类型的命令行参数\",{\"1\":{\"231\":1}}],[\"分配不同的数据类型\",{\"1\":{\"453\":1}}],[\"分阶段构建和优化镜像\",{\"1\":{\"68\":1}}],[\"分发和运行应用程序及其依赖项\",{\"1\":{\"71\":1}}],[\"分发\",{\"1\":{\"43\":1}}],[\"分布式\",{\"1\":{\"29\":1}}],[\"分割线之外的内容\",{\"1\":{\"17\":1}}],[\"分支可以避免\",{\"1\":{\"527\":1}}],[\"分支使得通道操作变得非阻塞\",{\"1\":{\"526\":1}}],[\"分支的代码\",{\"1\":{\"418\":1}}],[\"分支的合并并不是简单的文件添加\",{\"1\":{\"15\":1}}],[\"分支在所有\",{\"1\":{\"418\":1}}],[\"分支中指定多个匹配条件\",{\"1\":{\"415\":1}}],[\"分支比较重量级\",{\"1\":{\"29\":1}}],[\"分支修改的内容\",{\"1\":{\"17\":2}}],[\"分支\",{\"1\":{\"14\":3,\"418\":1,\"526\":1}}],[\"分支合并以及比较代码差异时\",{\"1\":{\"29\":1}}],[\"分支合并到\",{\"1\":{\"14\":1}}],[\"分支合并说明\",{\"1\":{\"14\":1}}],[\"分支实际上是指向更改快照的指针\",{\"1\":{\"9\":1}}],[\"分支是指向提交对象\",{\"1\":{\"9\":1}}],[\"分支管理\",{\"0\":{\"9\":1},\"1\":{\"29\":1}}],[\"之间的内存操作是可预测和一致的\",{\"1\":{\"519\":1}}],[\"之间的内容\",{\"1\":{\"17\":1}}],[\"之间通过通道\",{\"1\":{\"494\":1}}],[\"之间共享上下文信息\",{\"1\":{\"485\":1}}],[\"之间传递数据的示例\",{\"1\":{\"475\":1}}],[\"之间传递数据\",{\"1\":{\"465\":1,\"477\":1}}],[\"之间安全传递\",{\"1\":{\"465\":1}}],[\"之间安全地传递数据\",{\"1\":{\"461\":1}}],[\"之间进行通信和同步\",{\"1\":{\"467\":1}}],[\"之间进行通信\",{\"1\":{\"455\":1}}],[\"之间需要\",{\"1\":{\"451\":1}}],[\"之外的条件表达式\",{\"1\":{\"416\":1}}],[\"之前首先需要安装配置好\",{\"1\":{\"374\":1}}],[\"之前\",{\"1\":{\"73\":1,\"509\":3}}],[\"之后每声明一个常量则将\",{\"1\":{\"458\":1}}],[\"之后填充了\",{\"1\":{\"451\":1}}],[\"之后重新启动服务\",{\"1\":{\"44\":1}}],[\"之后的项目名称\",{\"1\":{\"7\":1}}],[\"是无效的\",{\"1\":{\"575\":1}}],[\"是无序的\",{\"1\":{\"419\":1}}],[\"是有效的\",{\"1\":{\"575\":1}}],[\"是记录在\",{\"1\":{\"557\":1}}],[\"是并发编程中用于管理和协调多个线程或协程的基本构建块\",{\"1\":{\"529\":1}}],[\"是与其他函数同时运行的函数\",{\"1\":{\"494\":1}}],[\"是指不包含任何变量或通配符的\",{\"1\":{\"575\":1}}],[\"是指程序的行为依赖于\",{\"1\":{\"466\":1}}],[\"是指在\",{\"1\":{\"43\":1}}],[\"是确保多个\",{\"1\":{\"466\":1}}],[\"是两个重要的概念\",{\"1\":{\"459\":1}}],[\"是两个分支都没有改动的内容\",{\"1\":{\"17\":1}}],[\"是直接访问内存中的数据\",{\"1\":{\"455\":1}}],[\"是引用类型\",{\"1\":{\"421\":1}}],[\"是值拷贝\",{\"1\":{\"396\":1}}],[\"是将\",{\"1\":{\"396\":1}}],[\"是由服务器发送到客户端并存储在客户端的一小段数据\",{\"1\":{\"582\":1}}],[\"是由\",{\"1\":{\"370\":1}}],[\"是合法的\",{\"1\":{\"362\":1}}],[\"是go语言中常用的标准库之一\",{\"1\":{\"243\":1}}],[\"是go语言标准库中提供的双向链表的实现\",{\"1\":{\"162\":1}}],[\"是默认值\",{\"1\":{\"232\":1}}],[\"是命令行参数的名称\",{\"1\":{\"232\":1}}],[\"是非常常用和灵活的数据结构\",{\"1\":{\"159\":1}}],[\"是容器内部端口绑定到指定的主机端口\",{\"1\":{\"118\":1}}],[\"是因为我的电脑是\",{\"1\":{\"118\":1}}],[\"是后续学习的前提\",{\"1\":{\"101\":1}}],[\"是随机的\",{\"1\":{\"98\":1}}],[\"是否在\",{\"1\":{\"423\":1}}],[\"是否会修改原值\",{\"1\":{\"396\":1}}],[\"是否\",{\"1\":{\"82\":1}}],[\"是否是最新的\",{\"1\":{\"21\":1}}],[\"是在操作系统的层面对所使用应用的隔离\",{\"1\":{\"72\":1}}],[\"是一门值得学习和掌握的编程语言\",{\"1\":{\"373\":1}}],[\"是一门静态类型的编程语言\",{\"1\":{\"371\":1}}],[\"是一个关键概念\",{\"1\":{\"511\":1}}],[\"是一个\",{\"1\":{\"451\":1}}],[\"是一个没有任何字段的结构体\",{\"1\":{\"450\":1}}],[\"是一个非常有用的工具\",{\"1\":{\"418\":1}}],[\"是一个非常重要的概念\",{\"1\":{\"379\":1}}],[\"是一个预定义的接口\",{\"1\":{\"400\":1}}],[\"是一个类型参数\",{\"1\":{\"400\":1}}],[\"是一个基本的接口\",{\"1\":{\"263\":1,\"267\":1}}],[\"是一个用于\",{\"1\":{\"128\":1}}],[\"是一个开源的应用容器引擎\",{\"1\":{\"70\":1}}],[\"是一种简单而强大的身份验证和信息交换机制\",{\"1\":{\"596\":1}}],[\"是一种开放标准\",{\"1\":{\"591\":1}}],[\"是一种用于在网络应用之间安全传递声明的开放标准\",{\"1\":{\"590\":1}}],[\"是一种服务器端的状态管理机制\",{\"1\":{\"586\":1}}],[\"是一种无状态协议\",{\"1\":{\"578\":1}}],[\"是一种在客户端和服务器之间跟踪状态的机制\",{\"1\":{\"578\":1}}],[\"是一种组织和管理路由的有效方式\",{\"1\":{\"576\":1}}],[\"是一种数据类型\",{\"1\":{\"467\":1}}],[\"是一种内置的数据结构\",{\"1\":{\"419\":1}}],[\"是一种定义对象行为的方式\",{\"1\":{\"406\":1}}],[\"是一种容器化平台\",{\"1\":{\"58\":1}}],[\"是一种集中式版本控制系统\",{\"1\":{\"29\":2}}],[\"是一种分布式版本控制系统\",{\"1\":{\"29\":2}}],[\"是用于持久化存储数据的一种机制\",{\"1\":{\"104\":1}}],[\"是用于构建\",{\"1\":{\"58\":1}}],[\"是用于定义和运行多容器\",{\"1\":{\"47\":1}}],[\"是本次提交的一些备注信息\",{\"1\":{\"23\":1}}],[\"是\",{\"1\":{\"17\":2,\"27\":1,\"29\":1,\"114\":1,\"118\":1,\"420\":1,\"451\":1,\"458\":2,\"494\":1,\"592\":1}}],[\"现在我们可以创建一个简单的gin项目\",{\"1\":{\"540\":1}}],[\"现在我们查看冲突\",{\"1\":{\"17\":1}}],[\"现在需要将\",{\"1\":{\"14\":1}}],[\"我们学习了如何在\",{\"1\":{\"577\":1}}],[\"我们创建了两个路由组\",{\"1\":{\"576\":1}}],[\"我们创建了一个名为webnet的网络\",{\"1\":{\"51\":1}}],[\"我们将编写一个hello\",{\"1\":{\"540\":1}}],[\"我们定义了\",{\"1\":{\"325\":1}}],[\"我们定义了一个名为db\",{\"1\":{\"52\":1}}],[\"我们对环形链表进行一次轮转操作\",{\"1\":{\"165\":1}}],[\"我们使用c\",{\"1\":{\"560\":1}}],[\"我们使用\",{\"1\":{\"165\":1,\"559\":1}}],[\"我们首先创建了一个包含三个元素的环形链表\",{\"1\":{\"165\":1}}],[\"我们首先创建了一个双向链表\",{\"1\":{\"163\":1}}],[\"我们演示了如何从链表中移除一个元素\",{\"1\":{\"163\":1}}],[\"我们展示了如何从头部和尾部插入元素\",{\"1\":{\"163\":1}}],[\"我们再创建一个容器\",{\"1\":{\"120\":1}}],[\"我们可以设置一个自定义的\",{\"1\":{\"98\":1}}],[\"我们可以使用\",{\"1\":{\"8\":1,\"87\":1}}],[\"我们只需要在其中加上\",{\"1\":{\"96\":1}}],[\"我们知道\",{\"1\":{\"96\":1}}],[\"我们重启这个实例\",{\"1\":{\"92\":1}}],[\"我们看到这里增加了端口的映射\",{\"1\":{\"119\":1}}],[\"我们看到\",{\"1\":{\"92\":1}}],[\"我们看下各个参数的含义\",{\"1\":{\"45\":1}}],[\"我们或多或少的了解和学习了一些\",{\"1\":{\"89\":1}}],[\"我们用社区版就可以了\",{\"1\":{\"70\":1}}],[\"我们还定义了一个卷db\",{\"1\":{\"51\":1}}],[\"我们无意的提交了一些还尚未完成的版本\",{\"1\":{\"24\":1}}],[\"我们现在正处于合并的中间状态\",{\"1\":{\"17\":1}}],[\"pwd\",{\"1\":{\"598\":2}}],[\"plain\",{\"1\":{\"565\":1}}],[\"plaintext\",{\"1\":{\"177\":4,\"180\":2}}],[\"plus\",{\"1\":{\"551\":1,\"552\":1}}],[\"p++\",{\"1\":{\"484\":1}}],[\"p4\",{\"1\":{\"444\":1}}],[\"p3\",{\"1\":{\"444\":3}}],[\"p1\",{\"1\":{\"444\":1}}],[\"ptr\",{\"1\":{\"430\":4,\"435\":3}}],[\"pkg\",{\"1\":{\"384\":1}}],[\"ppid\",{\"1\":{\"319\":3}}],[\"phi\",{\"1\":{\"301\":2}}],[\"p2\",{\"1\":{\"214\":3,\"226\":3,\"444\":1,\"447\":3}}],[\"p256\",{\"1\":{\"184\":1}}],[\"perimeter\",{\"1\":{\"407\":1,\"408\":1}}],[\"permanent\",{\"1\":{\"570\":8}}],[\"perm\",{\"1\":{\"317\":2}}],[\"personarr\",{\"1\":{\"430\":1}}],[\"person><\",{\"1\":{\"229\":1}}],[\"person><person><name>bob<\",{\"1\":{\"229\":1}}],[\"person>`\",{\"1\":{\"220\":1,\"222\":1,\"228\":1}}],[\"person\",{\"1\":{\"200\":7,\"203\":2,\"204\":2,\"206\":2,\"208\":2,\"209\":2,\"211\":3,\"212\":3,\"214\":3,\"217\":3,\"218\":3,\"220\":3,\"222\":3,\"223\":3,\"225\":3,\"226\":4,\"229\":7,\"240\":3,\"323\":3,\"325\":4,\"430\":6,\"444\":11,\"445\":20,\"446\":29,\"447\":3,\"455\":3}}],[\"people>`\",{\"1\":{\"229\":1}}],[\"people\",{\"1\":{\"200\":4,\"229\":4,\"323\":3,\"325\":5}}],[\"pem\",{\"1\":{\"179\":7,\"180\":5,\"184\":7,\"185\":5}}],[\"pq\",{\"1\":{\"161\":24}}],[\"protocol\",{\"1\":{\"572\":1}}],[\"protobuf\",{\"1\":{\"572\":2}}],[\"profile\",{\"1\":{\"544\":1}}],[\"proxies\",{\"1\":{\"540\":1}}],[\"proceeding\",{\"1\":{\"531\":1}}],[\"processed\",{\"1\":{\"543\":1}}],[\"process\",{\"0\":{\"504\":1}}],[\"processing\",{\"1\":{\"481\":1,\"484\":1}}],[\"producing\",{\"1\":{\"484\":1}}],[\"producer\",{\"0\":{\"484\":1},\"1\":{\"484\":3}}],[\"products\",{\"1\":{\"576\":4}}],[\"production\",{\"1\":{\"540\":1}}],[\"product\",{\"1\":{\"425\":1}}],[\"projects\",{\"1\":{\"31\":1}}],[\"prefix\",{\"1\":{\"295\":1}}],[\"primitives\",{\"1\":{\"529\":1}}],[\"primary\",{\"1\":{\"449\":1}}],[\"priorityqueue\",{\"1\":{\"161\":7}}],[\"priority\",{\"1\":{\"161\":7}}],[\"println\",{\"1\":{\"136\":1,\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"151\":1,\"152\":1,\"154\":2,\"155\":2,\"157\":2,\"160\":3,\"162\":5,\"164\":4,\"177\":2,\"179\":5,\"180\":8,\"184\":6,\"185\":8,\"188\":3,\"189\":3,\"191\":2,\"192\":2,\"194\":3,\"196\":3,\"198\":2,\"200\":2,\"203\":2,\"204\":2,\"206\":1,\"208\":1,\"209\":1,\"211\":2,\"212\":1,\"214\":3,\"217\":2,\"218\":2,\"220\":1,\"222\":1,\"223\":1,\"225\":2,\"226\":3,\"228\":1,\"229\":2,\"231\":2,\"233\":1,\"237\":4,\"240\":1,\"241\":1,\"246\":1,\"247\":1,\"249\":3,\"250\":3,\"252\":3,\"254\":1,\"256\":2,\"260\":1,\"264\":1,\"270\":2,\"275\":2,\"278\":2,\"280\":2,\"284\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"301\":7,\"302\":7,\"303\":6,\"304\":4,\"305\":2,\"306\":4,\"308\":2,\"309\":1,\"311\":1,\"312\":3,\"313\":2,\"314\":1,\"315\":2,\"318\":1,\"320\":2,\"322\":1,\"323\":1,\"325\":1,\"327\":2,\"329\":2,\"333\":1,\"335\":1,\"336\":2,\"338\":2,\"339\":3,\"340\":2,\"342\":3,\"344\":2,\"345\":2,\"346\":2,\"348\":2,\"349\":1,\"351\":1,\"352\":2,\"356\":2,\"357\":8,\"362\":13,\"363\":6,\"367\":4,\"383\":2,\"384\":1,\"394\":2,\"395\":1,\"396\":6,\"400\":1,\"401\":2,\"402\":2,\"403\":1,\"404\":2,\"411\":3,\"415\":10,\"416\":3,\"417\":1,\"418\":3,\"421\":2,\"422\":1,\"435\":2,\"445\":6,\"447\":3,\"450\":6,\"458\":4,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"474\":1,\"475\":1,\"476\":2,\"479\":1,\"480\":1,\"482\":1,\"483\":2,\"489\":2,\"490\":2,\"491\":2,\"492\":4,\"501\":1,\"502\":1,\"514\":1,\"515\":2,\"516\":1,\"517\":2,\"518\":1,\"524\":2,\"525\":2,\"526\":2,\"530\":1,\"531\":1,\"533\":2,\"534\":1,\"535\":1,\"598\":1}}],[\"printf\",{\"1\":{\"132\":4,\"136\":1,\"161\":1,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":2,\"180\":2,\"182\":1,\"185\":1,\"198\":1,\"200\":1,\"206\":1,\"208\":1,\"212\":1,\"214\":1,\"220\":1,\"222\":1,\"226\":1,\"228\":1,\"229\":1,\"237\":3,\"238\":2,\"239\":1,\"264\":1,\"265\":1,\"285\":1,\"310\":2,\"319\":1,\"323\":1,\"325\":1,\"327\":2,\"328\":2,\"329\":1,\"410\":1,\"415\":1,\"416\":1,\"417\":3,\"421\":1,\"422\":1,\"423\":2,\"436\":2,\"437\":2,\"446\":2,\"447\":1,\"451\":8,\"479\":2,\"481\":1,\"484\":2,\"492\":1,\"502\":2,\"532\":2,\"534\":1,\"543\":1}}],[\"print\",{\"1\":{\"132\":1,\"237\":4,\"239\":1,\"283\":1,\"309\":1,\"400\":3}}],[\"privatefile\",{\"1\":{\"179\":3,\"184\":3}}],[\"privatekeyfile\",{\"1\":{\"180\":3,\"185\":3}}],[\"privatekeybytes\",{\"1\":{\"179\":2,\"180\":2,\"184\":2,\"185\":2}}],[\"privatekey\",{\"1\":{\"179\":3,\"180\":2,\"184\":3,\"185\":2}}],[\"private\",{\"1\":{\"132\":5,\"179\":2,\"180\":4,\"184\":3,\"185\":4}}],[\"privatebytes\",{\"1\":{\"132\":2}}],[\"prune\",{\"1\":{\"97\":1}}],[\"ps\",{\"1\":{\"84\":1,\"91\":1,\"119\":1}}],[\"pike\",{\"1\":{\"370\":1}}],[\"pid\",{\"1\":{\"319\":3}}],[\"pi\",{\"1\":{\"141\":1,\"301\":2,\"303\":3}}],[\"pipeline\",{\"0\":{\"482\":1}}],[\"pipe\",{\"1\":{\"273\":1}}],[\"pip3\",{\"1\":{\"59\":1}}],[\"pip\",{\"1\":{\"59\":1}}],[\"ping\",{\"1\":{\"56\":2,\"543\":1,\"545\":1,\"598\":1,\"600\":1}}],[\"py\",{\"1\":{\"54\":1,\"59\":1,\"62\":1,\"118\":2,\"120\":1}}],[\"python3\",{\"1\":{\"59\":3,\"62\":1}}],[\"python\",{\"1\":{\"54\":1,\"62\":1,\"66\":1,\"118\":2,\"120\":1}}],[\"p\",{\"1\":{\"54\":1,\"118\":4,\"120\":2,\"203\":2,\"204\":2,\"206\":3,\"208\":3,\"209\":2,\"211\":5,\"212\":6,\"214\":2,\"217\":2,\"218\":2,\"220\":3,\"222\":3,\"223\":2,\"225\":2,\"226\":2,\"229\":2,\"238\":1,\"240\":5,\"263\":1,\"267\":1,\"323\":3,\"325\":3,\"437\":6,\"447\":2,\"455\":4,\"484\":3}}],[\"pong\",{\"1\":{\"543\":1,\"545\":1,\"598\":1}}],[\"pool\",{\"0\":{\"479\":1}}],[\"pointer2\",{\"1\":{\"439\":2}}],[\"pointer1\",{\"1\":{\"439\":4}}],[\"pointer\",{\"1\":{\"433\":1,\"434\":2,\"437\":1,\"438\":2}}],[\"positive\",{\"1\":{\"415\":1}}],[\"postform\",{\"1\":{\"254\":1,\"556\":1}}],[\"postfrom\",{\"1\":{\"254\":1}}],[\"post\",{\"0\":{\"250\":1,\"554\":1},\"1\":{\"250\":3,\"254\":2,\"416\":3,\"554\":1,\"555\":3,\"556\":2,\"559\":1,\"560\":1,\"574\":3,\"575\":1,\"598\":1,\"600\":1}}],[\"postgresql\",{\"1\":{\"51\":1,\"52\":1}}],[\"postgres\",{\"1\":{\"49\":3,\"51\":2,\"52\":2}}],[\"pow\",{\"1\":{\"302\":3}}],[\"pop\",{\"1\":{\"161\":2}}],[\"port变量\",{\"1\":{\"52\":1}}],[\"ports\",{\"1\":{\"49\":2,\"51\":2,\"52\":1}}],[\"port\",{\"1\":{\"31\":1,\"52\":1,\"121\":1,\"313\":1}}],[\"put\",{\"1\":{\"574\":3,\"575\":1}}],[\"public\",{\"1\":{\"179\":3,\"180\":4,\"184\":3,\"185\":4}}],[\"publicfile\",{\"1\":{\"179\":3,\"184\":3}}],[\"publickeyfile\",{\"1\":{\"180\":3,\"185\":3}}],[\"publickeybytes\",{\"1\":{\"179\":2,\"180\":2,\"184\":2,\"185\":2}}],[\"publickey\",{\"1\":{\"179\":3,\"180\":3,\"184\":3,\"185\":3}}],[\"pushfront\",{\"1\":{\"162\":1,\"163\":1}}],[\"pushback\",{\"1\":{\"160\":2,\"162\":3,\"163\":1}}],[\"push\",{\"1\":{\"38\":5,\"39\":1,\"100\":1,\"116\":2,\"161\":2}}],[\"pull\",{\"1\":{\"7\":1,\"37\":4,\"65\":1,\"83\":2,\"85\":1,\"102\":1,\"103\":1,\"118\":1}}],[\"patch\",{\"1\":{\"574\":1}}],[\"path\",{\"1\":{\"64\":2,\"66\":2,\"132\":1,\"256\":1,\"317\":4,\"550\":1,\"566\":1,\"571\":2,\"575\":5}}],[\"paths\",{\"1\":{\"17\":2}}],[\"param\",{\"1\":{\"557\":2,\"575\":5}}],[\"params\",{\"1\":{\"551\":1}}],[\"parsing\",{\"1\":{\"180\":2,\"185\":2,\"329\":1,\"336\":1}}],[\"parseint\",{\"1\":{\"329\":1}}],[\"parseip\",{\"1\":{\"312\":3}}],[\"parsefloat\",{\"1\":{\"327\":2,\"329\":1}}],[\"parseform\",{\"1\":{\"254\":1}}],[\"parsed\",{\"1\":{\"312\":1,\"336\":1}}],[\"parseecprivatekey\",{\"1\":{\"185\":1}}],[\"parsepkcs1privatekey\",{\"1\":{\"180\":1}}],[\"parsepkixpublickey\",{\"1\":{\"180\":1,\"185\":1}}],[\"parseprivatekey\",{\"1\":{\"132\":1}}],[\"parse\",{\"1\":{\"132\":1,\"136\":1,\"141\":1,\"231\":3,\"233\":1,\"336\":1}}],[\"past\",{\"1\":{\"342\":3}}],[\"password2\",{\"1\":{\"598\":1}}],[\"password1\",{\"1\":{\"598\":1}}],[\"password\",{\"1\":{\"131\":2,\"555\":2,\"598\":5}}],[\"panicf\",{\"1\":{\"290\":1}}],[\"panic\",{\"1\":{\"289\":3,\"290\":2,\"474\":1}}],[\"page=1\",{\"1\":{\"549\":1,\"550\":1}}],[\"page\",{\"1\":{\"247\":1,\"260\":1,\"549\":1,\"550\":4,\"575\":6,\"603\":1}}],[\"pair\",{\"1\":{\"179\":1,\"184\":1}}],[\"payloadfunc\",{\"1\":{\"598\":1,\"599\":1}}],[\"payload\",{\"1\":{\"132\":1,\"592\":3,\"593\":1}}],[\"package\",{\"1\":{\"131\":1,\"132\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"157\":1,\"160\":1,\"161\":1,\"162\":1,\"164\":1,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"184\":1,\"185\":1,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":1,\"214\":1,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"246\":1,\"247\":1,\"249\":1,\"250\":1,\"252\":1,\"254\":1,\"256\":1,\"258\":1,\"260\":1,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"275\":1,\"276\":1,\"278\":1,\"280\":1,\"283\":1,\"284\":1,\"285\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"299\":1,\"301\":1,\"302\":5,\"303\":2,\"304\":2,\"305\":1,\"306\":2,\"317\":1,\"325\":1,\"327\":2,\"328\":2,\"329\":2,\"333\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"342\":1,\"344\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"351\":1,\"352\":1,\"367\":1,\"416\":4,\"418\":1,\"422\":1,\"423\":1,\"447\":1,\"450\":4,\"451\":2,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"475\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"483\":1,\"484\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":2,\"501\":1,\"502\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"524\":1,\"525\":1,\"526\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"584\":1,\"588\":1,\"590\":1,\"598\":1,\"602\":1,\"603\":1}}],[\"pacman\",{\"1\":{\"32\":1}}],[\"hs256\",{\"1\":{\"592\":1}}],[\"h1>\",{\"1\":{\"564\":1,\"604\":1}}],[\"h>\",{\"1\":{\"437\":1}}],[\"h\",{\"1\":{\"234\":1,\"540\":1,\"543\":1,\"544\":3,\"545\":1,\"550\":1,\"551\":3,\"553\":3,\"555\":1,\"556\":1,\"557\":1,\"559\":2,\"560\":1,\"562\":1,\"563\":1,\"564\":1,\"567\":1,\"574\":4,\"575\":1,\"576\":4,\"590\":3,\"598\":2,\"603\":1,\"605\":1,\"606\":2}}],[\"hmac\",{\"1\":{\"182\":4,\"592\":1}}],[\"hours\",{\"1\":{\"338\":1,\"339\":1}}],[\"hour\",{\"1\":{\"338\":1,\"339\":1,\"342\":2,\"598\":2}}],[\"hostname\",{\"1\":{\"320\":5}}],[\"hostkeycallback\",{\"1\":{\"131\":1}}],[\"home\",{\"1\":{\"318\":2,\"603\":1}}],[\"homebrew安装\",{\"1\":{\"31\":1}}],[\"hodgkin\",{\"1\":{\"122\":1,\"123\":1,\"124\":2}}],[\"hub查找\",{\"1\":{\"82\":1}}],[\"hub\",{\"1\":{\"44\":1,\"45\":1,\"71\":1,\"78\":1,\"80\":1,\"82\":2,\"100\":3,\"114\":2,\"115\":1,\"116\":1}}],[\"httponly\",{\"1\":{\"583\":1}}],[\"http\",{\"0\":{\"244\":1,\"245\":1,\"246\":1,\"248\":1,\"251\":1,\"579\":1},\"1\":{\"44\":1,\"139\":5,\"244\":3,\"246\":9,\"247\":9,\"249\":4,\"250\":4,\"252\":7,\"254\":8,\"256\":11,\"258\":6,\"260\":10,\"309\":1,\"314\":1,\"540\":1,\"544\":2,\"549\":1,\"550\":1,\"551\":4,\"552\":3,\"553\":8,\"555\":2,\"556\":2,\"557\":2,\"561\":1,\"562\":2,\"563\":2,\"564\":2,\"565\":2,\"567\":2,\"568\":1,\"569\":7,\"570\":6,\"571\":4,\"572\":1,\"574\":5,\"575\":8,\"578\":2,\"584\":4,\"588\":3,\"590\":2,\"593\":1,\"598\":2,\"603\":2}}],[\"https\",{\"1\":{\"29\":1,\"31\":1,\"33\":2,\"44\":6,\"48\":1,\"62\":2,\"66\":1,\"75\":3,\"82\":1,\"375\":2,\"377\":1,\"378\":1,\"457\":1,\"583\":1}}],[\"html>\",{\"1\":{\"254\":2,\"564\":2,\"604\":2}}],[\"html\",{\"0\":{\"564\":1,\"604\":1},\"1\":{\"44\":1,\"254\":2,\"258\":1,\"561\":1,\"564\":7,\"572\":3,\"601\":3,\"602\":5,\"603\":6,\"604\":1,\"605\":1,\"606\":2}}],[\"happens\",{\"0\":{\"511\":1},\"1\":{\"511\":2,\"518\":4,\"519\":1}}],[\"hasher\",{\"1\":{\"169\":4,\"172\":4,\"175\":4}}],[\"hash\",{\"1\":{\"168\":2,\"171\":2,\"174\":2,\"185\":3}}],[\"handle\",{\"1\":{\"258\":1}}],[\"handlers\",{\"1\":{\"540\":1}}],[\"handlerfunc\",{\"1\":{\"256\":1,\"543\":2,\"544\":1}}],[\"handler\",{\"1\":{\"246\":2,\"256\":2}}],[\"handlefunc\",{\"1\":{\"139\":1,\"246\":2,\"247\":2,\"254\":1,\"256\":1,\"260\":1}}],[\"handlecontext\",{\"1\":{\"571\":2}}],[\"handleconnection\",{\"1\":{\"309\":2}}],[\"handleconn\",{\"1\":{\"132\":2}}],[\"handlechannel\",{\"1\":{\"132\":2}}],[\"handshake\",{\"1\":{\"132\":1}}],[\"hardwareaddr\",{\"1\":{\"311\":1}}],[\"hard\",{\"1\":{\"24\":4}}],[\"have\",{\"1\":{\"17\":1}}],[\"height\",{\"1\":{\"388\":2,\"396\":2,\"408\":3,\"409\":1,\"411\":4,\"421\":1}}],[\"heapsort\",{\"1\":{\"321\":1}}],[\"heap\",{\"0\":{\"161\":1},\"1\":{\"137\":1,\"161\":7}}],[\"header\",{\"1\":{\"567\":5,\"592\":2,\"593\":2,\"598\":1}}],[\"head>\",{\"1\":{\"564\":1,\"604\":1}}],[\"head~1\",{\"1\":{\"24\":1}}],[\"head~0\",{\"1\":{\"24\":1}}],[\"head^3\",{\"1\":{\"24\":1}}],[\"head^2\",{\"1\":{\"24\":1}}],[\"head^^^\",{\"1\":{\"24\":1}}],[\"head^^\",{\"1\":{\"24\":1}}],[\"head^\",{\"1\":{\"24\":1}}],[\"head和=======之间的内容\",{\"1\":{\"17\":1}}],[\"head\",{\"1\":{\"17\":1,\"24\":6,\"37\":1}}],[\"help\",{\"1\":{\"44\":1}}],[\"hellohandler\",{\"1\":{\"247\":2,\"256\":2}}],[\"hello\",{\"0\":{\"102\":1},\"1\":{\"16\":3,\"17\":1,\"45\":3,\"84\":3,\"102\":4,\"103\":2,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"157\":1,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"180\":1,\"182\":1,\"185\":1,\"237\":4,\"239\":1,\"246\":1,\"247\":1,\"256\":1,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"275\":1,\"276\":1,\"278\":2,\"280\":2,\"310\":1,\"329\":2,\"362\":1,\"394\":2,\"410\":1,\"415\":1,\"417\":1,\"540\":8,\"541\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"575\":3}}],[\"冲突解决\",{\"0\":{\"18\":1}}],[\"冲突查看\",{\"0\":{\"17\":1}}],[\"冲突发生\",{\"0\":{\"16\":1}}],[\"而访问http\",{\"1\":{\"575\":1,\"576\":1}}],[\"而导致资源的过度消耗\",{\"1\":{\"479\":1}}],[\"而无需客户端感知到重定向\",{\"1\":{\"571\":1}}],[\"而无需等待接收方接收\",{\"1\":{\"468\":1}}],[\"而无需针对每种类型编写特定的实现\",{\"1\":{\"405\":1}}],[\"而是仅在程序中返回错误信息\",{\"1\":{\"553\":1}}],[\"而是代指默认值\",{\"1\":{\"456\":1}}],[\"而是基于现有数组创建一个切片视图\",{\"1\":{\"357\":1}}],[\"而数组和结构体的操作是对其内存块中实际存储的数据进行操作\",{\"1\":{\"455\":1}}],[\"而函数没有\",{\"1\":{\"396\":1}}],[\"而容量是最大长度\",{\"1\":{\"361\":1}}],[\"而使用\",{\"1\":{\"361\":1}}],[\"而且可能造成极其危险的后果\",{\"1\":{\"456\":1}}],[\"而且可能会有频繁的插入和删除操作\",{\"1\":{\"359\":1}}],[\"而且还可以上传自己的镜像\",{\"1\":{\"114\":1}}],[\"而切片是不定长的\",{\"1\":{\"353\":1}}],[\"而所需要的平台是请求的映像的平台\",{\"1\":{\"118\":1}}],[\"而不是通过\",{\"1\":{\"579\":1}}],[\"而不是操作系统\",{\"1\":{\"496\":1,\"506\":1}}],[\"而不是地址\",{\"1\":{\"455\":2}}],[\"而不关心具体实现\",{\"1\":{\"406\":1}}],[\"而不需要传递实际数据\",{\"1\":{\"450\":1}}],[\"而不需要重复代码\",{\"1\":{\"401\":1}}],[\"而不需要为每种类型编写单独的代码\",{\"1\":{\"398\":1}}],[\"而不受环境差异的影响\",{\"1\":{\"71\":1}}],[\"而不会被应用到切换后的目标分支\",{\"1\":{\"11\":1}}],[\"而db和api服务则连接到back\",{\"1\":{\"52\":1}}],[\"而递增版本号则简化了版本控制过程\",{\"1\":{\"29\":1}}],[\"而在\",{\"1\":{\"29\":2}}],[\"而\",{\"1\":{\"29\":4,\"72\":2,\"553\":1}}],[\"而保留工作区\",{\"1\":{\"25\":1}}],[\"而合并中间态是尽可能的进行合并\",{\"1\":{\"16\":1}}],[\"文件上传\",{\"0\":{\"558\":1}}],[\"文件描述符和其他资源\",{\"1\":{\"504\":1}}],[\"文件系统\",{\"1\":{\"371\":1}}],[\"文件操作\",{\"1\":{\"317\":1}}],[\"文件和目录操作\",{\"0\":{\"317\":1}}],[\"文件来测试表单提交\",{\"1\":{\"254\":1}}],[\"文件进行读写的功能\",{\"1\":{\"186\":1}}],[\"文件中\",{\"1\":{\"112\":1}}],[\"文件中的每条指令都会创建一个新的镜像层\",{\"1\":{\"60\":1}}],[\"文件示例\",{\"1\":{\"51\":1}}],[\"文件\",{\"0\":{\"187\":1,\"190\":1,\"566\":1},\"1\":{\"49\":1,\"189\":1,\"258\":1,\"602\":1,\"604\":1}}],[\"文件时发生了冲突\",{\"1\":{\"16\":1}}],[\"文件夹\",{\"1\":{\"8\":1,\"258\":1}}],[\"typ\",{\"1\":{\"592\":1}}],[\"type=\",{\"1\":{\"254\":3}}],[\"type=image\",{\"1\":{\"82\":1}}],[\"type\",{\"1\":{\"132\":2,\"161\":2,\"179\":2,\"184\":2,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":1,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":2,\"229\":2,\"240\":1,\"263\":1,\"267\":1,\"323\":2,\"325\":2,\"362\":3,\"363\":1,\"380\":1,\"396\":3,\"401\":1,\"402\":1,\"404\":1,\"407\":2,\"408\":1,\"412\":3,\"415\":2,\"430\":1,\"443\":3,\"444\":1,\"446\":2,\"447\":1,\"449\":1,\"450\":3,\"451\":3,\"455\":2,\"456\":4,\"553\":2,\"555\":1,\"556\":1,\"598\":1}}],[\"title>\",{\"1\":{\"564\":1,\"604\":1}}],[\"title\",{\"1\":{\"564\":3,\"603\":1,\"604\":2}}],[\"tick\",{\"1\":{\"346\":1}}],[\"ticker\",{\"1\":{\"346\":4}}],[\"timefunc\",{\"1\":{\"598\":1}}],[\"timed\",{\"1\":{\"490\":1,\"492\":1}}],[\"timestamp\",{\"1\":{\"348\":2,\"349\":3}}],[\"timer\",{\"1\":{\"345\":4}}],[\"timeout\",{\"1\":{\"252\":1,\"314\":1,\"315\":2,\"525\":1,\"598\":1,\"599\":1}}],[\"time\",{\"0\":{\"331\":1},\"1\":{\"141\":3,\"252\":2,\"294\":1,\"306\":4,\"314\":1,\"331\":2,\"333\":3,\"335\":3,\"336\":4,\"338\":4,\"339\":4,\"340\":3,\"342\":4,\"344\":3,\"345\":3,\"346\":5,\"348\":2,\"349\":3,\"351\":4,\"352\":5,\"418\":6,\"450\":3,\"475\":3,\"476\":4,\"479\":3,\"480\":3,\"481\":3,\"482\":1,\"483\":5,\"484\":5,\"489\":7,\"490\":6,\"491\":7,\"492\":6,\"501\":3,\"502\":2,\"522\":2,\"524\":5,\"525\":5,\"532\":5,\"543\":3,\"592\":1,\"598\":4}}],[\"two\",{\"1\":{\"338\":1,\"339\":1,\"403\":2}}],[\"tmp\",{\"1\":{\"320\":1,\"436\":2}}],[\"thread\",{\"0\":{\"505\":1}}],[\"three\",{\"1\":{\"403\":2}}],[\"third\",{\"1\":{\"437\":1}}],[\"this\",{\"1\":{\"247\":1,\"283\":1,\"284\":1,\"287\":1,\"289\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"299\":1,\"447\":1,\"540\":1,\"569\":1,\"570\":1,\"571\":1}}],[\"thompson\",{\"1\":{\"370\":1}}],[\"the\",{\"1\":{\"16\":1,\"247\":1,\"421\":1,\"450\":1,\"540\":1,\"550\":5,\"551\":5,\"552\":1,\"569\":1,\"570\":1,\"571\":1}}],[\"then\",{\"1\":{\"16\":1}}],[\"tsv\",{\"1\":{\"194\":1}}],[\"template\",{\"1\":{\"606\":1}}],[\"templates\",{\"1\":{\"564\":1,\"602\":3,\"603\":1,\"604\":1}}],[\"teereader\",{\"1\":{\"280\":3}}],[\"text\",{\"1\":{\"154\":1,\"155\":1,\"254\":2,\"565\":1}}],[\"test\",{\"1\":{\"17\":1,\"55\":1,\"56\":6,\"317\":3,\"598\":1}}],[\"trustedproxies\",{\"1\":{\"540\":1}}],[\"trusted\",{\"1\":{\"540\":1}}],[\"true\",{\"1\":{\"132\":2,\"410\":1,\"414\":4,\"415\":1,\"422\":1,\"423\":1,\"426\":2,\"427\":2,\"517\":1,\"531\":1,\"533\":1,\"550\":3,\"584\":1,\"592\":1}}],[\"transport\",{\"1\":{\"252\":3}}],[\"training\",{\"1\":{\"54\":1,\"118\":3,\"120\":1}}],[\"tcp\",{\"0\":{\"309\":1},\"1\":{\"119\":1,\"120\":3,\"131\":1,\"132\":1,\"139\":1,\"309\":3,\"313\":1,\"314\":1,\"315\":1}}],[\"task\",{\"1\":{\"492\":1}}],[\"taskid\",{\"1\":{\"492\":4}}],[\"tan\",{\"1\":{\"303\":3}}],[\"tail=100\",{\"1\":{\"99\":1}}],[\"tail\",{\"1\":{\"99\":1}}],[\"tag\",{\"1\":{\"65\":1,\"81\":2,\"87\":4,\"116\":1}}],[\"target\",{\"1\":{\"65\":1,\"313\":1,\"571\":5}}],[\"tar\",{\"1\":{\"62\":1,\"88\":4,\"95\":4}}],[\"t\",{\"1\":{\"65\":1,\"66\":6,\"85\":2,\"90\":2,\"94\":2,\"99\":5,\"194\":1,\"228\":1,\"238\":2,\"336\":2,\"346\":2,\"349\":2,\"351\":2,\"352\":2,\"400\":3,\"401\":6,\"402\":3,\"404\":4,\"410\":1,\"415\":1,\"455\":5}}],[\"total\",{\"1\":{\"389\":5}}],[\"too\",{\"1\":{\"356\":1}}],[\"toolbox\",{\"1\":{\"48\":2}}],[\"to4\",{\"1\":{\"312\":1}}],[\"tokenheadname\",{\"1\":{\"598\":1}}],[\"tokenlookup\",{\"1\":{\"598\":1}}],[\"token\",{\"1\":{\"228\":3,\"229\":3,\"544\":3,\"580\":2,\"590\":1,\"591\":1,\"592\":2,\"593\":1,\"598\":1,\"599\":3,\"600\":2}}],[\"todo\",{\"1\":{\"73\":1,\"487\":1}}],[\"torvalds\",{\"1\":{\"29\":1}}],[\"to\",{\"1\":{\"17\":1,\"66\":2,\"131\":3,\"132\":6,\"146\":1,\"147\":1,\"148\":1,\"154\":1,\"155\":1,\"157\":1,\"179\":1,\"184\":1,\"297\":1,\"317\":2,\"342\":1,\"384\":1,\"540\":3,\"566\":1,\"604\":1}}],[\"txt\",{\"1\":{\"16\":3,\"17\":2,\"59\":1,\"99\":1,\"276\":1,\"317\":3,\"566\":1}}],[\"fn\",{\"1\":{\"393\":2}}],[\"fs\",{\"1\":{\"258\":2,\"572\":1}}],[\"fprintln\",{\"1\":{\"242\":1}}],[\"fprint\",{\"1\":{\"242\":1}}],[\"fprintf\",{\"1\":{\"234\":5,\"242\":1,\"246\":1,\"247\":2,\"254\":1,\"256\":1,\"260\":1,\"309\":1,\"314\":1}}],[\"further\",{\"1\":{\"550\":1}}],[\"future\",{\"1\":{\"342\":3}}],[\"fullname\",{\"1\":{\"225\":2}}],[\"func1\",{\"1\":{\"540\":1}}],[\"func\",{\"1\":{\"131\":1,\"132\":3,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"157\":1,\"160\":1,\"161\":6,\"162\":1,\"164\":3,\"165\":1,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"184\":1,\"185\":1,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":2,\"212\":2,\"214\":1,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"234\":1,\"240\":2,\"241\":2,\"246\":2,\"247\":3,\"249\":1,\"250\":1,\"252\":1,\"254\":2,\"256\":4,\"258\":1,\"260\":2,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":2,\"275\":1,\"276\":1,\"278\":1,\"280\":1,\"283\":1,\"284\":1,\"285\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"299\":1,\"301\":1,\"302\":5,\"303\":2,\"304\":2,\"305\":1,\"306\":2,\"309\":1,\"317\":8,\"318\":3,\"319\":3,\"320\":3,\"322\":1,\"323\":4,\"325\":4,\"327\":2,\"328\":2,\"329\":2,\"333\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"342\":1,\"344\":1,\"345\":1,\"346\":2,\"348\":1,\"349\":1,\"351\":1,\"352\":1,\"362\":1,\"363\":3,\"367\":3,\"381\":1,\"382\":1,\"384\":2,\"387\":2,\"388\":3,\"389\":1,\"390\":1,\"391\":3,\"392\":1,\"393\":5,\"394\":1,\"395\":1,\"396\":6,\"399\":2,\"400\":1,\"401\":2,\"402\":1,\"403\":1,\"404\":1,\"408\":2,\"410\":1,\"416\":4,\"417\":1,\"418\":3,\"422\":2,\"423\":1,\"436\":2,\"444\":1,\"446\":6,\"447\":1,\"450\":6,\"451\":2,\"455\":2,\"462\":2,\"463\":2,\"464\":2,\"465\":3,\"472\":1,\"475\":2,\"476\":3,\"479\":2,\"480\":5,\"481\":2,\"482\":7,\"483\":3,\"484\":3,\"488\":2,\"489\":2,\"490\":2,\"491\":2,\"492\":4,\"501\":2,\"502\":2,\"514\":3,\"515\":5,\"516\":3,\"517\":2,\"518\":3,\"524\":3,\"525\":2,\"526\":1,\"530\":3,\"531\":4,\"532\":2,\"533\":2,\"534\":2,\"535\":2,\"540\":2,\"543\":4,\"544\":5,\"545\":2,\"550\":4,\"551\":4,\"552\":4,\"553\":3,\"555\":1,\"556\":1,\"557\":1,\"559\":1,\"560\":1,\"562\":2,\"563\":2,\"564\":2,\"565\":2,\"566\":2,\"567\":2,\"569\":3,\"570\":3,\"571\":3,\"574\":4,\"575\":6,\"576\":5,\"584\":3,\"588\":3,\"590\":3,\"598\":5,\"602\":1,\"603\":2}}],[\"floats\",{\"1\":{\"404\":2}}],[\"float\",{\"1\":{\"327\":2}}],[\"float64s\",{\"1\":{\"322\":1}}],[\"float64\",{\"1\":{\"306\":2,\"404\":2,\"407\":2,\"408\":3,\"423\":2,\"454\":1}}],[\"float32\",{\"1\":{\"306\":2,\"399\":3,\"404\":1,\"454\":1}}],[\"floor\",{\"1\":{\"302\":3}}],[\"flush\",{\"1\":{\"150\":1,\"151\":1,\"152\":1,\"157\":1,\"191\":1,\"192\":1,\"271\":1}}],[\"flag\",{\"0\":{\"230\":1},\"1\":{\"136\":3,\"230\":2,\"231\":8,\"232\":4,\"233\":6,\"234\":2,\"235\":1}}],[\"fmt\",{\"0\":{\"236\":1},\"1\":{\"136\":3,\"145\":3,\"146\":3,\"147\":3,\"148\":3,\"151\":1,\"152\":1,\"154\":3,\"155\":3,\"157\":3,\"160\":4,\"161\":2,\"162\":6,\"164\":6,\"168\":2,\"169\":2,\"171\":2,\"172\":2,\"174\":2,\"175\":2,\"177\":5,\"179\":6,\"180\":11,\"182\":2,\"184\":7,\"185\":10,\"188\":4,\"189\":4,\"191\":2,\"192\":2,\"194\":4,\"196\":4,\"198\":4,\"200\":4,\"203\":3,\"204\":3,\"206\":3,\"208\":3,\"209\":2,\"211\":3,\"212\":3,\"214\":5,\"217\":3,\"218\":3,\"220\":3,\"222\":3,\"223\":2,\"225\":3,\"226\":5,\"228\":3,\"229\":4,\"231\":3,\"233\":2,\"234\":5,\"236\":2,\"237\":11,\"238\":1,\"239\":4,\"240\":2,\"241\":4,\"242\":4,\"243\":1,\"246\":3,\"247\":4,\"249\":4,\"250\":4,\"252\":4,\"254\":3,\"256\":4,\"260\":3,\"264\":3,\"265\":1,\"270\":3,\"275\":3,\"278\":3,\"280\":3,\"301\":8,\"302\":12,\"303\":8,\"304\":6,\"305\":3,\"306\":6,\"308\":2,\"309\":3,\"310\":2,\"311\":1,\"312\":3,\"313\":2,\"314\":2,\"315\":2,\"318\":1,\"319\":1,\"320\":2,\"322\":1,\"323\":2,\"325\":3,\"327\":6,\"328\":4,\"329\":5,\"333\":2,\"335\":2,\"336\":3,\"338\":3,\"339\":4,\"340\":3,\"342\":4,\"344\":3,\"345\":3,\"346\":3,\"348\":3,\"349\":2,\"351\":2,\"352\":3,\"356\":2,\"357\":8,\"362\":13,\"363\":6,\"367\":5,\"383\":2,\"384\":1,\"394\":2,\"395\":2,\"396\":6,\"400\":1,\"401\":2,\"402\":2,\"403\":1,\"404\":2,\"410\":1,\"411\":3,\"415\":11,\"416\":8,\"417\":4,\"418\":4,\"421\":3,\"422\":3,\"423\":3,\"435\":2,\"436\":2,\"445\":6,\"446\":2,\"447\":5,\"450\":10,\"451\":10,\"458\":4,\"462\":2,\"463\":2,\"464\":2,\"465\":2,\"474\":1,\"475\":2,\"476\":2,\"479\":4,\"480\":2,\"481\":2,\"482\":2,\"483\":4,\"484\":3,\"489\":3,\"490\":3,\"491\":3,\"492\":7,\"501\":2,\"502\":4,\"514\":2,\"515\":3,\"516\":2,\"517\":3,\"518\":2,\"524\":3,\"525\":3,\"526\":3,\"530\":2,\"531\":2,\"532\":3,\"533\":3,\"534\":3,\"535\":2,\"543\":2,\"560\":1,\"598\":2}}],[\"fanin\",{\"1\":{\"480\":3}}],[\"fan\",{\"0\":{\"480\":1,\"481\":1}}],[\"factorial\",{\"1\":{\"392\":3}}],[\"factor\",{\"1\":{\"391\":2}}],[\"fatal\",{\"1\":{\"265\":1,\"268\":1,\"271\":1,\"273\":2,\"276\":2,\"287\":2,\"288\":1,\"292\":1,\"297\":1,\"308\":2,\"309\":3,\"310\":8,\"311\":1,\"312\":1,\"313\":2,\"314\":1,\"317\":6,\"318\":1,\"320\":3}}],[\"fatalf\",{\"1\":{\"131\":3,\"132\":3,\"288\":1}}],[\"false\",{\"1\":{\"132\":1,\"414\":2,\"416\":1,\"423\":2,\"426\":2,\"427\":3,\"531\":1,\"550\":3,\"584\":1}}],[\"failed\",{\"1\":{\"16\":1,\"131\":3,\"132\":5,\"384\":1,\"411\":1}}],[\"from\",{\"1\":{\"59\":2,\"62\":2,\"67\":1,\"68\":1,\"132\":1,\"254\":1,\"310\":2,\"349\":1,\"418\":3,\"492\":1}}],[\"front\",{\"1\":{\"52\":3,\"160\":8,\"162\":3,\"163\":1}}],[\"found\",{\"1\":{\"260\":1,\"492\":1,\"584\":1,\"588\":1,\"590\":1,\"607\":1}}],[\"foo\",{\"1\":{\"161\":2}}],[\"focused\",{\"1\":{\"54\":2,\"121\":2}}],[\"formfile\",{\"1\":{\"558\":1,\"559\":2}}],[\"formdata\",{\"1\":{\"556\":5}}],[\"format\",{\"1\":{\"335\":1,\"572\":1}}],[\"formatted\",{\"1\":{\"335\":3}}],[\"formatfloat\",{\"1\":{\"328\":2}}],[\"formatint\",{\"1\":{\"137\":1}}],[\"form>\",{\"1\":{\"254\":1}}],[\"form\",{\"1\":{\"254\":4,\"556\":1,\"560\":2}}],[\"formhandler\",{\"1\":{\"254\":2}}],[\"forward\",{\"1\":{\"162\":1}}],[\"force\",{\"1\":{\"38\":2,\"65\":1,\"96\":1}}],[\"for\",{\"0\":{\"416\":1},\"1\":{\"25\":1,\"75\":3,\"132\":4,\"154\":1,\"155\":1,\"160\":1,\"161\":2,\"162\":2,\"163\":1,\"164\":1,\"165\":2,\"188\":1,\"189\":1,\"191\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":2,\"228\":1,\"229\":2,\"308\":2,\"309\":2,\"310\":1,\"311\":1,\"313\":1,\"323\":1,\"325\":1,\"344\":1,\"345\":1,\"346\":1,\"389\":1,\"400\":1,\"403\":1,\"404\":1,\"416\":17,\"417\":4,\"418\":1,\"421\":1,\"437\":1,\"450\":1,\"462\":2,\"463\":2,\"464\":2,\"465\":3,\"475\":2,\"476\":1,\"479\":4,\"480\":4,\"481\":3,\"482\":4,\"483\":2,\"484\":4,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"501\":2,\"502\":1,\"514\":1,\"515\":2,\"516\":1,\"524\":1,\"530\":1,\"531\":1,\"532\":1,\"534\":1,\"535\":1,\"550\":3,\"551\":3,\"552\":3,\"560\":1}}],[\"fetch\",{\"1\":{\"36\":1,\"37\":2}}],[\"f\",{\"1\":{\"25\":2,\"26\":2,\"65\":1,\"66\":2,\"96\":2,\"99\":3,\"124\":2,\"238\":1,\"327\":1,\"328\":1}}],[\"final\",{\"1\":{\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"514\":1,\"515\":1,\"516\":1,\"530\":1,\"535\":1}}],[\"finished\",{\"1\":{\"450\":1,\"479\":1}}],[\"fieldname\",{\"1\":{\"445\":1}}],[\"first\",{\"1\":{\"22\":1}}],[\"filefromfs\",{\"1\":{\"572\":2}}],[\"fileattachment\",{\"1\":{\"572\":2}}],[\"filepath\",{\"1\":{\"572\":3}}],[\"filename\",{\"1\":{\"559\":3,\"560\":1,\"572\":1}}],[\"filemode\",{\"1\":{\"317\":2}}],[\"filesystem\",{\"1\":{\"572\":1}}],[\"fileserver\",{\"1\":{\"258\":2}}],[\"files\",{\"1\":{\"179\":1,\"184\":1,\"560\":5}}],[\"file\",{\"1\":{\"22\":4,\"26\":2,\"60\":1,\"62\":2,\"65\":1,\"66\":1,\"179\":2,\"180\":4,\"184\":2,\"185\":4,\"188\":4,\"189\":4,\"191\":4,\"192\":4,\"194\":4,\"196\":4,\"198\":4,\"200\":4,\"276\":3,\"292\":2,\"294\":1,\"297\":3,\"317\":6,\"381\":1,\"559\":8,\"560\":3,\"566\":4,\"572\":2}}],[\"file2\",{\"1\":{\"20\":1,\"23\":1}}],[\"file1\",{\"1\":{\"20\":1,\"23\":1}}],[\"fixedzone\",{\"1\":{\"351\":1}}],[\"fix\",{\"1\":{\"16\":1}}],[\"也支持\",{\"1\":{\"580\":1}}],[\"也称为微线程或纤程\",{\"1\":{\"506\":1}}],[\"也自动结束\",{\"1\":{\"494\":1}}],[\"也无法与其他类型转换\",{\"1\":{\"454\":1}}],[\"也无法直接参与数值运算\",{\"1\":{\"454\":1}}],[\"也可将\",{\"1\":{\"458\":1}}],[\"也可使用字面量进行初始化\",{\"1\":{\"420\":1}}],[\"也可以作为参数进行传递\",{\"1\":{\"385\":1}}],[\"也可以配置我们自己下载的\",{\"1\":{\"378\":1}}],[\"也可以指定为\",{\"1\":{\"120\":1}}],[\"也可以更改为自己的想使用的仓库\",{\"1\":{\"100\":1}}],[\"也可以实现虚拟化\",{\"1\":{\"70\":1}}],[\"也可以是网络端口映射\",{\"1\":{\"120\":1}}],[\"也可以是远程的服务器\",{\"1\":{\"43\":1}}],[\"也可以是基于图形化界面的\",{\"1\":{\"43\":1}}],[\"也可以使用结构体类型\",{\"1\":{\"443\":1}}],[\"也可以使用\",{\"1\":{\"17\":1,\"54\":1,\"87\":1}}],[\"也可以选择在合并之后直接删除被并入的分支\",{\"1\":{\"14\":1}}],[\"也可以在已有内容的目录下初始化\",{\"1\":{\"8\":1}}],[\"也必须熟练掌握\",{\"1\":{\"418\":1}}],[\"也对每一个类型都写一个求和函数吗\",{\"1\":{\"399\":1}}],[\"也是将指针的内容复制一份传递\",{\"1\":{\"396\":1}}],[\"也是在使用过程中最常使用到的\",{\"1\":{\"77\":1}}],[\"也就是将原来的值复制一份传递\",{\"1\":{\"396\":1}}],[\"也会立即终止\",{\"1\":{\"502\":1}}],[\"也会有地址\",{\"1\":{\"439\":1}}],[\"也会造成原值的变化\",{\"1\":{\"396\":1}}],[\"也会反应在原切片上\",{\"1\":{\"363\":1}}],[\"也会合并修改\",{\"1\":{\"15\":1}}],[\"也方便在多个容器之间共享文件或目录\",{\"1\":{\"104\":1}}],[\"也更适合不同的环境\",{\"1\":{\"52\":1}}],[\"也容易出问题\",{\"1\":{\"46\":1}}],[\"于是就发生了冲突\",{\"1\":{\"15\":1}}],[\"并传递一个\",{\"1\":{\"605\":1}}],[\"并传递数据\",{\"1\":{\"603\":1}}],[\"并返回给客户端\",{\"1\":{\"593\":1}}],[\"并返回包含分隔符的字节切片\",{\"1\":{\"147\":1}}],[\"并返回包含分隔符的字符串\",{\"1\":{\"146\":1}}],[\"并通过\",{\"1\":{\"590\":1}}],[\"并通知等待的\",{\"1\":{\"531\":1}}],[\"并可以通过\",{\"1\":{\"575\":1}}],[\"并指定文件名\",{\"1\":{\"572\":1}}],[\"并遍历保存\",{\"1\":{\"560\":1}}],[\"并创建了一个简单的\",{\"1\":{\"541\":1}}],[\"并行计算等\",{\"1\":{\"505\":1}}],[\"并使用\",{\"1\":{\"447\":1,\"559\":1}}],[\"并打印出第一个准备好的消息\",{\"1\":{\"418\":1}}],[\"并根据需要进行检索和更新\",{\"1\":{\"579\":1}}],[\"并根据\",{\"1\":{\"415\":1}}],[\"并没有达到成倍的效果\",{\"1\":{\"396\":1}}],[\"并发执行\",{\"1\":{\"505\":1}}],[\"并发模式是指在并发编程中常用的设计模式和方法\",{\"1\":{\"478\":1}}],[\"并发模式\",{\"0\":{\"478\":1}}],[\"并发访问共享资源时程序的正确性和一致性\",{\"1\":{\"466\":1}}],[\"并发访问和修改\",{\"1\":{\"462\":1}}],[\"并发访问和修改共享资源时\",{\"1\":{\"462\":1}}],[\"并发写入共享变量而没有适当同步时\",{\"1\":{\"462\":1}}],[\"并发安全性\",{\"1\":{\"468\":1}}],[\"并发安全指的是程序在并发环境中运行时\",{\"1\":{\"460\":1}}],[\"并发安全和竞态条件\",{\"0\":{\"459\":1}}],[\"并发安全\",{\"0\":{\"422\":1,\"460\":1},\"1\":{\"459\":1,\"466\":1}}],[\"并发性\",{\"1\":{\"371\":1}}],[\"并发编程\",{\"0\":{\"138\":1,\"520\":1}}],[\"并添加换行符\",{\"1\":{\"284\":1}}],[\"并放入一些静态文件\",{\"1\":{\"258\":1}}],[\"并能够处理简单的输入操作和错误信息的格式化输出\",{\"1\":{\"243\":1}}],[\"并对每个节点执行指定的函数\",{\"1\":{\"165\":1}}],[\"并对镜像进行提交\",{\"1\":{\"61\":1}}],[\"并再次遍历链表来验证删除操作的效果\",{\"1\":{\"163\":1}}],[\"并不是一个可比较的值\",{\"1\":{\"423\":1}}],[\"并不会对方法外面的值进行改变\",{\"1\":{\"396\":1}}],[\"并不会对原值产生影响\",{\"1\":{\"363\":1}}],[\"并不会开辟内存\",{\"1\":{\"361\":1}}],[\"并不会自动被删除\",{\"1\":{\"97\":1}}],[\"并不知道以哪个分支为准\",{\"1\":{\"15\":1}}],[\"并遵从\",{\"1\":{\"70\":1}}],[\"并构建镜像\",{\"1\":{\"66\":1}}],[\"并在其中编写以下代码\",{\"1\":{\"540\":1}}],[\"并在其中添加如下内容\",{\"1\":{\"59\":1}}],[\"并在指定时间后发送一个信号\",{\"1\":{\"345\":1}}],[\"并在当前目录下创建一个与远程仓库同名的文件夹\",{\"1\":{\"7\":1}}],[\"并将会话数据存储在服务器端\",{\"1\":{\"586\":1}}],[\"并将结果传递到下一个步骤的\",{\"1\":{\"482\":1}}],[\"并将其添加到你的go工作区中\",{\"1\":{\"539\":1}}],[\"并将其赋值给相应的变量\",{\"1\":{\"231\":1}}],[\"并将其挂载到\",{\"1\":{\"112\":1}}],[\"并将其挂载到数据库服务的数据目录\",{\"1\":{\"52\":1}}],[\"并将其挂载到一个或多个容器中\",{\"1\":{\"51\":1}}],[\"并将它们赋值给相应的变量\",{\"1\":{\"231\":1}}],[\"并将容器的\",{\"1\":{\"49\":1}}],[\"并设置了一个环境变量\",{\"1\":{\"49\":1}}],[\"并且由于是基于\",{\"1\":{\"591\":1}}],[\"并且判断键是否存在\",{\"1\":{\"421\":1}}],[\"并且存在\",{\"1\":{\"418\":1}}],[\"并且该接口是导出的\",{\"1\":{\"397\":1}}],[\"并且可以赋值给变量或作为参数传递\",{\"1\":{\"390\":1}}],[\"并且结果值可能是一个默认值或者无效值\",{\"1\":{\"381\":1}}],[\"并且长度在整个生命周期中都是不可变的\",{\"1\":{\"365\":1}}],[\"并且为自定义集合提供了接口\",{\"1\":{\"321\":1}}],[\"并且大小和之前的不一样了\",{\"1\":{\"85\":1}}],[\"并且让web和db服务都连接到这个网络\",{\"1\":{\"51\":1}}],[\"并且进行了端口映射\",{\"1\":{\"49\":1}}],[\"并且需要有网络连接才能进行版本控制操作\",{\"1\":{\"29\":1}}],[\"并显示它们的\",{\"1\":{\"35\":1}}],[\"并删除之前的所有信息提交\",{\"1\":{\"24\":1}}],[\"并采取适当的操作\",{\"1\":{\"21\":1}}],[\"陷入了两难境地\",{\"1\":{\"15\":1}}],[\"当你访问\",{\"1\":{\"569\":1,\"570\":1,\"571\":1}}],[\"当你切换分支的时候\",{\"1\":{\"11\":1}}],[\"当需要将客户端请求中携带的参数直接解析为指定的结构体时\",{\"1\":{\"553\":1}}],[\"当需要从多个通道中接收消息时\",{\"1\":{\"418\":1}}],[\"当向\",{\"1\":{\"522\":1}}],[\"当从\",{\"1\":{\"522\":1}}],[\"当被调用的函数返回时\",{\"1\":{\"494\":1}}],[\"当超时时间到达时\",{\"1\":{\"490\":1}}],[\"当调用返回的取消函数时\",{\"1\":{\"489\":1}}],[\"当做变量或常量使用\",{\"1\":{\"458\":1}}],[\"当一个指针被定义后没有分配到任何变量的时候\",{\"1\":{\"438\":1}}],[\"当其作为\",{\"1\":{\"423\":1}}],[\"当没有任何通信情况发生时执行的逻辑\",{\"1\":{\"418\":1}}],[\"当条件为\",{\"1\":{\"416\":1}}],[\"当所有\",{\"1\":{\"415\":1}}],[\"当将数组作为参数传递给函数时\",{\"1\":{\"365\":1}}],[\"当将切片作为参数传递给函数时\",{\"1\":{\"363\":1}}],[\"当用户访问该路由时\",{\"1\":{\"603\":1}}],[\"当用户使用\",{\"1\":{\"234\":1}}],[\"当用户提供无效的参数或者请求帮助时\",{\"1\":{\"234\":1}}],[\"当容器在运行的时候是无法直接删除的\",{\"1\":{\"96\":1}}],[\"当运行容器时\",{\"1\":{\"80\":1}}],[\"当本地环境中已经下载好了某些镜像\",{\"1\":{\"60\":1}}],[\"当\",{\"1\":{\"58\":1,\"415\":2}}],[\"当工作区的内容提交到暂存区后\",{\"1\":{\"22\":1}}],[\"当前分支与远程分支的关系\",{\"1\":{\"21\":1}}],[\"当前分支的名称\",{\"1\":{\"21\":1}}],[\"当冲突发生后可以使用\",{\"1\":{\"17\":1}}],[\"当在合并分支时\",{\"1\":{\"16\":1}}],[\"当这两个分支合并的时候\",{\"1\":{\"15\":1}}],[\"当两个分支对同一个文件进行操作\",{\"1\":{\"15\":1}}],[\"为你自己下载安装的对应目录即可\",{\"1\":{\"378\":1}}],[\"为底的对数\",{\"1\":{\"304\":1}}],[\"为底和以\",{\"1\":{\"304\":1}}],[\"为弧度\",{\"1\":{\"303\":1}}],[\"为例子进行说明\",{\"1\":{\"114\":1}}],[\"为例进行说明\",{\"1\":{\"100\":1}}],[\"为\",{\"1\":{\"96\":1,\"414\":5}}],[\"为要导入的文件名\",{\"1\":{\"88\":1}}],[\"为要自定义的名称\",{\"1\":{\"54\":1}}],[\"为镜像的\",{\"1\":{\"87\":1}}],[\"为样例进行编写\",{\"1\":{\"83\":1}}],[\"为生成的镜像指定名称和标签\",{\"1\":{\"65\":1}}],[\"为原容器名\",{\"1\":{\"54\":1}}],[\"为服务配置必要的参数\",{\"1\":{\"51\":1}}],[\"为了解决这个问题\",{\"1\":{\"456\":1}}],[\"为了减少结构体的内存占用\",{\"1\":{\"451\":1}}],[\"为了对齐\",{\"1\":{\"451\":1}}],[\"为了满足对齐要求\",{\"1\":{\"451\":1}}],[\"为了提高内存访问效率\",{\"1\":{\"451\":1}}],[\"为了避免这种情况\",{\"1\":{\"423\":1}}],[\"为了避免遇到各种莫名其妙的问题\",{\"1\":{\"8\":1}}],[\"为了安全地检查接口变量是否可以转换为特定类型\",{\"1\":{\"411\":1}}],[\"为了成功匹配接收者的类型\",{\"1\":{\"396\":1}}],[\"为了便于和前面创建的容器进行区分\",{\"1\":{\"120\":1}}],[\"为了方便起见\",{\"1\":{\"98\":1}}],[\"为了方便观察\",{\"1\":{\"88\":1}}],[\"为了帮助管理\",{\"1\":{\"29\":1}}],[\"为默认\",{\"1\":{\"24\":1}}],[\"为什么会发生冲突\",{\"1\":{\"15\":1}}],[\"即在创建时可以指定通道能够缓存的元素数量\",{\"1\":{\"468\":1}}],[\"即发送的数据会按照发送的顺序被接收\",{\"1\":{\"468\":1}}],[\"即发生了合并冲突\",{\"1\":{\"16\":1}}],[\"即指针的指针\",{\"1\":{\"439\":1}}],[\"即为\",{\"1\":{\"439\":2}}],[\"即空指针\",{\"1\":{\"438\":2}}],[\"即实现了==和\",{\"1\":{\"402\":1}}],[\"即实例\",{\"1\":{\"102\":1,\"103\":1}}],[\"即函数的归属不同\",{\"1\":{\"396\":1}}],[\"即错误值\",{\"1\":{\"381\":1}}],[\"即使它们都是\",{\"1\":{\"423\":1}}],[\"即使在\",{\"1\":{\"423\":1}}],[\"即使在定义时所在的作用域已经不存在\",{\"1\":{\"391\":1}}],[\"即使只有一行代码\",{\"1\":{\"416\":1}}],[\"即使这些变量不在其参数列表中\",{\"1\":{\"391\":1}}],[\"即使将该指针指向其他地址\",{\"1\":{\"363\":1}}],[\"即使用远程数据覆盖本地数据\",{\"1\":{\"36\":1}}],[\"即有多少数据\",{\"1\":{\"361\":1}}],[\"即二维数组\",{\"1\":{\"358\":1}}],[\"即相等元素的相对顺序在排序后保持不变\",{\"1\":{\"324\":1}}],[\"即我们在本地访问\",{\"1\":{\"119\":1}}],[\"即查看所有容器\",{\"1\":{\"91\":1}}],[\"即后续指令执行时的当前工作目录\",{\"1\":{\"59\":1}}],[\"即用作构建的起点的操作系统和环境\",{\"1\":{\"59\":1}}],[\"即可访问\",{\"1\":{\"437\":1}}],[\"即可访问该\",{\"1\":{\"119\":1}}],[\"即可使用多态\",{\"1\":{\"408\":1}}],[\"即可\",{\"1\":{\"120\":1}}],[\"即可安装\",{\"1\":{\"31\":1,\"32\":2}}],[\"即可开始安装\",{\"1\":{\"31\":1}}],[\"即创建和合并分支需要花费相对更多的时间和资源\",{\"1\":{\"29\":1}}],[\"即创建一个新的代码仓库\",{\"1\":{\"8\":1}}],[\"即如果后面跟的是一个目录做为参数\",{\"1\":{\"25\":1}}],[\"即成功合并的部分文件也会进行回退\",{\"1\":{\"18\":1}}],[\"即冲突发生后退出合并的中间状态\",{\"1\":{\"18\":1}}],[\"即能够成功合并的文件全部合并\",{\"1\":{\"16\":1}}],[\"即将本地\",{\"1\":{\"119\":1}}],[\"即将本机的\",{\"1\":{\"118\":1}}],[\"即将\",{\"1\":{\"14\":1,\"120\":1}}],[\"和主程序\",{\"0\":{\"502\":1}}],[\"和通道的示例\",{\"1\":{\"501\":1}}],[\"和接收\",{\"1\":{\"468\":1}}],[\"和竞态条件\",{\"1\":{\"459\":1}}],[\"和浮点数类型\",{\"1\":{\"454\":1}}],[\"和数学中类似\",{\"1\":{\"431\":1}}],[\"和perimeter\",{\"1\":{\"407\":1,\"408\":1}}],[\"和切片\",{\"1\":{\"364\":1}}],[\"和堆排序\",{\"1\":{\"321\":1}}],[\"和其他\",{\"1\":{\"48\":2}}],[\"和跟踪分支\",{\"1\":{\"35\":1}}],[\"和\",{\"0\":{\"182\":1,\"207\":1,\"221\":1,\"229\":1,\"589\":1},\"1\":{\"14\":1,\"37\":1,\"49\":1,\"70\":1,\"114\":1,\"157\":1,\"231\":2,\"232\":4,\"233\":1,\"237\":1,\"246\":1,\"252\":1,\"302\":1,\"304\":2,\"305\":1,\"323\":1,\"370\":1,\"371\":3,\"372\":2,\"376\":1,\"378\":1,\"384\":1,\"396\":3,\"414\":1,\"416\":2,\"418\":2,\"421\":1,\"443\":1,\"444\":1,\"446\":1,\"451\":2,\"453\":1,\"456\":1,\"463\":1,\"467\":1,\"524\":1,\"549\":1,\"550\":1,\"551\":1,\"553\":2,\"571\":1,\"590\":1,\"592\":1,\"593\":1,\"599\":1}}],[\"举一个简单的例子\",{\"1\":{\"14\":1}}],[\"带缓冲的通道\",{\"0\":{\"500\":1}}],[\"带缓冲通道作为信号量\",{\"1\":{\"532\":1}}],[\"带缓冲通道可以容纳一定数量的元素\",{\"1\":{\"473\":1}}],[\"带缓冲通道\",{\"0\":{\"471\":1,\"473\":1}}],[\"带值上下文\",{\"0\":{\"492\":1}}],[\"带初始化语句的\",{\"1\":{\"415\":1}}],[\"带\",{\"1\":{\"13\":1}}],[\"就会被删除\",{\"1\":{\"583\":1}}],[\"就会从默认的\",{\"1\":{\"80\":1}}],[\"就会从镜像仓库\",{\"1\":{\"45\":1}}],[\"就相当于你实现了该接口\",{\"1\":{\"408\":1}}],[\"就隐式地实现了该接口\",{\"1\":{\"408\":1}}],[\"就有多少长度\",{\"1\":{\"361\":1}}],[\"就默认将剩余的数据重置为零值\",{\"1\":{\"356\":1}}],[\"就不能更改其大小\",{\"1\":{\"353\":1}}],[\"就说明我们使用了该镜像创建了容器\",{\"1\":{\"84\":1}}],[\"就是泛型\",{\"1\":{\"399\":1}}],[\"就是方法的接收者类型\",{\"1\":{\"396\":1}}],[\"就是已经配置成功了\",{\"1\":{\"44\":1}}],[\"就是只会恢复到最后一次提交时候的工作目录状态\",{\"1\":{\"11\":1}}],[\"就代表直接将工作区文件提交到本地仓库\",{\"1\":{\"23\":1}}],[\"就创建好了一个本地工作仓库\",{\"1\":{\"8\":1}}],[\"这对于构建动态网页和\",{\"1\":{\"606\":1}}],[\"这对于微服务架构和持续集成\",{\"1\":{\"71\":1}}],[\"这在处理\",{\"1\":{\"568\":1}}],[\"这将创建一个go\",{\"1\":{\"540\":1}}],[\"这将创建一个名为\",{\"1\":{\"107\":1}}],[\"这条命令会从github上下载gin框架\",{\"1\":{\"539\":1}}],[\"这行代码会启动一个新的\",{\"1\":{\"495\":1}}],[\"这次调用就会在一个新的\",{\"1\":{\"494\":1}}],[\"这表明通过优化字段顺序\",{\"1\":{\"451\":1}}],[\"这会导致结构体在内存中占用的空间比字段本身的大小总和更多\",{\"1\":{\"451\":1}}],[\"这是\",{\"1\":{\"445\":1}}],[\"这是极度危险的\",{\"1\":{\"437\":1}}],[\"这是因为为了能够和接收者类型进行匹配\",{\"1\":{\"396\":1}}],[\"这是因为这里方法的接收者是值\",{\"1\":{\"396\":1}}],[\"这是因为在函数调用失败时\",{\"1\":{\"383\":1}}],[\"这影响了表达式中运算符执行的顺序\",{\"1\":{\"431\":1}}],[\"这几个语句最为重要\",{\"1\":{\"418\":1}}],[\"这几个容器相互独立\",{\"1\":{\"79\":1}}],[\"这段代码会输出数组\",{\"1\":{\"416\":1}}],[\"这两个方法返回浮点数类型\",{\"1\":{\"407\":1}}],[\"这两个开发工具\",{\"1\":{\"376\":1}}],[\"这大大增强了go语言的灵活性和可重用性\",{\"1\":{\"398\":1}}],[\"这也是因为\",{\"1\":{\"396\":1}}],[\"这定义了方法的接收者为\",{\"1\":{\"396\":1}}],[\"这和\",{\"1\":{\"388\":1}}],[\"这意味着当没有数据可发送或接收时\",{\"1\":{\"468\":1}}],[\"这意味着在使用切片和映射时\",{\"1\":{\"455\":1}}],[\"这意味着在函数内部对数组的修改不会影响外部的原始数组\",{\"1\":{\"365\":1}}],[\"这意味着\",{\"1\":{\"380\":1}}],[\"这意味着容器并不直接在操作系统上运行\",{\"1\":{\"78\":1}}],[\"这并不会创建一个新的数组\",{\"1\":{\"357\":1}}],[\"这种情况下\",{\"1\":{\"462\":1}}],[\"这种情况不必担心\",{\"1\":{\"101\":1}}],[\"这种设计有助于减少访问内存时的性能开销\",{\"1\":{\"451\":1}}],[\"这种面向对象的语言不同\",{\"1\":{\"444\":1}}],[\"这种方式被称为\",{\"1\":{\"579\":1}}],[\"这种方式也可以解析数组\",{\"1\":{\"553\":1}}],[\"这种方式确保了发送和接收的同步\",{\"1\":{\"472\":1}}],[\"这种方式比使用其他占位符\",{\"1\":{\"450\":1}}],[\"这种方式可以创建更加具体的接口\",{\"1\":{\"412\":1}}],[\"这种方法应谨慎使用\",{\"1\":{\"437\":1}}],[\"这种特性使得接口在\",{\"1\":{\"406\":1}}],[\"这种约定适用于\",{\"1\":{\"397\":1}}],[\"这种默认声明方式\",{\"1\":{\"361\":1}}],[\"这种形式的命令行参数外\",{\"1\":{\"233\":1}}],[\"这种数据结构在需要循环遍历或轮转操作的场景中非常有用\",{\"1\":{\"165\":1}}],[\"这种数据结构在循环遍历和轮转操作中非常有用\",{\"1\":{\"164\":1}}],[\"这有助于避免由于一个应用程序的问题导致整个系统崩溃\",{\"1\":{\"71\":1}}],[\"这使得它非常适合作为信号或占位符使用\",{\"1\":{\"450\":1}}],[\"这使得错误处理变得非常简洁和统一\",{\"1\":{\"379\":1}}],[\"这使得go语言在系统级编程和文件处理方面非常强大和灵活\",{\"1\":{\"320\":1}}],[\"这使得编写命令行工具或者控制台程序时\",{\"1\":{\"235\":1}}],[\"这使得容器的启动速度更快\",{\"1\":{\"71\":1}}],[\"这使得您的配置更加灵活\",{\"1\":{\"52\":1}}],[\"这包括代码\",{\"1\":{\"71\":1}}],[\"这些知识是使用\",{\"1\":{\"577\":1}}],[\"这些方法使得在\",{\"1\":{\"572\":1}}],[\"这些数据可以是\",{\"1\":{\"554\":1}}],[\"这些数据结构对于高效地管理和操作数据非常有用\",{\"1\":{\"158\":1}}],[\"这些并发模式提供了一种结构化的方法来编写并发程序\",{\"1\":{\"484\":1}}],[\"这些填充字节不存储任何有效数据\",{\"1\":{\"451\":1}}],[\"这些规则有助于编写清晰且按预期执行的表达式\",{\"1\":{\"431\":1}}],[\"这些类型的和呢\",{\"1\":{\"399\":1}}],[\"这些是\",{\"1\":{\"397\":1}}],[\"这些变量仍然可以被访问和操作\",{\"1\":{\"391\":1}}],[\"这些函数允许将当前的错误包装起来并添加上下文信息\",{\"1\":{\"384\":1}}],[\"这些功能非常有用\",{\"1\":{\"326\":1}}],[\"这些参数可以通过\",{\"1\":{\"233\":1,\"557\":1}}],[\"这些模块被广泛使用\",{\"1\":{\"142\":1}}],[\"这些内容都会在后续中进行讲解\",{\"1\":{\"101\":1}}],[\"这些指令描述了如何构建\",{\"1\":{\"58\":1}}],[\"这些命令为\",{\"1\":{\"50\":1}}],[\"这些\",{\"1\":{\"44\":1}}],[\"这些更改才会成为该分支的一部分\",{\"1\":{\"11\":1}}],[\"这样可以将中间件的作用范围限定在特定的路由组内\",{\"1\":{\"544\":1}}],[\"这样通道可以在不阻塞发送\",{\"1\":{\"500\":1}}],[\"这样是错误的\",{\"1\":{\"458\":1}}],[\"这样是可以实现\",{\"1\":{\"399\":1}}],[\"这样优化后的结构体的总大小可能会减小\",{\"1\":{\"451\":1}}],[\"这样就可以创建不同类型的列表\",{\"1\":{\"401\":1}}],[\"这样就创建了一个包含更多上下文信息的错误\",{\"1\":{\"384\":1}}],[\"这样就创建了一个简单的错误\",{\"1\":{\"382\":1}}],[\"这样定义后\",{\"1\":{\"234\":1}}],[\"这样它们可以在隔离环境中一起运行\",{\"1\":{\"47\":1}}],[\"这样的部署过程也相对来说比较繁琐复杂\",{\"1\":{\"46\":1}}],[\"这样\",{\"1\":{\"43\":1,\"52\":1,\"56\":1}}],[\"这里对其进行详细说明\",{\"1\":{\"601\":1}}],[\"这里将用户名作为\",{\"1\":{\"599\":1}}],[\"这里仅演示了常用的响应格式\",{\"1\":{\"572\":1}}],[\"这里为了简单\",{\"1\":{\"535\":1}}],[\"这里只能使用\",{\"1\":{\"444\":1}}],[\"这里调用了\",{\"1\":{\"396\":1}}],[\"这里可以看做是在函数调用之前就初始化好了返回值变量\",{\"1\":{\"388\":1}}],[\"这里可以看到已经创建成功了\",{\"1\":{\"85\":1}}],[\"这里配置时\",{\"1\":{\"378\":1}}],[\"这里我推荐\",{\"1\":{\"376\":1}}],[\"这里我们演示删除之前下载的那个\",{\"1\":{\"84\":1}}],[\"这里我们编辑后的内容\",{\"1\":{\"18\":1}}],[\"这里不难看出\",{\"1\":{\"361\":1}}],[\"这里不再赘述\",{\"1\":{\"56\":1}}],[\"这里值得注意的是\",{\"1\":{\"356\":1}}],[\"这里\",{\"1\":{\"232\":1,\"408\":1}}],[\"这里要注意一个特殊情况\",{\"1\":{\"423\":1}}],[\"这里要注意\",{\"1\":{\"124\":1}}],[\"这里的零值并非等于\",{\"1\":{\"456\":1}}],[\"这里的\",{\"1\":{\"400\":1}}],[\"这里的容量指的是切片初始化时的容量\",{\"1\":{\"361\":1}}],[\"这里的端口映射默认都是\",{\"1\":{\"120\":1}}],[\"这里的拉取通常是指从\",{\"1\":{\"79\":1}}],[\"这里每个人的电脑环境不同\",{\"1\":{\"118\":1}}],[\"这里出现了警告信息\",{\"1\":{\"118\":1}}],[\"这里是对\",{\"1\":{\"95\":1}}],[\"这里默认拉取的是\",{\"1\":{\"83\":1}}],[\"这里仍以\",{\"1\":{\"83\":1}}],[\"这里就已经找到了\",{\"1\":{\"82\":1}}],[\"这里同样是个hello\",{\"1\":{\"45\":1}}],[\"这里以我的个人头像为例\",{\"1\":{\"566\":1}}],[\"这里以\",{\"1\":{\"44\":1,\"100\":1}}],[\"这里如果使用了该镜像创建了容器\",{\"1\":{\"84\":1}}],[\"这里如果使用了\",{\"1\":{\"23\":1}}],[\"这时候可能需要将多个错误链接在一起\",{\"1\":{\"384\":1}}],[\"这时就需要使用到版本回退\",{\"1\":{\"24\":1}}],[\"这时我们如果想对比具体修改了哪些部分\",{\"1\":{\"22\":1}}],[\"这时需要撤回合并\",{\"1\":{\"18\":1}}],[\"这时需要先切换到\",{\"1\":{\"14\":1}}],[\"这时处于合并的中间态\",{\"1\":{\"16\":1}}],[\"这个示例中\",{\"1\":{\"524\":1}}],[\"这个示例使用\",{\"1\":{\"502\":1}}],[\"这个示例展示了以下几点\",{\"1\":{\"423\":1}}],[\"这个例子展示了如何使用\",{\"1\":{\"476\":1}}],[\"这个例子创建了一个可以传递\",{\"1\":{\"469\":1}}],[\"这个值同样也是存储在内存中\",{\"1\":{\"439\":1}}],[\"这个函数可以接受任何类型的切片作为参数\",{\"1\":{\"400\":1}}],[\"这个传进来的数据类型的变量\",{\"1\":{\"399\":1}}],[\"这个案例中大体上和函数基本类似\",{\"1\":{\"396\":1}}],[\"这个镜像\",{\"1\":{\"103\":1}}],[\"这个库\",{\"1\":{\"102\":1}}],[\"这个\",{\"1\":{\"98\":1,\"494\":1,\"518\":1}}],[\"这个章节涉及到\",{\"1\":{\"77\":1}}],[\"这个文件不仅定义了所使用的服务\",{\"1\":{\"51\":1}}],[\"这个命令在需要查看历史状态或将文件还原到历史版本时非常有用\",{\"1\":{\"27\":1}}],[\"这个分支一般在\",{\"1\":{\"10\":1}}],[\"这个子目录就是你的\",{\"1\":{\"8\":1}}],[\"这个目录是隐藏的\",{\"1\":{\"8\":1}}],[\"但也可以通过\",{\"1\":{\"587\":1}}],[\"但也因此带来了同步问题\",{\"1\":{\"505\":1}}],[\"但之后会立即返回零值\",{\"1\":{\"527\":1}}],[\"但用于通道通信\",{\"1\":{\"476\":1}}],[\"但用于通信操作\",{\"1\":{\"418\":1}}],[\"但接收操作会继续接收已存在的数据\",{\"1\":{\"474\":1}}],[\"但仍可以接收已有数据\",{\"1\":{\"468\":1}}],[\"但仍然共享相同的底层数组\",{\"1\":{\"366\":1}}],[\"但仍然保留在当前工作目录中\",{\"1\":{\"25\":1}}],[\"但写操作是互斥的\",{\"1\":{\"461\":1,\"515\":1}}],[\"但直接操作内存地址\",{\"1\":{\"456\":1}}],[\"但结构体可以包含指针字段\",{\"1\":{\"455\":1}}],[\"但本质上仍是变量\",{\"1\":{\"453\":1}}],[\"但这也就意味着\",{\"1\":{\"437\":1}}],[\"但可以集成第三方的\",{\"1\":{\"580\":1}}],[\"但可以根据需要动态扩展\",{\"1\":{\"496\":1}}],[\"但可以指定具体的时间点\",{\"1\":{\"491\":1}}],[\"但可以通过\",{\"1\":{\"416\":1,\"534\":1}}],[\"但可以使用\",{\"1\":{\"416\":1}}],[\"但可以追加参数\",{\"1\":{\"62\":1}}],[\"但如果字段实现了某个接口的方法\",{\"1\":{\"397\":1}}],[\"但需要注意同步问题\",{\"1\":{\"506\":1}}],[\"但需要注意的是\",{\"1\":{\"357\":1}}],[\"但需要明确出退出条件\",{\"1\":{\"392\":1}}],[\"但长度固定\",{\"1\":{\"365\":1}}],[\"但指向的是同一个地址\",{\"1\":{\"363\":1}}],[\"但不能跨越\",{\"1\":{\"575\":1}}],[\"但不知道数据量的数据\",{\"1\":{\"359\":1}}],[\"但不影响工作目录中的文件\",{\"1\":{\"27\":1}}],[\"但实际在功能上差距较大\",{\"1\":{\"353\":1}}],[\"但\",{\"1\":{\"306\":1,\"553\":1,\"575\":1}}],[\"但没有直接提供堆的实现\",{\"1\":{\"161\":1}}],[\"但没有提交这些更改\",{\"1\":{\"11\":1}}],[\"但在写入时独占资源\",{\"1\":{\"530\":1}}],[\"但在go语言中广泛用于处理列表和集合数据\",{\"1\":{\"159\":1}}],[\"但在实际中常常使用到\",{\"1\":{\"117\":1}}],[\"但并不映射到主机\",{\"1\":{\"62\":1}}],[\"但并没有实质的将文件添加到本地仓库\",{\"1\":{\"23\":1}}],[\"但端口映射并不是唯一把\",{\"1\":{\"53\":1}}],[\"但它们有不同的工作原理和用途\",{\"1\":{\"590\":1}}],[\"但它们有以下区别\",{\"1\":{\"29\":1}}],[\"但它加入了并发编程和垃圾回收等现代特性\",{\"1\":{\"370\":1}}],[\"但它也可以用于生产环境的部署\",{\"1\":{\"52\":1}}],[\"但又要强制推送可以使用\",{\"1\":{\"38\":1}}],[\"但你仍然可以使用\",{\"1\":{\"27\":1}}],[\"但希望撤销这些更改\",{\"1\":{\"27\":1}}],[\"但还是要重命名它\",{\"1\":{\"26\":1}}],[\"但是又和实际的参数有所区别\",{\"1\":{\"557\":1}}],[\"但是手动构建效率差\",{\"1\":{\"553\":1}}],[\"但是在访问结构体时没有进行解引用就可直接访问结构体内容\",{\"1\":{\"445\":1}}],[\"但是在前面说过\",{\"1\":{\"361\":1}}],[\"但是实际上是禁止了大部分指针运算的\",{\"1\":{\"437\":1}}],[\"但是实际的输出是\",{\"1\":{\"396\":1}}],[\"但是不难发现\",{\"1\":{\"399\":1}}],[\"但是可以在这些方法的内部实现中访问包中的函数\",{\"1\":{\"396\":1}}],[\"但是由于指针的副本同样指向的是该结构体实例\",{\"1\":{\"446\":1}}],[\"但是由于操作指针的风险较大\",{\"1\":{\"432\":1}}],[\"但是由于两个指针所指向的是同一个地址\",{\"1\":{\"396\":1}}],[\"但是由于切片的元素个数和容量是值传递\",{\"1\":{\"363\":1}}],[\"但是当增加切片的长度时\",{\"1\":{\"363\":1}}],[\"但是长度和容量这两个有什么区别呢\",{\"1\":{\"361\":1}}],[\"但是数据列表的长度不能超过数组的长度\",{\"1\":{\"356\":1}}],[\"但是运行结果并不与教程相符合的情况\",{\"1\":{\"101\":1}}],[\"但是导出的结果是镜像的配置文件\",{\"1\":{\"95\":1}}],[\"但是过多的层也会导致镜像过大\",{\"1\":{\"60\":1}}],[\"但是\",{\"1\":{\"11\":1,\"396\":1}}],[\"但是为了提高效率\",{\"1\":{\"11\":1}}],[\"<title>\",{\"1\":{\"564\":1,\"604\":1}}],[\"<h1>welcome\",{\"1\":{\"604\":1}}],[\"<h1>\",{\"1\":{\"564\":1}}],[\"<head>\",{\"1\":{\"564\":1,\"604\":1}}],[\"<html>\",{\"1\":{\"254\":1,\"564\":1,\"604\":1}}],[\"<stdio\",{\"1\":{\"437\":1}}],[\"<<=\",{\"1\":{\"429\":1,\"431\":1}}],[\"<<\",{\"1\":{\"428\":2,\"431\":1}}],[\"<<<<<<<\",{\"1\":{\"17\":2}}],[\"<input\",{\"1\":{\"254\":3}}],[\"<form\",{\"1\":{\"254\":1}}],[\"<file>\",{\"1\":{\"25\":2,\"27\":6}}],[\"<filename>\",{\"1\":{\"17\":1}}],[\"<body>\",{\"1\":{\"254\":1,\"564\":1,\"604\":1}}],[\"<branchname>\",{\"1\":{\"10\":1,\"11\":1,\"12\":1}}],[\"<=\",{\"1\":{\"164\":1,\"392\":1,\"416\":1,\"426\":1,\"431\":1,\"479\":2,\"480\":1,\"481\":2,\"484\":3,\"502\":1}}],[\"<\",{\"1\":{\"66\":1,\"88\":1,\"132\":1,\"161\":1,\"254\":4,\"323\":1,\"325\":1,\"345\":1,\"415\":1,\"416\":1,\"417\":3,\"418\":4,\"426\":2,\"431\":1,\"437\":1,\"450\":1,\"455\":3,\"462\":2,\"463\":2,\"464\":2,\"465\":3,\"470\":3,\"472\":2,\"473\":2,\"474\":1,\"475\":2,\"476\":5,\"479\":3,\"480\":5,\"481\":2,\"482\":8,\"483\":5,\"484\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"499\":3,\"501\":2,\"514\":1,\"515\":2,\"516\":1,\"517\":2,\"522\":3,\"524\":5,\"525\":3,\"526\":1,\"530\":1,\"532\":3,\"533\":2,\"534\":1,\"535\":1,\"564\":6,\"604\":6}}],[\"<本地分支名>\",{\"1\":{\"37\":1,\"38\":4}}],[\"<远程分支名>\",{\"1\":{\"37\":2,\"38\":1}}],[\"<远程主机名>\",{\"1\":{\"37\":2,\"38\":4}}],[\"<old\",{\"1\":{\"35\":1}}],[\"<remote\",{\"1\":{\"35\":5,\"36\":1}}],[\"<commit>\",{\"1\":{\"27\":1}}],[\"<new\",{\"1\":{\"11\":1,\"35\":2}}],[\"bson\",{\"1\":{\"449\":3}}],[\"byname\",{\"1\":{\"325\":7}}],[\"by\",{\"1\":{\"323\":1,\"325\":1,\"395\":1}}],[\"byage\",{\"1\":{\"323\":5}}],[\"byte\",{\"1\":{\"152\":1,\"155\":1,\"168\":1,\"171\":1,\"174\":1,\"177\":3,\"180\":1,\"182\":2,\"185\":1,\"206\":1,\"211\":1,\"212\":2,\"220\":1,\"250\":1,\"263\":1,\"264\":1,\"267\":1,\"273\":1,\"276\":1,\"309\":1,\"310\":4,\"362\":2,\"412\":1,\"447\":1,\"451\":3,\"572\":1,\"588\":1,\"590\":1,\"598\":1}}],[\"bytes\",{\"1\":{\"147\":2,\"155\":2,\"179\":2,\"180\":2,\"184\":2,\"185\":2,\"250\":2,\"264\":1,\"265\":1,\"451\":10}}],[\"blocksize\",{\"1\":{\"177\":5}}],[\"blocksize+len\",{\"1\":{\"177\":1}}],[\"block\",{\"1\":{\"177\":3,\"179\":2,\"180\":4,\"184\":2,\"185\":4}}],[\"buf\",{\"1\":{\"264\":4,\"275\":3,\"278\":3,\"280\":3}}],[\"buffers\",{\"1\":{\"572\":1}}],[\"buffer\",{\"1\":{\"157\":3,\"310\":6}}],[\"bufio\",{\"0\":{\"143\":1},\"1\":{\"139\":3,\"143\":2,\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"150\":2,\"151\":2,\"152\":2,\"154\":2,\"155\":4,\"157\":7,\"270\":3,\"271\":3,\"280\":1,\"309\":2,\"314\":1}}],[\"busy\",{\"1\":{\"122\":1,\"123\":1,\"124\":2}}],[\"builder\",{\"1\":{\"62\":1,\"157\":1,\"275\":1,\"278\":1,\"280\":1}}],[\"build\",{\"0\":{\"63\":1},\"1\":{\"50\":1,\"63\":2,\"64\":1,\"65\":1,\"66\":7,\"68\":1}}],[\"b234f112186d\",{\"1\":{\"96\":2}}],[\"banana\",{\"1\":{\"450\":1}}],[\"base\",{\"1\":{\"329\":2}}],[\"bash\",{\"1\":{\"56\":2,\"90\":1,\"94\":2}}],[\"baz\",{\"1\":{\"161\":2}}],[\"barriers\",{\"0\":{\"534\":1}}],[\"bar\",{\"1\":{\"161\":2}}],[\"background\",{\"1\":{\"487\":2,\"488\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":2}}],[\"back\",{\"1\":{\"52\":3,\"162\":1,\"163\":1}}],[\"body>\",{\"1\":{\"254\":1,\"564\":1,\"604\":1}}],[\"body\",{\"1\":{\"249\":4,\"250\":4,\"252\":4}}],[\"boolean\",{\"1\":{\"551\":1,\"552\":1}}],[\"bool\",{\"1\":{\"161\":1,\"323\":1,\"325\":1,\"422\":1,\"423\":1,\"450\":1,\"451\":4,\"454\":1,\"517\":2,\"533\":2,\"550\":1,\"551\":1,\"552\":1}}],[\"book\",{\"1\":{\"33\":1}}],[\"bob\",{\"1\":{\"160\":1,\"162\":1,\"191\":1,\"192\":1,\"238\":2,\"323\":1,\"325\":1,\"420\":1,\"421\":3,\"422\":1,\"444\":1,\"447\":2}}],[\"boyd\",{\"1\":{\"54\":2,\"121\":2}}],[\"bindjson\",{\"1\":{\"555\":2}}],[\"binding\",{\"1\":{\"553\":2}}],[\"bindquery\",{\"1\":{\"553\":6}}],[\"bind\",{\"1\":{\"551\":1,\"552\":1,\"556\":2}}],[\"bin\",{\"1\":{\"45\":3,\"48\":1,\"56\":2,\"90\":1,\"94\":2,\"103\":2}}],[\"break\",{\"1\":{\"189\":1,\"196\":1,\"198\":1,\"228\":1,\"229\":1,\"415\":2,\"416\":1}}],[\"brew\",{\"1\":{\"31\":1}}],[\"bridge\",{\"1\":{\"55\":2}}],[\"branch\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"13\":2,\"22\":2,\"36\":4,\"66\":1}}],[\"branchname\",{\"1\":{\"10\":1,\"12\":1}}],[\"bearer\",{\"1\":{\"598\":1}}],[\"beego\",{\"1\":{\"372\":1}}],[\"before\",{\"0\":{\"511\":1},\"1\":{\"342\":2,\"511\":2,\"518\":4,\"519\":1}}],[\"be\",{\"1\":{\"17\":1,\"447\":1}}],[\"b\",{\"1\":{\"11\":1,\"12\":1,\"387\":3,\"390\":2,\"393\":2,\"399\":4,\"400\":1,\"401\":1,\"402\":5,\"417\":1,\"425\":6,\"426\":5,\"428\":4,\"429\":3,\"431\":5,\"451\":15,\"455\":3,\"509\":2}}],[\"然后再加上\",{\"1\":{\"431\":1}}],[\"然后再切换\",{\"1\":{\"11\":1}}],[\"然后退出循环\",{\"1\":{\"416\":1}}],[\"然后初始化\",{\"1\":{\"356\":1}}],[\"然后打印出排序后的结果\",{\"1\":{\"325\":1}}],[\"然后打印环形链表的所有值\",{\"1\":{\"165\":1}}],[\"然后\",{\"1\":{\"165\":1,\"475\":1,\"501\":1}}],[\"然后向其中添加了几个元素\",{\"1\":{\"163\":1}}],[\"然后将\",{\"1\":{\"431\":1}}],[\"然后将更新后的\",{\"1\":{\"85\":1}}],[\"然后将本地分支没有的数据进行合并\",{\"1\":{\"36\":1}}],[\"然后删除\",{\"1\":{\"84\":1}}],[\"然后发布到任何流行的\",{\"1\":{\"70\":1}}],[\"然后输出结果\",{\"1\":{\"45\":1}}],[\"然后执行该\",{\"1\":{\"521\":1}}],[\"然后执行\",{\"1\":{\"14\":1}}],[\"然后在容器里执行\",{\"1\":{\"45\":1}}],[\"然后在切换到其他分支时\",{\"1\":{\"11\":1}}],[\"然后在不影响主线的同时继续工作\",{\"1\":{\"9\":1}}],[\"一种不同的身份验证机制\",{\"1\":{\"580\":1}}],[\"一种是直接拷贝远程\",{\"1\":{\"6\":1}}],[\"一次性初始化多个变量\",{\"1\":{\"456\":1}}],[\"一次性写入所有记录\",{\"1\":{\"192\":1}}],[\"一元运算符\",{\"1\":{\"431\":1}}],[\"一旦会话结束或超时\",{\"1\":{\"587\":1}}],[\"一旦初始化\",{\"1\":{\"353\":1}}],[\"一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息\",{\"1\":{\"29\":1}}],[\"一个\",{\"1\":{\"592\":1}}],[\"一个进程的崩溃不会影响其他进程\",{\"1\":{\"504\":1}}],[\"一个指向整数类型的指针变量\",{\"1\":{\"433\":1}}],[\"一个简单的泛型函数定义如下\",{\"1\":{\"400\":1}}],[\"一个好的开发工具能让你事半功倍\",{\"1\":{\"376\":1}}],[\"一个镜像可以实例化多个容器\",{\"1\":{\"79\":1}}],[\"一个运行\",{\"1\":{\"43\":1}}],[\"一个分支代表一条独立的开发线\",{\"1\":{\"9\":1}}],[\"一直下一步即可完成安装\",{\"1\":{\"33\":1}}],[\"一步增加并切换分支\",{\"1\":{\"11\":1}}],[\"一般是从\",{\"1\":{\"80\":1}}],[\"一般是指当前使用的分支\",{\"1\":{\"17\":1}}],[\"一般的工作原理为\",{\"1\":{\"39\":1}}],[\"一般情况下都会删除这三条线\",{\"1\":{\"18\":1}}],[\"一般情况下切换分支时需要先创建分支\",{\"1\":{\"11\":1}}],[\"一般名称为\",{\"1\":{\"10\":1}}],[\"一定要先有一个分支\",{\"1\":{\"10\":1}}],[\"几乎每一种版本控制系统都以某种形式支持分支\",{\"1\":{\"9\":1}}],[\"其字段是存储在结构体内存中的值\",{\"1\":{\"455\":1}}],[\"其底层结构包含一个指向数组的指针\",{\"1\":{\"455\":1}}],[\"其元素是存储在数组内存中的值\",{\"1\":{\"455\":1}}],[\"其错误消息为\",{\"1\":{\"382\":1}}],[\"其本身也可作为数组的数据类型\",{\"1\":{\"358\":1}}],[\"其本质的镜像\",{\"1\":{\"87\":1}}],[\"其就是一个镜像的运行对象\",{\"1\":{\"78\":1}}],[\"其实在响应这一章节就已经展示了模板渲染的案例\",{\"1\":{\"601\":1}}],[\"其实就是\",{\"1\":{\"37\":1}}],[\"其实是我们自己没有做好控制\",{\"1\":{\"18\":1}}],[\"其他操作类似\",{\"1\":{\"574\":1}}],[\"其他操作都没有操作到底层数组\",{\"1\":{\"363\":1}}],[\"其他可参考下述列表\",{\"1\":{\"572\":1}}],[\"其他可比较类型的键\",{\"1\":{\"423\":1}}],[\"其他常见标签\",{\"0\":{\"449\":1}}],[\"其他常用功能\",{\"0\":{\"320\":1,\"329\":1}}],[\"其他常用模块\",{\"0\":{\"141\":1}}],[\"其他运算符\",{\"0\":{\"430\":1}}],[\"其他排序函数\",{\"0\":{\"325\":1}}],[\"其他仓库同理\",{\"1\":{\"114\":1}}],[\"其他镜像的拉取同理\",{\"1\":{\"83\":1}}],[\"其他镜像的操作同理\",{\"1\":{\"82\":1}}],[\"其他服务商的配置同理\",{\"1\":{\"44\":1}}],[\"其他系统可参考官方下载文档\",{\"1\":{\"33\":1}}],[\"其他分支可以基于主分支或其他分支创建\",{\"1\":{\"9\":1}}],[\"其中最后一个元素指向第一个元素\",{\"1\":{\"164\":1}}],[\"其中包含了创建\",{\"1\":{\"78\":1}}],[\"其中包含了网络和卷的定义\",{\"1\":{\"51\":1}}],[\"其中存储了大量的公共和私有docker镜像\",{\"1\":{\"71\":1}}],[\"其中\",{\"1\":{\"23\":1,\"54\":1}}],[\"其中的每个提交都包含了一组文件的状态以及指向其父提交的指针\",{\"1\":{\"9\":1}}],[\"其\",{\"1\":{\"15\":1}}],[\"或称\",{\"1\":{\"370\":1}}],[\"或者加载单个\",{\"1\":{\"602\":1}}],[\"或者结合\",{\"1\":{\"558\":1}}],[\"或者下面这种形式\",{\"1\":{\"445\":1}}],[\"或者编译时错误\",{\"1\":{\"423\":1}}],[\"或者使用\",{\"1\":{\"422\":1}}],[\"或者\",{\"1\":{\"415\":1}}],[\"或者提供无效参数时\",{\"1\":{\"234\":1}}],[\"或者您想学习\",{\"1\":{\"73\":1}}],[\"或者您可以将\",{\"1\":{\"43\":1}}],[\"或向后\",{\"1\":{\"165\":1}}],[\"或本地仓库\",{\"1\":{\"39\":1}}],[\"或\",{\"1\":{\"9\":1,\"10\":1,\"66\":1,\"108\":1,\"365\":1,\"366\":1,\"422\":1,\"427\":1,\"579\":1,\"586\":1,\"589\":1,\"592\":1,\"606\":1}}],[\"msg\",{\"1\":{\"525\":2,\"526\":2,\"551\":1}}],[\"msg2\",{\"1\":{\"418\":2,\"476\":2,\"483\":2,\"524\":2}}],[\"msg1\",{\"1\":{\"418\":2,\"476\":2,\"483\":2,\"524\":2}}],[\"mst\",{\"1\":{\"335\":1}}],[\"mu\",{\"1\":{\"463\":5,\"514\":3,\"515\":5,\"518\":7,\"530\":3,\"531\":6}}],[\"multipartform\",{\"1\":{\"558\":1,\"560\":2}}],[\"multiple\",{\"1\":{\"560\":1}}],[\"multiplexing\",{\"0\":{\"483\":1}}],[\"multiply\",{\"1\":{\"388\":1}}],[\"multiwriter\",{\"1\":{\"276\":1}}],[\"multireader\",{\"1\":{\"275\":1}}],[\"mux\",{\"1\":{\"247\":4,\"256\":3}}],[\"mutex\",{\"0\":{\"514\":1},\"1\":{\"138\":1,\"422\":1,\"461\":1,\"463\":2,\"514\":1,\"518\":1,\"530\":2,\"531\":1}}],[\"more\",{\"1\":{\"575\":1}}],[\"mode=release\",{\"1\":{\"540\":1}}],[\"mode\",{\"1\":{\"540\":2}}],[\"mod文件\",{\"1\":{\"540\":1}}],[\"mod\",{\"1\":{\"540\":1}}],[\"modifyslice\",{\"1\":{\"367\":2}}],[\"modifyarray\",{\"1\":{\"367\":2}}],[\"mongodb\",{\"1\":{\"449\":1}}],[\"mon\",{\"1\":{\"335\":1}}],[\"move\",{\"1\":{\"164\":1,\"165\":1}}],[\"mount\",{\"1\":{\"108\":1}}],[\"md5\",{\"1\":{\"141\":1,\"168\":4,\"169\":4}}],[\"m1\",{\"1\":{\"118\":1}}],[\"m=\",{\"1\":{\"85\":1}}],[\"myfunction\",{\"1\":{\"495\":2}}],[\"myvalue\",{\"1\":{\"492\":1}}],[\"mykey\",{\"1\":{\"492\":2}}],[\"mystruct\",{\"1\":{\"451\":5}}],[\"mysession\",{\"1\":{\"588\":1,\"590\":1}}],[\"myset\",{\"1\":{\"450\":5}}],[\"mysecretkey\",{\"1\":{\"182\":1}}],[\"mymap\",{\"1\":{\"417\":2}}],[\"myint\",{\"1\":{\"396\":15}}],[\"myimage\",{\"1\":{\"65\":1}}],[\"myapp\",{\"1\":{\"318\":1}}],[\"mydir\",{\"1\":{\"317\":3}}],[\"mydata\",{\"1\":{\"107\":2,\"108\":3,\"110\":1,\"112\":3}}],[\"myring\",{\"1\":{\"164\":9,\"165\":1}}],[\"mylist\",{\"1\":{\"162\":10,\"163\":1}}],[\"myqueue\",{\"1\":{\"160\":6}}],[\"mycontainer\",{\"1\":{\"108\":1}}],[\"my\",{\"1\":{\"52\":1,\"62\":2,\"66\":7}}],[\"middlewarefunc\",{\"1\":{\"598\":1,\"599\":1}}],[\"middleware\",{\"1\":{\"540\":1}}],[\"millisecond\",{\"1\":{\"480\":1,\"484\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1}}],[\"min\",{\"1\":{\"305\":3}}],[\"mirrors\",{\"1\":{\"44\":3}}],[\"mirror\",{\"1\":{\"44\":2}}],[\"mixed\",{\"1\":{\"24\":2}}],[\"mv\",{\"1\":{\"26\":2}}],[\"met\",{\"1\":{\"531\":1}}],[\"method=\",{\"1\":{\"254\":1}}],[\"methodpost\",{\"1\":{\"254\":1}}],[\"method\",{\"1\":{\"254\":1,\"299\":1}}],[\"metropolis\",{\"1\":{\"214\":1,\"226\":1}}],[\"message\",{\"1\":{\"23\":3,\"182\":2,\"185\":2,\"283\":1,\"284\":1,\"287\":1,\"289\":1,\"292\":1,\"294\":1,\"295\":1,\"297\":1,\"299\":1,\"309\":4,\"310\":2,\"418\":3,\"450\":2,\"540\":2,\"543\":1,\"545\":1,\"556\":2,\"559\":1,\"560\":1,\"562\":1,\"563\":1,\"567\":1,\"576\":6,\"590\":2,\"598\":4}}],[\"merging\",{\"1\":{\"16\":1}}],[\"merge\",{\"1\":{\"14\":2,\"16\":2,\"18\":1,\"36\":1,\"37\":1}}],[\"m\",{\"1\":{\"23\":2,\"48\":1,\"85\":1,\"396\":7,\"403\":5,\"420\":2,\"421\":6,\"422\":5,\"423\":4,\"455\":1}}],[\"matching\",{\"1\":{\"575\":1}}],[\"math\",{\"0\":{\"300\":1},\"1\":{\"141\":3,\"300\":2,\"301\":8,\"302\":18,\"303\":17,\"304\":11,\"305\":5,\"306\":6,\"423\":6}}],[\"manu\",{\"1\":{\"550\":3}}],[\"many\",{\"1\":{\"356\":1}}],[\"mast\",{\"1\":{\"445\":4,\"446\":3}}],[\"master\",{\"1\":{\"9\":1,\"10\":1}}],[\"maxrefresh\",{\"1\":{\"598\":1,\"599\":1}}],[\"maxworkers\",{\"1\":{\"532\":2}}],[\"max\",{\"1\":{\"305\":3,\"402\":4}}],[\"maxidleconns\",{\"1\":{\"252\":1}}],[\"mapclaims\",{\"1\":{\"598\":3}}],[\"maplen\",{\"1\":{\"421\":1}}],[\"map\",{\"0\":{\"419\":1,\"552\":1},\"1\":{\"211\":1,\"403\":4,\"417\":3,\"419\":3,\"420\":6,\"421\":12,\"422\":6,\"423\":7,\"450\":5,\"455\":3,\"552\":11,\"598\":1,\"599\":1}}],[\"marshaljson\",{\"1\":{\"211\":1}}],[\"marshalindent\",{\"1\":{\"204\":1,\"214\":1,\"218\":1,\"225\":1,\"226\":1}}],[\"marshal\",{\"1\":{\"203\":1,\"211\":2,\"217\":1,\"447\":1}}],[\"marshalecprivatekey\",{\"1\":{\"184\":1}}],[\"marshalling\",{\"1\":{\"179\":1,\"184\":2,\"203\":1,\"204\":1,\"211\":1,\"214\":1,\"217\":1,\"218\":1,\"225\":1,\"226\":1,\"447\":1}}],[\"marshalpkixpublickey\",{\"1\":{\"179\":1,\"184\":1}}],[\"marshalpkcs1privatekey\",{\"1\":{\"179\":1}}],[\"makeadder\",{\"1\":{\"393\":2}}],[\"makemultiplier\",{\"1\":{\"391\":2}}],[\"make\",{\"1\":{\"161\":1,\"177\":1,\"264\":1,\"310\":2,\"361\":5,\"362\":1,\"403\":1,\"417\":1,\"418\":2,\"420\":2,\"423\":1,\"444\":2,\"450\":2,\"455\":1,\"465\":1,\"469\":2,\"472\":1,\"473\":1,\"475\":1,\"476\":2,\"479\":2,\"480\":3,\"481\":1,\"482\":3,\"483\":1,\"484\":1,\"498\":2,\"500\":1,\"501\":1,\"517\":1,\"524\":2,\"525\":1,\"526\":1,\"532\":1,\"533\":1}}],[\"mac\",{\"1\":{\"43\":1,\"48\":2,\"75\":1,\"182\":3}}],[\"macports安装\",{\"1\":{\"31\":1}}],[\"macos官方维护\",{\"1\":{\"31\":1}}],[\"macos\",{\"0\":{\"31\":1},\"1\":{\"48\":1,\"75\":1,\"371\":1}}],[\"main\",{\"1\":{\"9\":1,\"10\":1,\"14\":4,\"17\":1,\"131\":2,\"132\":2,\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"150\":2,\"151\":2,\"152\":2,\"154\":2,\"155\":2,\"157\":2,\"160\":2,\"161\":2,\"162\":2,\"164\":2,\"168\":2,\"169\":2,\"171\":2,\"172\":2,\"174\":2,\"175\":2,\"177\":2,\"179\":2,\"180\":2,\"182\":2,\"184\":2,\"185\":2,\"188\":2,\"189\":2,\"191\":2,\"192\":2,\"194\":2,\"196\":2,\"198\":2,\"200\":2,\"203\":2,\"204\":2,\"206\":2,\"208\":2,\"209\":2,\"211\":2,\"212\":2,\"214\":3,\"217\":2,\"218\":2,\"220\":2,\"222\":2,\"223\":2,\"225\":2,\"226\":3,\"228\":2,\"229\":2,\"231\":3,\"233\":2,\"240\":1,\"241\":1,\"246\":2,\"247\":2,\"249\":2,\"250\":2,\"252\":2,\"254\":2,\"256\":2,\"258\":2,\"260\":2,\"264\":2,\"265\":2,\"268\":2,\"270\":2,\"271\":2,\"273\":2,\"275\":2,\"276\":2,\"278\":2,\"280\":2,\"283\":2,\"284\":2,\"285\":2,\"287\":2,\"288\":2,\"289\":2,\"290\":2,\"292\":2,\"294\":2,\"295\":2,\"297\":2,\"299\":2,\"301\":2,\"302\":10,\"303\":4,\"304\":4,\"305\":2,\"306\":4,\"317\":2,\"322\":1,\"323\":1,\"325\":2,\"327\":4,\"328\":4,\"329\":4,\"333\":2,\"335\":2,\"336\":2,\"338\":2,\"339\":2,\"340\":2,\"342\":2,\"344\":2,\"345\":2,\"346\":2,\"348\":2,\"349\":2,\"351\":2,\"352\":2,\"367\":2,\"384\":1,\"394\":1,\"396\":3,\"416\":8,\"418\":2,\"422\":2,\"423\":2,\"436\":1,\"437\":1,\"446\":2,\"447\":2,\"450\":8,\"451\":4,\"462\":2,\"463\":2,\"464\":2,\"465\":2,\"475\":3,\"476\":1,\"479\":2,\"480\":2,\"481\":2,\"482\":2,\"483\":2,\"484\":2,\"488\":1,\"489\":2,\"490\":2,\"491\":2,\"492\":4,\"501\":3,\"502\":2,\"514\":2,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"524\":2,\"525\":2,\"526\":2,\"530\":2,\"531\":2,\"532\":2,\"533\":3,\"534\":2,\"535\":2,\"540\":5,\"543\":2,\"544\":2,\"545\":2,\"562\":2,\"563\":2,\"564\":2,\"565\":2,\"566\":2,\"567\":2,\"569\":2,\"570\":2,\"571\":2,\"576\":2,\"584\":2,\"588\":2,\"590\":2,\"598\":2,\"602\":2,\"603\":2}}],[\"mkdirall\",{\"1\":{\"317\":2}}],[\"mkdir\",{\"1\":{\"8\":1,\"317\":2,\"540\":1}}],[\"中定义的字段\",{\"1\":{\"606\":1}}],[\"中定义基本路由\",{\"1\":{\"577\":1}}],[\"中验证用户\",{\"1\":{\"599\":1}}],[\"中发送到服务器\",{\"1\":{\"593\":1}}],[\"中包含了一些预定义的标准声明\",{\"1\":{\"592\":1}}],[\"中以\",{\"1\":{\"575\":1}}],[\"中使用\",{\"0\":{\"584\":1,\"588\":1},\"1\":{\"575\":1}}],[\"中使用变量来表示动态的资源标识符或参数\",{\"1\":{\"575\":1}}],[\"中使用多个\",{\"1\":{\"68\":1}}],[\"中并发执行\",{\"1\":{\"494\":1}}],[\"中处理来自多个来源的数据\",{\"1\":{\"480\":1}}],[\"中常量和变量类似\",{\"1\":{\"457\":1}}],[\"中变量可通过\",{\"1\":{\"456\":1}}],[\"中函数可像普通变量一样被传递\",{\"1\":{\"455\":1}}],[\"中函数是对代码封装和重用的基本形式\",{\"1\":{\"385\":1}}],[\"中结构体在内存中的存储是按其字段在结构体中声明的顺序来排列的\",{\"1\":{\"451\":1}}],[\"中结构体标签是一种元数据\",{\"1\":{\"447\":1}}],[\"中是一个非常有用的工具\",{\"1\":{\"450\":1}}],[\"中是通过引用传递数组的\",{\"1\":{\"396\":1}}],[\"中创建结构体实例的几种方式\",{\"1\":{\"444\":1}}],[\"中抛弃了类与继承\",{\"1\":{\"442\":1}}],[\"中相同类型的数据可以使用数组或者切片来存储\",{\"1\":{\"442\":1}}],[\"中支持指针运算\",{\"1\":{\"437\":1}}],[\"中声明一个指针变量需要使用\",{\"1\":{\"433\":1}}],[\"中也提供了指针\",{\"1\":{\"432\":1,\"437\":1}}],[\"中插入了一个键\",{\"1\":{\"423\":1}}],[\"中同时读写同一个\",{\"1\":{\"422\":1}}],[\"中每个元素的索引和值\",{\"1\":{\"416\":1}}],[\"中没有构造方法\",{\"1\":{\"444\":1}}],[\"中没有构造方法的概念\",{\"1\":{\"444\":1}}],[\"中没有\",{\"1\":{\"416\":1}}],[\"中没有提供\",{\"1\":{\"416\":1}}],[\"中没有明确的继承和实现\",{\"1\":{\"408\":1}}],[\"中那样显式使用\",{\"1\":{\"415\":1}}],[\"中非常强大和灵活\",{\"1\":{\"406\":1}}],[\"中接收者不能直接调用属于包的函数\",{\"1\":{\"396\":1}}],[\"中不同的是\",{\"1\":{\"396\":1}}],[\"中方法与函数的区别在于\",{\"1\":{\"396\":1}}],[\"中的声明信息\",{\"1\":{\"593\":1}}],[\"中的会话管理\",{\"0\":{\"580\":1}}],[\"中的语句\",{\"1\":{\"521\":1}}],[\"中的操作开始\",{\"1\":{\"518\":1}}],[\"中的操作按程序顺序执行\",{\"1\":{\"518\":1}}],[\"中的常量计数器\",{\"1\":{\"458\":1}}],[\"中的一个特殊常量\",{\"1\":{\"458\":1}}],[\"中的一切对象继承自\",{\"1\":{\"410\":1}}],[\"中的数据类型分为\",{\"1\":{\"453\":1}}],[\"中的数组是直接存储在内存中的值\",{\"1\":{\"396\":1}}],[\"中的键值对是无序的\",{\"1\":{\"421\":1}}],[\"中的详细解释和用法说明\",{\"1\":{\"418\":1}}],[\"中的访问控制是通过其名称的第一个首字母进行区分的\",{\"1\":{\"397\":1}}],[\"中的\",{\"1\":{\"396\":1,\"416\":2,\"418\":1,\"422\":1,\"518\":2,\"579\":1}}],[\"中的函数功能似乎更加强大\",{\"1\":{\"385\":1}}],[\"中的仓库就是存放\",{\"1\":{\"114\":1}}],[\"中新添加了\",{\"1\":{\"362\":1}}],[\"中还提供了一个切片类型\",{\"1\":{\"353\":1}}],[\"中提供了指针这种类型\",{\"1\":{\"432\":1}}],[\"中提供了数组类型的数据结构\",{\"1\":{\"353\":1}}],[\"中提供的查找功能\",{\"1\":{\"82\":1}}],[\"中读取指定字节数\",{\"1\":{\"278\":1}}],[\"中精确读取\",{\"1\":{\"264\":1}}],[\"中间件保护的路由组\",{\"1\":{\"599\":1}}],[\"中间件配置\",{\"1\":{\"599\":1}}],[\"中间件创建了一个基于\",{\"1\":{\"590\":1}}],[\"中间件来实现\",{\"1\":{\"580\":1}}],[\"中间件可以用于\",{\"1\":{\"546\":1}}],[\"中间件可以用于各种用途\",{\"1\":{\"542\":1}}],[\"中间件处理跨域请求\",{\"1\":{\"545\":1}}],[\"中间件的实现\",{\"1\":{\"545\":1}}],[\"中间件示例\",{\"1\":{\"543\":1,\"544\":1}}],[\"中间件函数接受一个\",{\"1\":{\"543\":1}}],[\"中间件是处理请求的函数\",{\"1\":{\"542\":1}}],[\"中间件是\",{\"1\":{\"542\":1}}],[\"中间件支持\",{\"1\":{\"538\":1}}],[\"中间件\",{\"0\":{\"255\":1,\"542\":1},\"1\":{\"541\":1,\"543\":1,\"544\":2,\"590\":1,\"598\":1}}],[\"中管理自己的镜像时\",{\"1\":{\"115\":1}}],[\"中搜索即可\",{\"1\":{\"82\":1}}],[\"中可以使用\",{\"1\":{\"66\":1}}],[\"中写入如下内容\",{\"1\":{\"44\":1}}],[\"中本地分支没有的数据\",{\"1\":{\"36\":1}}],[\"中修改和添加的功能加入到\",{\"1\":{\"14\":1}}],[\"中\",{\"1\":{\"9\":1,\"29\":3,\"44\":1,\"406\":1,\"423\":2,\"431\":1,\"450\":1,\"497\":1,\"509\":1,\"549\":1,\"557\":1,\"575\":3,\"578\":1,\"591\":1}}],[\"whether\",{\"1\":{\"551\":1,\"552\":1}}],[\"when\",{\"1\":{\"550\":1}}],[\"while\",{\"1\":{\"416\":4}}],[\"wtf\",{\"1\":{\"550\":1}}],[\"warning\",{\"1\":{\"540\":3}}],[\"waitcondition\",{\"1\":{\"531\":3}}],[\"wait\",{\"1\":{\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"479\":1,\"480\":1,\"481\":1,\"484\":1,\"502\":2,\"514\":1,\"515\":1,\"516\":1,\"518\":1,\"530\":1,\"531\":2,\"534\":1}}],[\"waiting\",{\"1\":{\"345\":1}}],[\"waitgroup\",{\"1\":{\"138\":1,\"462\":2,\"463\":2,\"464\":2,\"465\":2,\"479\":2,\"480\":1,\"481\":2,\"484\":3,\"502\":4,\"514\":1,\"515\":1,\"516\":1,\"518\":3,\"530\":4,\"531\":2,\"534\":6,\"535\":1}}],[\"w++\",{\"1\":{\"479\":1,\"481\":1}}],[\"wg\",{\"1\":{\"462\":6,\"463\":6,\"464\":6,\"465\":6,\"479\":6,\"480\":4,\"481\":6,\"484\":10,\"502\":9,\"514\":4,\"515\":6,\"516\":4,\"518\":9,\"530\":4,\"531\":4,\"534\":6}}],[\"wd\",{\"1\":{\"320\":2}}],[\"www\",{\"1\":{\"313\":1,\"378\":1,\"457\":1}}],[\"will\",{\"1\":{\"447\":1}}],[\"width\",{\"1\":{\"388\":2,\"396\":2,\"408\":3,\"409\":1,\"411\":4}}],[\"withvalue\",{\"1\":{\"492\":3}}],[\"withdeadline\",{\"1\":{\"491\":2}}],[\"withtimeout\",{\"1\":{\"490\":2,\"491\":1,\"492\":1}}],[\"withcancel\",{\"1\":{\"489\":2}}],[\"with\",{\"1\":{\"284\":1,\"294\":1,\"295\":1,\"492\":1,\"540\":1,\"551\":1}}],[\"win\",{\"1\":{\"33\":1}}],[\"windows安装\",{\"0\":{\"33\":1}}],[\"windows\",{\"1\":{\"8\":1,\"43\":1,\"48\":3,\"75\":2,\"371\":1}}],[\"w\",{\"1\":{\"246\":2,\"247\":4,\"254\":3,\"256\":4,\"260\":3,\"273\":3,\"479\":3,\"481\":3}}],[\"wrappederr\",{\"1\":{\"384\":2}}],[\"wrapf\",{\"1\":{\"384\":1}}],[\"wrap\",{\"1\":{\"384\":2}}],[\"wronly|os\",{\"1\":{\"292\":1,\"297\":1}}],[\"wrong\",{\"1\":{\"241\":1,\"382\":2,\"384\":1}}],[\"written\",{\"1\":{\"157\":1,\"297\":1}}],[\"writing\",{\"1\":{\"151\":1,\"152\":1,\"191\":1,\"192\":1}}],[\"writetoudp\",{\"1\":{\"310\":1}}],[\"writeheader\",{\"1\":{\"260\":1}}],[\"writeall\",{\"1\":{\"192\":1}}],[\"write\",{\"1\":{\"152\":1,\"182\":1,\"191\":1,\"267\":2,\"273\":1,\"276\":1,\"309\":1,\"310\":1,\"412\":1,\"515\":2}}],[\"writestring\",{\"1\":{\"150\":1,\"151\":1,\"157\":1,\"169\":2,\"172\":2,\"175\":2,\"268\":1,\"271\":1}}],[\"writer\",{\"1\":{\"139\":1,\"150\":3,\"151\":3,\"152\":3,\"157\":3,\"191\":3,\"192\":3,\"209\":1,\"223\":1,\"242\":1,\"265\":1,\"267\":2,\"268\":1,\"271\":3,\"276\":4,\"280\":1,\"412\":2,\"518\":3}}],[\"we\",{\"1\":{\"540\":1}}],[\"weekday\",{\"1\":{\"415\":1}}],[\"weekend\",{\"1\":{\"415\":1}}],[\"went\",{\"1\":{\"241\":1,\"382\":2,\"384\":1}}],[\"welcome\",{\"1\":{\"155\":1,\"157\":1}}],[\"website\",{\"1\":{\"254\":1}}],[\"web应用实例\",{\"0\":{\"117\":1}}],[\"webapp\",{\"1\":{\"54\":1,\"118\":3,\"120\":1}}],[\"web和api服务都连接到front\",{\"1\":{\"52\":1}}],[\"webnet\",{\"1\":{\"51\":3}}],[\"web\",{\"0\":{\"5\":1},\"1\":{\"49\":3,\"51\":1,\"52\":3,\"112\":2,\"117\":1,\"122\":1,\"372\":2,\"373\":1,\"575\":1,\"577\":1,\"580\":2,\"590\":2,\"591\":1,\"596\":1,\"606\":1}}],[\"work\",{\"1\":{\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"517\":1}}],[\"workers\",{\"1\":{\"502\":1,\"534\":1}}],[\"worker\",{\"0\":{\"479\":1},\"1\":{\"475\":3,\"479\":7,\"481\":6,\"501\":3,\"502\":4,\"517\":2,\"532\":7,\"533\":7,\"534\":5}}],[\"workdir\",{\"1\":{\"59\":2,\"62\":2,\"67\":1}}],[\"working\",{\"1\":{\"49\":1,\"320\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"517\":1,\"532\":1,\"533\":1,\"534\":1}}],[\"workspace\",{\"1\":{\"39\":2}}],[\"world应用来演示gin的基本用法\",{\"1\":{\"540\":1}}],[\"world容器样例\",{\"0\":{\"102\":1}}],[\"world\",{\"1\":{\"45\":4,\"84\":3,\"102\":4,\"103\":2,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":1,\"157\":1,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"182\":1,\"237\":4,\"246\":1,\"247\":1,\"256\":1,\"264\":1,\"265\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"275\":1,\"276\":1,\"278\":1,\"280\":2,\"362\":1,\"394\":2,\"540\":5,\"541\":1,\"575\":1}}],[\"注意事项\",{\"0\":{\"68\":1,\"606\":1},\"1\":{\"416\":1,\"575\":1}}],[\"注意\",{\"1\":{\"8\":1,\"11\":1,\"27\":1,\"82\":1,\"88\":1,\"94\":1,\"417\":1}}],[\"所以可以定义一个工厂函数来创建对象\",{\"1\":{\"444\":1}}],[\"所以通过地址来操作数据时\",{\"1\":{\"436\":1}}],[\"所以我们可以像迭代数组和切片那样迭代它\",{\"1\":{\"419\":1}}],[\"所以在声明阶段就尽可能的给定一个可能会用到的容量\",{\"1\":{\"361\":1}}],[\"所以多个分支不需要多个目录\",{\"1\":{\"11\":1}}],[\"所在目录及其子目录会作为构建上下文传递给\",{\"1\":{\"68\":1}}],[\"所在目录下执行构建操作\",{\"1\":{\"66\":1}}],[\"所在目录路径\",{\"1\":{\"64\":1}}],[\"所在的\",{\"1\":{\"64\":1}}],[\"所有未完成的\",{\"1\":{\"502\":1}}],[\"所有派生自该上下文的操作都会收到取消信号\",{\"1\":{\"489\":1}}],[\"所有访问控制以包为基本单位\",{\"1\":{\"397\":1}}],[\"所有开发者共享同一个中央代码库\",{\"1\":{\"29\":1}}],[\"所有有关你的此项目的所有内容和元数据都存放在这里\",{\"1\":{\"8\":1}}],[\"所指向的项目的名称创建你的本地项目目录\",{\"1\":{\"7\":1}}],[\"仓库管理\",{\"0\":{\"114\":1}}],[\"仓库等\",{\"1\":{\"101\":1}}],[\"仓库是集中存放资源的地方\",{\"1\":{\"114\":1}}],[\"仓库是集中存放\",{\"1\":{\"100\":1}}],[\"仓库是用来存储和管理\",{\"1\":{\"78\":1}}],[\"仓库中拉取\",{\"1\":{\"83\":1}}],[\"仓库中下载\",{\"1\":{\"80\":1}}],[\"仓库中下载该镜像\",{\"1\":{\"80\":1}}],[\"仓库中的远程仓库\",{\"1\":{\"35\":1}}],[\"仓库就是存放\",{\"1\":{\"79\":1}}],[\"仓库之间的关系\",{\"0\":{\"79\":1}}],[\"仓库\",{\"0\":{\"77\":1,\"78\":1},\"1\":{\"78\":1,\"134\":1}}],[\"仓库区\",{\"1\":{\"39\":1}}],[\"仓库内容操作\",{\"0\":{\"19\":1}}],[\"仓库了\",{\"1\":{\"8\":1}}],[\"仓库到本地\",{\"1\":{\"6\":1}}],[\"的路由\",{\"1\":{\"599\":1}}],[\"的路径\",{\"1\":{\"65\":1}}],[\"的过期时间和最大刷新时间\",{\"1\":{\"599\":1}}],[\"的密钥\",{\"1\":{\"599\":1}}],[\"的优势\",{\"0\":{\"594\":1}}],[\"的优先级高于加法运算符+\",{\"1\":{\"431\":1}}],[\"的工作流程\",{\"0\":{\"593\":1}}],[\"的工作目录\",{\"1\":{\"8\":1}}],[\"的主体信息\",{\"1\":{\"592\":1}}],[\"的主要特点包括\",{\"1\":{\"371\":1}}],[\"的声明\",{\"1\":{\"592\":1}}],[\"的声明语法如下所示\",{\"1\":{\"420\":1}}],[\"的元数据和签名算法信息\",{\"1\":{\"592\":1}}],[\"的元素的数组\",{\"1\":{\"455\":1}}],[\"的元素\",{\"1\":{\"362\":1}}],[\"的结构\",{\"0\":{\"592\":1}}],[\"的认证和会话控制\",{\"1\":{\"591\":1}}],[\"的会话存储\",{\"1\":{\"590\":1}}],[\"的比较\",{\"0\":{\"589\":1}}],[\"的大小限制通常为\",{\"1\":{\"583\":1}}],[\"的大小正好是\",{\"1\":{\"451\":1}}],[\"的集成\",{\"1\":{\"580\":1}}],[\"的中间件\",{\"1\":{\"577\":1}}],[\"的规范建议我们使用特定的\",{\"1\":{\"574\":1}}],[\"的关键\",{\"1\":{\"546\":1}}],[\"的函数\",{\"1\":{\"543\":1}}],[\"的启动\",{\"1\":{\"518\":1}}],[\"的情况下缓冲一定数量的数据\",{\"1\":{\"500\":1}}],[\"的栈是动态增长的\",{\"1\":{\"496\":1}}],[\"的生命周期\",{\"1\":{\"493\":1}}],[\"的方式来访问传递的数据\",{\"1\":{\"605\":1}}],[\"的方式来检查错误\",{\"1\":{\"383\":1}}],[\"的方法\",{\"1\":{\"568\":1}}],[\"的方法包括使用互斥锁\",{\"1\":{\"466\":1}}],[\"的通道可以实现无锁并发编程\",{\"1\":{\"465\":1}}],[\"的变量\",{\"1\":{\"456\":2}}],[\"的执行顺序\",{\"1\":{\"462\":1,\"466\":1}}],[\"的执行\",{\"1\":{\"455\":1}}],[\"的总大小是\",{\"1\":{\"451\":1}}],[\"的起始位置对齐在\",{\"1\":{\"451\":1}}],[\"的末尾与\",{\"1\":{\"451\":1}}],[\"的偏移量是\",{\"1\":{\"451\":2}}],[\"的指针\",{\"1\":{\"439\":2,\"455\":1}}],[\"的指针算术运算\",{\"1\":{\"437\":1}}],[\"的指针运算案例\",{\"1\":{\"437\":1}}],[\"的内存模型是编写并发安全程序的基础\",{\"1\":{\"519\":1}}],[\"的内存模型主要通过以下规则来保证内存操作的可见性和一致性\",{\"1\":{\"509\":1}}],[\"的内存地址\",{\"1\":{\"434\":1}}],[\"的内容进行构建\",{\"1\":{\"66\":1}}],[\"的地址\",{\"1\":{\"430\":1,\"455\":1}}],[\"的键\",{\"1\":{\"423\":2}}],[\"的键会导致不可预测的行为\",{\"1\":{\"423\":1}}],[\"的键可以是任何支持\",{\"1\":{\"421\":1}}],[\"的并发访问\",{\"1\":{\"422\":1}}],[\"的并发特性使其在数据处理和流处理领域表现出色\",{\"1\":{\"372\":1}}],[\"的零值是\",{\"1\":{\"421\":1}}],[\"的特性\",{\"0\":{\"496\":1,\"583\":1,\"587\":1},\"1\":{\"421\":1}}],[\"的修改会影响到所有引用它的变量\",{\"1\":{\"421\":1}}],[\"的操作\",{\"1\":{\"418\":1}}],[\"的消息先准备好\",{\"1\":{\"418\":1}}],[\"的消息比\",{\"1\":{\"418\":1}}],[\"的发送或接收操作\",{\"1\":{\"418\":1}}],[\"的循环\",{\"1\":{\"416\":1}}],[\"的数据集\",{\"1\":{\"423\":1}}],[\"的数据卷挂载到容器内的\",{\"1\":{\"108\":1}}],[\"的数据卷\",{\"1\":{\"107\":1,\"112\":1}}],[\"的数字\",{\"1\":{\"416\":1}}],[\"的类型选择不同的\",{\"1\":{\"415\":1}}],[\"的类型断言结果\",{\"1\":{\"415\":1}}],[\"的访问控制机制简化了代码结构\",{\"1\":{\"397\":1}}],[\"的所有标识符\",{\"1\":{\"397\":1}}],[\"的接收者类型\",{\"1\":{\"396\":1}}],[\"的错误值\",{\"1\":{\"381\":1,\"383\":1}}],[\"的性能和效率使其适合用于系统级编程和网络服务器开发\",{\"1\":{\"372\":1}}],[\"的语法简洁明了\",{\"1\":{\"371\":1}}],[\"的设计灵感来自\",{\"1\":{\"370\":1}}],[\"的长度\",{\"1\":{\"363\":2}}],[\"的值再赋给\",{\"1\":{\"431\":1}}],[\"的值可以是任何类型\",{\"1\":{\"421\":1}}],[\"的值时\",{\"1\":{\"421\":1}}],[\"的值不再小于\",{\"1\":{\"416\":1}}],[\"的值为\",{\"1\":{\"396\":16}}],[\"的值转换为\",{\"1\":{\"396\":6}}],[\"的值\",{\"1\":{\"363\":1,\"396\":1,\"450\":4}}],[\"的例子\",{\"1\":{\"325\":1}}],[\"的以\",{\"1\":{\"304\":1}}],[\"的自然对数\",{\"1\":{\"304\":1}}],[\"的反正弦\",{\"1\":{\"303\":1}}],[\"的正弦\",{\"1\":{\"303\":1}}],[\"的最大整数\",{\"1\":{\"302\":1}}],[\"的最小整数和小于或等于\",{\"1\":{\"302\":1}}],[\"的最新版本\",{\"1\":{\"83\":1}}],[\"的平方根\",{\"1\":{\"302\":1}}],[\"的取消\",{\"1\":{\"138\":1}}],[\"的一个概述和基本用法示例\",{\"1\":{\"134\":1}}],[\"的端口\",{\"1\":{\"120\":1}}],[\"的运行有一个简单的认识\",{\"1\":{\"101\":1}}],[\"的专有名词\",{\"1\":{\"101\":1}}],[\"的仓库\",{\"1\":{\"100\":1}}],[\"的选项即可\",{\"1\":{\"96\":1}}],[\"的实例d3a11e669e88\",{\"1\":{\"92\":1}}],[\"的镜像信息\",{\"1\":{\"82\":1}}],[\"的基本步骤可以清晰的总结为\",{\"1\":{\"79\":1}}],[\"的编写\",{\"1\":{\"68\":1}}],[\"的文件\",{\"1\":{\"59\":1}}],[\"的文件夹\",{\"1\":{\"8\":1}}],[\"的日常使用提供了基础\",{\"1\":{\"50\":1}}],[\"的配置本质上就是把部署\",{\"1\":{\"49\":1}}],[\"的\",{\"1\":{\"48\":2,\"70\":1,\"119\":1,\"121\":1,\"302\":1,\"304\":1,\"415\":1,\"449\":1,\"549\":1,\"579\":1,\"583\":1,\"599\":1,\"606\":1}}],[\"的二进制执行文件\",{\"1\":{\"45\":1}}],[\"的系统\",{\"1\":{\"44\":1}}],[\"的几乎相同\",{\"1\":{\"43\":1}}],[\"的架构和\",{\"1\":{\"43\":1}}],[\"的简写\",{\"1\":{\"37\":1}}],[\"的目标是提供一种更直观\",{\"1\":{\"27\":1}}],[\"的状态\",{\"1\":{\"27\":1}}],[\"的提示\",{\"1\":{\"25\":1}}],[\"的差别\",{\"1\":{\"22\":1}}],[\"的分支非常轻量级\",{\"1\":{\"29\":1}}],[\"的分支是当前分支\",{\"1\":{\"13\":1}}],[\"的分支\",{\"1\":{\"10\":1,\"12\":1}}],[\"的可变指针\",{\"1\":{\"9\":1}}],[\"u\",{\"1\":{\"539\":1}}],[\"uint64\",{\"1\":{\"399\":1,\"454\":1}}],[\"uint32\",{\"1\":{\"399\":1,\"454\":1}}],[\"uint16\",{\"1\":{\"399\":1,\"454\":1}}],[\"uint8\",{\"1\":{\"399\":1,\"454\":1}}],[\"uint\",{\"1\":{\"399\":1,\"454\":1}}],[\"uintptr\",{\"1\":{\"363\":1}}],[\"uid\",{\"1\":{\"62\":1}}],[\"utc\",{\"1\":{\"351\":2}}],[\"udp\",{\"0\":{\"310\":1},\"1\":{\"120\":2,\"139\":1,\"309\":1,\"310\":7}}],[\"uat\",{\"1\":{\"99\":6}}],[\"uat的最后10行日志\",{\"1\":{\"99\":1}}],[\"uploaded\",{\"1\":{\"559\":1,\"560\":1}}],[\"uploads\",{\"1\":{\"559\":1,\"560\":1}}],[\"upload\",{\"1\":{\"559\":1,\"560\":1}}],[\"update\",{\"1\":{\"56\":1,\"59\":1,\"62\":1,\"85\":3}}],[\"up\",{\"1\":{\"47\":1,\"50\":1}}],[\"use\",{\"1\":{\"543\":1,\"544\":1,\"545\":1,\"588\":1,\"590\":1,\"598\":1}}],[\"user2\",{\"1\":{\"598\":1}}],[\"user1\",{\"1\":{\"598\":1}}],[\"userid\",{\"1\":{\"557\":1}}],[\"usermap\",{\"1\":{\"552\":8}}],[\"username\",{\"1\":{\"66\":1,\"116\":1,\"131\":1,\"552\":1,\"555\":2,\"584\":4,\"588\":5,\"598\":6}}],[\"user\",{\"1\":{\"62\":2,\"99\":6,\"131\":1,\"449\":1,\"544\":2,\"552\":3,\"555\":6,\"557\":2,\"574\":2,\"575\":1,\"590\":6,\"598\":10}}],[\"users会返回\",{\"1\":{\"576\":2}}],[\"users\",{\"1\":{\"8\":1,\"574\":11,\"575\":6,\"576\":6,\"598\":2,\"599\":1}}],[\"using\",{\"1\":{\"299\":1,\"437\":1,\"540\":2}}],[\"usage\",{\"1\":{\"234\":3}}],[\"usr\",{\"1\":{\"48\":1}}],[\"ustc\",{\"1\":{\"44\":2}}],[\"unauthorized\",{\"1\":{\"544\":1,\"598\":1}}],[\"uname\",{\"1\":{\"48\":2}}],[\"unlock\",{\"1\":{\"463\":2,\"514\":1,\"515\":1,\"518\":3,\"530\":1,\"531\":2}}],[\"unlimited\",{\"1\":{\"378\":1}}],[\"unsafe\",{\"1\":{\"437\":2,\"450\":2,\"451\":10}}],[\"unsetenv\",{\"1\":{\"318\":1}}],[\"unexported\",{\"1\":{\"397\":1}}],[\"unmarshaljson\",{\"1\":{\"212\":1}}],[\"unmarshalling\",{\"1\":{\"206\":1,\"212\":1,\"214\":1,\"220\":1,\"226\":1,\"447\":1}}],[\"unmarshal\",{\"1\":{\"206\":1,\"212\":2,\"214\":1,\"220\":1,\"226\":1,\"447\":1}}],[\"unmerged\",{\"1\":{\"17\":2}}],[\"unknown\",{\"1\":{\"132\":1,\"415\":1,\"550\":1}}],[\"unknownchanneltype\",{\"1\":{\"132\":1}}],[\"until\",{\"1\":{\"99\":1}}],[\"unixnano\",{\"1\":{\"306\":2,\"348\":1}}],[\"unix\",{\"1\":{\"43\":1,\"309\":1,\"348\":4,\"349\":3}}],[\"ubuntu20\",{\"1\":{\"85\":2}}],[\"ubuntu\",{\"1\":{\"32\":1,\"56\":2,\"59\":1,\"62\":1,\"85\":6,\"87\":4,\"88\":4,\"90\":2,\"92\":1,\"116\":3}}],[\"url>\",{\"1\":{\"35\":2}}],[\"url\",{\"1\":{\"7\":3,\"35\":5,\"64\":3,\"66\":2,\"256\":1,\"318\":1,\"457\":1,\"549\":1,\"550\":6,\"551\":1,\"552\":1,\"553\":1,\"557\":3,\"568\":2,\"571\":2,\"575\":6,\"579\":5,\"586\":1,\"587\":1,\"589\":1}}],[\"admin\",{\"1\":{\"544\":1,\"592\":1}}],[\"add5\",{\"1\":{\"393\":2}}],[\"adddate\",{\"1\":{\"340\":1}}],[\"addrs\",{\"1\":{\"313\":2}}],[\"addr\",{\"1\":{\"310\":7,\"313\":3}}],[\"address\",{\"1\":{\"214\":6,\"226\":6,\"312\":3}}],[\"addint32\",{\"1\":{\"138\":1,\"464\":1,\"516\":1,\"535\":1}}],[\"addhostkey\",{\"1\":{\"132\":1}}],[\"add\",{\"1\":{\"18\":1,\"20\":3,\"21\":1,\"23\":1,\"27\":1,\"35\":1,\"39\":1,\"62\":2,\"338\":1,\"339\":1,\"342\":2,\"387\":3,\"390\":2,\"393\":1,\"401\":5,\"455\":2,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"479\":1,\"480\":1,\"481\":1,\"484\":2,\"491\":1,\"502\":2,\"514\":1,\"515\":2,\"516\":1,\"518\":1,\"530\":1,\"531\":1,\"534\":1}}],[\"asciijson\",{\"1\":{\"572\":1}}],[\"ascii\",{\"1\":{\"572\":1}}],[\"ascijson\",{\"1\":{\"572\":1}}],[\"assertion\",{\"1\":{\"411\":1}}],[\"asin\",{\"1\":{\"303\":3}}],[\"ai\",{\"1\":{\"378\":1}}],[\"america\",{\"1\":{\"352\":1}}],[\"awake\",{\"1\":{\"344\":1}}],[\"abs\",{\"1\":{\"302\":3}}],[\"about\",{\"1\":{\"247\":2}}],[\"abouthandler\",{\"1\":{\"247\":2}}],[\"abort\",{\"1\":{\"18\":1,\"544\":1}}],[\"action\",{\"1\":{\"575\":6}}],[\"action=\",{\"1\":{\"254\":1}}],[\"acos\",{\"1\":{\"303\":3}}],[\"accept\",{\"1\":{\"132\":4,\"309\":1}}],[\"aux\",{\"1\":{\"212\":4}}],[\"authenticator\",{\"1\":{\"598\":1,\"599\":1}}],[\"authmiddleware\",{\"1\":{\"598\":4,\"599\":1}}],[\"authmethod\",{\"1\":{\"131\":1}}],[\"authorization\",{\"1\":{\"544\":1,\"593\":1,\"598\":1}}],[\"author=\",{\"1\":{\"62\":1}}],[\"authrequired\",{\"1\":{\"544\":5}}],[\"auth\",{\"1\":{\"131\":1,\"544\":6,\"598\":5,\"599\":2,\"600\":1}}],[\"automated\",{\"1\":{\"82\":1}}],[\"automatic\",{\"1\":{\"16\":1}}],[\"auto\",{\"1\":{\"16\":1}}],[\"another\",{\"1\":{\"423\":2}}],[\"anothernan\",{\"1\":{\"423\":3}}],[\"anotherslice\",{\"1\":{\"362\":1}}],[\"an\",{\"1\":{\"415\":1,\"540\":1,\"550\":2}}],[\"any\",{\"1\":{\"400\":2,\"401\":1,\"403\":1,\"575\":3}}],[\"angeles\",{\"1\":{\"191\":1,\"192\":1}}],[\"andresult\",{\"1\":{\"427\":1,\"428\":1}}],[\"and\",{\"1\":{\"16\":1,\"179\":1,\"184\":1,\"294\":1,\"540\":2,\"550\":1}}],[\"age=30\",{\"1\":{\"553\":1}}],[\"age><\",{\"1\":{\"220\":1,\"222\":1,\"228\":1,\"229\":2}}],[\"age\",{\"1\":{\"191\":1,\"192\":1,\"200\":4,\"203\":3,\"204\":3,\"206\":3,\"208\":3,\"209\":3,\"211\":4,\"212\":6,\"214\":3,\"217\":3,\"218\":3,\"220\":2,\"222\":2,\"223\":3,\"225\":3,\"226\":3,\"229\":2,\"231\":8,\"232\":5,\"233\":1,\"234\":2,\"237\":4,\"238\":4,\"240\":2,\"254\":2,\"285\":3,\"288\":3,\"290\":3,\"323\":5,\"325\":2,\"421\":5,\"422\":3,\"430\":2,\"444\":5,\"445\":5,\"446\":14,\"447\":6,\"449\":2,\"455\":1,\"456\":1,\"457\":1,\"552\":1,\"553\":2}}],[\"ago\",{\"1\":{\"92\":1}}],[\"aes\",{\"1\":{\"177\":9}}],[\"after\",{\"1\":{\"162\":1,\"342\":2,\"418\":1,\"522\":1,\"525\":1}}],[\"af9b91fa3cc6\",{\"1\":{\"122\":1,\"123\":1}}],[\"atan\",{\"1\":{\"303\":3}}],[\"at\",{\"1\":{\"246\":1,\"247\":1,\"254\":1,\"256\":1,\"260\":1,\"346\":1,\"551\":1,\"552\":1}}],[\"atomic\",{\"0\":{\"535\":1},\"1\":{\"138\":2,\"461\":1,\"464\":2,\"509\":1,\"516\":2,\"535\":3}}],[\"atoi\",{\"1\":{\"137\":1,\"200\":1,\"327\":2,\"329\":3}}],[\"attached\",{\"1\":{\"540\":1}}],[\"attach\",{\"1\":{\"94\":3}}],[\"aamd64\",{\"1\":{\"118\":1}}],[\"a=\",{\"1\":{\"85\":1}}],[\"are\",{\"1\":{\"534\":1}}],[\"area\",{\"1\":{\"388\":2,\"396\":4,\"407\":1,\"408\":1}}],[\"arithmetic\",{\"1\":{\"437\":1}}],[\"arr\",{\"1\":{\"356\":5,\"357\":11,\"364\":1,\"365\":2,\"367\":7,\"437\":3,\"455\":1}}],[\"array\",{\"1\":{\"356\":1,\"417\":1}}],[\"arraylength\",{\"1\":{\"355\":1,\"356\":1}}],[\"arrayname\",{\"1\":{\"355\":1,\"356\":1}}],[\"arm\",{\"1\":{\"118\":1}}],[\"arguments\",{\"1\":{\"233\":1}}],[\"args\",{\"1\":{\"233\":4,\"234\":1}}],[\"arg\",{\"1\":{\"62\":2,\"65\":1,\"66\":3}}],[\"arch\",{\"1\":{\"32\":1}}],[\"alg\",{\"1\":{\"592\":1}}],[\"already\",{\"1\":{\"540\":1}}],[\"alice\",{\"1\":{\"160\":2,\"162\":1,\"191\":1,\"192\":1,\"203\":1,\"204\":1,\"206\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":1,\"214\":1,\"217\":1,\"218\":1,\"223\":1,\"225\":1,\"226\":1,\"231\":1,\"237\":2,\"240\":2,\"250\":1,\"285\":1,\"288\":1,\"290\":1,\"323\":1,\"325\":1,\"420\":1,\"422\":3,\"444\":1,\"447\":2}}],[\"aliyun\",{\"1\":{\"44\":1}}],[\"alm64\",{\"1\":{\"118\":1}}],[\"all\",{\"1\":{\"91\":1,\"502\":1,\"534\":1,\"540\":1}}],[\"alpine\",{\"1\":{\"49\":2}}],[\"apache2\",{\"1\":{\"70\":1}}],[\"appleboy\",{\"1\":{\"580\":1,\"591\":1,\"597\":2,\"598\":1}}],[\"apple\",{\"1\":{\"450\":3}}],[\"apply\",{\"1\":{\"393\":2}}],[\"application\",{\"1\":{\"250\":1}}],[\"append\",{\"1\":{\"161\":1,\"200\":1,\"229\":1,\"292\":1,\"297\":1,\"362\":12,\"363\":1,\"366\":1,\"401\":1,\"403\":1}}],[\"appuser\",{\"1\":{\"62\":1}}],[\"app\",{\"1\":{\"49\":5,\"54\":1,\"59\":2,\"62\":3,\"66\":7,\"70\":1,\"118\":2,\"120\":1,\"292\":1,\"297\":1}}],[\"api友好\",{\"1\":{\"538\":1}}],[\"api\",{\"0\":{\"574\":1},\"1\":{\"43\":3,\"52\":2,\"138\":1,\"143\":1,\"157\":1,\"166\":1,\"185\":1,\"186\":1,\"200\":2,\"201\":1,\"214\":2,\"215\":1,\"229\":2,\"244\":1,\"260\":1,\"261\":1,\"280\":1,\"281\":1,\"299\":2,\"300\":1,\"306\":3,\"315\":1,\"331\":1,\"352\":2,\"372\":1,\"485\":1,\"492\":1,\"550\":2,\"551\":2,\"552\":2,\"557\":1,\"574\":1,\"596\":1}}],[\"apt\",{\"1\":{\"32\":1,\"56\":2,\"59\":2,\"62\":2,\"85\":2}}],[\"a\",{\"1\":{\"8\":2,\"13\":1,\"23\":2,\"84\":1,\"85\":1,\"91\":2,\"283\":1,\"284\":2,\"287\":1,\"289\":1,\"292\":1,\"294\":1,\"295\":2,\"297\":2,\"299\":1,\"323\":10,\"325\":10,\"387\":3,\"390\":2,\"393\":2,\"399\":4,\"400\":1,\"401\":2,\"402\":4,\"415\":1,\"417\":1,\"423\":3,\"425\":6,\"426\":5,\"428\":6,\"429\":4,\"431\":4,\"451\":13,\"455\":3,\"509\":2,\"540\":1,\"551\":5,\"552\":5}}],[\"创建go模块\",{\"1\":{\"540\":1}}],[\"创建项目目录\",{\"1\":{\"540\":1}}],[\"创建第一个gin项目\",{\"0\":{\"540\":1}}],[\"创建带缓冲的通道\",{\"1\":{\"500\":1}}],[\"创建通道\",{\"0\":{\"498\":1},\"1\":{\"533\":1}}],[\"创建上下文\",{\"0\":{\"487\":1}}],[\"创建结构体实例\",{\"0\":{\"444\":1}}],[\"创建自定义错误\",{\"0\":{\"382\":1}}],[\"创建目录\",{\"1\":{\"317\":1}}],[\"创建文件\",{\"1\":{\"317\":1}}],[\"创建简单的中间件\",{\"0\":{\"256\":1}}],[\"创建环形链表和初始化\",{\"1\":{\"165\":1}}],[\"创建链表和插入操作\",{\"1\":{\"163\":1}}],[\"创建优先队列\",{\"1\":{\"161\":1}}],[\"创建数据卷\",{\"0\":{\"107\":1}}],[\"创建和管理\",{\"1\":{\"133\":1}}],[\"创建和使用数据卷\",{\"0\":{\"106\":1}}],[\"创建和合并分支也很容易\",{\"1\":{\"29\":1}}],[\"创建一个默认的gin路由器\",{\"1\":{\"540\":1}}],[\"创建一个名为main\",{\"1\":{\"540\":1}}],[\"创建一个带有超时的上下文\",{\"1\":{\"492\":1}}],[\"创建一个带缓冲的写入器\",{\"1\":{\"150\":1,\"271\":1}}],[\"创建一个带缓冲的读取器\",{\"1\":{\"145\":1,\"270\":1}}],[\"创建一个可以取消的上下文\",{\"1\":{\"489\":1}}],[\"创建一个空结构体的\",{\"1\":{\"450\":1}}],[\"创建一个固定时区\",{\"1\":{\"351\":1}}],[\"创建一个滴答计时器\",{\"1\":{\"346\":1}}],[\"创建一个定时器\",{\"1\":{\"345\":1}}],[\"创建一个目录\",{\"1\":{\"317\":1}}],[\"创建一个文件\",{\"1\":{\"317\":1}}],[\"创建一个自定义的日志记录器\",{\"1\":{\"292\":1}}],[\"创建一个同步的内存管道\",{\"1\":{\"273\":1}}],[\"创建一个基本的\",{\"1\":{\"246\":1}}],[\"创建一个简单的\",{\"0\":{\"246\":1},\"1\":{\"254\":1}}],[\"创建一个\",{\"1\":{\"188\":1,\"191\":1,\"208\":1,\"209\":1,\"222\":1,\"223\":1,\"275\":1,\"276\":1,\"278\":1,\"280\":1}}],[\"创建一个包含\",{\"1\":{\"165\":1}}],[\"创建一个环形链表\",{\"1\":{\"164\":1}}],[\"创建一个新的目录用于存放我们的项目代码\",{\"1\":{\"540\":1}}],[\"创建一个新的\",{\"1\":{\"169\":1,\"172\":1,\"175\":1,\"177\":1}}],[\"创建一个新的空链表\",{\"1\":{\"163\":1}}],[\"创建一个新的双向链表\",{\"1\":{\"162\":1}}],[\"创建一个新的链表\",{\"1\":{\"160\":1}}],[\"创建一个用于读取输入的扫描器\",{\"1\":{\"154\":1}}],[\"创建一个容器\",{\"1\":{\"118\":1}}],[\"创建一个容器并连接到该网络\",{\"1\":{\"56\":1}}],[\"创建一个该镜像的容器\",{\"1\":{\"85\":1}}],[\"创建挂载点\",{\"1\":{\"62\":1}}],[\"创建另一个容器并连接到该网络\",{\"1\":{\"56\":1}}],[\"创建网络\",{\"0\":{\"55\":1}}],[\"创建后修改名称\",{\"1\":{\"54\":1}}],[\"创建时自定义名称\",{\"1\":{\"54\":1}}],[\"创建并切换分支\",{\"1\":{\"11\":1}}],[\"创建的分支内容和当前所在的分支内容相同\",{\"1\":{\"10\":1}}],[\"创建分支时\",{\"1\":{\"10\":1}}],[\"创建分支\",{\"0\":{\"10\":1}}],[\"创建\",{\"1\":{\"8\":1,\"63\":1}}],[\"创建本地仓库\",{\"0\":{\"8\":1}}],[\"创建版本库\",{\"0\":{\"6\":1}}],[\"会在指定时间后失效\",{\"1\":{\"583\":1}}],[\"会在后续请求中将\",{\"1\":{\"582\":1}}],[\"会在用户请求帮助时显示出来\",{\"1\":{\"232\":1}}],[\"会随机选择一个执行\",{\"1\":{\"527\":1}}],[\"会随机选择其中之一\",{\"1\":{\"418\":1}}],[\"会看到\",{\"1\":{\"518\":1}}],[\"会默认给定对应的\",{\"1\":{\"456\":1}}],[\"会得到以下输出\",{\"1\":{\"451\":1}}],[\"会对结构体字段进行对齐\",{\"1\":{\"451\":1}}],[\"会被解析为\",{\"1\":{\"445\":1}}],[\"会返回\",{\"1\":{\"423\":1,\"575\":1}}],[\"会引发运行时恐慌\",{\"1\":{\"411\":1}}],[\"会修改原值\",{\"1\":{\"396\":1}}],[\"会将接收者的值传入方法中\",{\"1\":{\"396\":1}}],[\"会将此路径及其子目录作为构建的上下文\",{\"1\":{\"64\":1}}],[\"会自动扩容\",{\"1\":{\"362\":1}}],[\"会自动为其进行命名\",{\"1\":{\"54\":1}}],[\"会分配指定大小的内存空间\",{\"1\":{\"361\":1}}],[\"会显示自定义的使用说明信息\",{\"1\":{\"234\":1}}],[\"会输出默认的使用说明信息\",{\"1\":{\"234\":1}}],[\"会话控制示例\",{\"0\":{\"591\":1}}],[\"会话是一种在无状态的\",{\"1\":{\"590\":1}}],[\"会话结束或超时即删除\",{\"1\":{\"589\":1}}],[\"会话数据的生命周期通常是短暂的\",{\"1\":{\"587\":1}}],[\"会话数据存储在服务器上\",{\"1\":{\"587\":1}}],[\"会话标识符可以直接通过\",{\"1\":{\"579\":1}}],[\"会话标识符\",{\"1\":{\"579\":1}}],[\"会话的基本工作原理\",{\"0\":{\"579\":1}}],[\"会话机制通过在客户端和服务器之间传递标识符来维护状态\",{\"1\":{\"578\":1}}],[\"会话\",{\"0\":{\"578\":1},\"1\":{\"133\":1,\"578\":1}}],[\"会话管理器将会话数据存储在服务器端\",{\"1\":{\"579\":1}}],[\"会话管理\",{\"1\":{\"128\":1,\"133\":1,\"579\":1}}],[\"会重用这些缓存层以加快构建速度\",{\"1\":{\"68\":1}}],[\"会执行一条\",{\"1\":{\"49\":1}}],[\"会原封不动的提交\",{\"1\":{\"18\":1}}],[\"会用该分支的最后提交的快照替换你的工作目录的内容\",{\"1\":{\"11\":1}}],[\"会帮我们在当前目录下创建一个\",{\"1\":{\"8\":1}}],[\"会按照你提供的\",{\"1\":{\"7\":1}}],[\"会克隆远程仓库到本地\",{\"1\":{\"7\":1}}],[\"默认支持\",{\"1\":{\"606\":1}}],[\"默认值回去\",{\"1\":{\"550\":1}}],[\"默认值和帮助信息等\",{\"1\":{\"235\":1}}],[\"默认值和帮助信息\",{\"0\":{\"232\":1}}],[\"默认监听8080端口\",{\"1\":{\"540\":1}}],[\"默认零值为\",{\"1\":{\"438\":1}}],[\"默认格式\",{\"1\":{\"238\":1}}],[\"默认为逗号\",{\"1\":{\"194\":1}}],[\"默认使用的仓库为\",{\"1\":{\"100\":1}}],[\"默认开启\",{\"1\":{\"65\":1}}],[\"默认是扩容为当前容量的两倍\",{\"1\":{\"361\":1}}],[\"默认是当前目录下的\",{\"1\":{\"65\":1}}],[\"默认是latest\",{\"1\":{\"45\":1}}],[\"默认是拷贝到当前目录下\",{\"1\":{\"7\":1}}],[\"默认查看所有的分支\",{\"1\":{\"13\":1}}],[\"默认情况下\",{\"1\":{\"7\":1,\"234\":1}}],[\"等方法定义静态\",{\"1\":{\"575\":1}}],[\"等待\",{\"1\":{\"533\":1}}],[\"等待条件变量满足条件\",{\"1\":{\"531\":1}}],[\"等待所有生产者完成\",{\"1\":{\"484\":1}}],[\"等待所有\",{\"1\":{\"479\":1,\"481\":1,\"530\":1,\"532\":1,\"534\":1,\"535\":1}}],[\"等数据格式的映射\",{\"1\":{\"449\":1}}],[\"等数据结构的元素\",{\"1\":{\"417\":1}}],[\"等同于\",{\"1\":{\"429\":1}}],[\"等于\",{\"1\":{\"415\":2,\"426\":1,\"431\":1}}],[\"等语言中函数只能返回一个值不同\",{\"1\":{\"388\":1}}],[\"等操作系统\",{\"1\":{\"371\":1}}],[\"等函数时\",{\"1\":{\"329\":1}}],[\"等哈希算法和对称\",{\"1\":{\"141\":1}}],[\"等协议的支持\",{\"1\":{\"139\":1}}],[\"等命令来进行类似的操作\",{\"1\":{\"27\":1}}],[\"等\",{\"1\":{\"7\":1,\"137\":1,\"238\":1,\"421\":1,\"592\":1}}],[\"cpu\",{\"1\":{\"505\":1,\"512\":1}}],[\"ctx\",{\"1\":{\"487\":1,\"488\":3,\"489\":4,\"490\":4,\"491\":4,\"492\":11,\"550\":4,\"552\":6}}],[\"c2\",{\"1\":{\"480\":3,\"483\":2}}],[\"c1\",{\"1\":{\"480\":3,\"483\":2}}],[\"c语言\",{\"1\":{\"437\":1}}],[\"c++\",{\"1\":{\"385\":1,\"415\":1,\"432\":1,\"437\":2,\"484\":1}}],[\"css\",{\"1\":{\"258\":1}}],[\"csv\",{\"0\":{\"186\":1,\"187\":1,\"190\":1,\"199\":1},\"1\":{\"140\":2,\"186\":3,\"188\":5,\"189\":5,\"191\":5,\"192\":4,\"194\":3,\"196\":4,\"198\":3,\"200\":7}}],[\"claims\",{\"1\":{\"592\":2}}],[\"clear\",{\"1\":{\"362\":2}}],[\"cloud\",{\"0\":{\"608\":1}}],[\"closer\",{\"1\":{\"412\":2}}],[\"close\",{\"1\":{\"131\":1,\"132\":2,\"179\":2,\"180\":2,\"184\":2,\"185\":2,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"194\":1,\"196\":1,\"198\":1,\"200\":1,\"249\":1,\"250\":1,\"252\":1,\"273\":1,\"276\":1,\"309\":1,\"310\":1,\"315\":1,\"317\":2,\"412\":1,\"417\":1,\"450\":1,\"465\":1,\"468\":1,\"474\":1,\"475\":1,\"479\":2,\"480\":2,\"481\":1,\"482\":3,\"484\":1,\"501\":1}}],[\"clone\",{\"1\":{\"7\":2}}],[\"clientversion\",{\"1\":{\"132\":1}}],[\"client\",{\"1\":{\"131\":2,\"252\":4}}],[\"clientconfig\",{\"1\":{\"131\":1}}],[\"creating\",{\"1\":{\"179\":2,\"184\":2,\"191\":1,\"192\":1,\"540\":1}}],[\"create|os\",{\"1\":{\"292\":1,\"297\":1}}],[\"created\",{\"1\":{\"81\":1}}],[\"create\",{\"1\":{\"55\":1,\"107\":2,\"131\":1,\"179\":2,\"184\":2,\"191\":1,\"192\":1,\"276\":1,\"317\":2}}],[\"crypto\",{\"0\":{\"127\":1,\"166\":1},\"1\":{\"128\":1,\"129\":2,\"131\":1,\"132\":1,\"134\":1,\"141\":1,\"166\":2,\"168\":1,\"169\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":3,\"179\":3,\"180\":3,\"182\":2,\"184\":4,\"185\":6}}],[\"city\",{\"1\":{\"191\":1,\"192\":1,\"200\":2,\"214\":3,\"226\":3}}],[\"ciphertext\",{\"1\":{\"177\":7,\"180\":3}}],[\"cipher\",{\"1\":{\"177\":3}}],[\"ci\",{\"1\":{\"71\":1}}],[\"ceil\",{\"1\":{\"302\":3}}],[\"ce\",{\"1\":{\"70\":1}}],[\"centos7\",{\"1\":{\"103\":1}}],[\"centos容器样例\",{\"0\":{\"103\":1}}],[\"centos\",{\"1\":{\"45\":4,\"103\":4}}],[\"current\",{\"1\":{\"320\":1,\"333\":1,\"338\":1,\"339\":1,\"340\":1,\"352\":1}}],[\"curl\",{\"1\":{\"48\":1}}],[\"customvalue\",{\"1\":{\"567\":1}}],[\"custom\",{\"1\":{\"62\":1,\"260\":1,\"292\":1,\"567\":2}}],[\"cmd\",{\"1\":{\"59\":2,\"62\":2,\"67\":1}}],[\"cname\",{\"1\":{\"313\":3}}],[\"cn\",{\"1\":{\"44\":4,\"375\":2}}],[\"c\",{\"1\":{\"43\":1,\"44\":1,\"49\":1,\"345\":1,\"346\":1,\"370\":1,\"385\":1,\"400\":1,\"415\":1,\"417\":2,\"431\":2,\"432\":1,\"437\":3,\"451\":13,\"480\":7,\"483\":3,\"484\":3,\"509\":2,\"540\":2,\"543\":4,\"544\":9,\"545\":2,\"550\":16,\"551\":12,\"552\":6,\"553\":11,\"555\":4,\"556\":4,\"557\":3,\"559\":7,\"560\":4,\"562\":3,\"563\":3,\"564\":3,\"565\":3,\"566\":3,\"567\":4,\"569\":5,\"570\":5,\"571\":6,\"572\":15,\"574\":8,\"575\":17,\"576\":8,\"584\":7,\"588\":7,\"590\":7,\"598\":6,\"603\":2,\"605\":1}}],[\"cancel\",{\"1\":{\"489\":2,\"490\":2,\"491\":2,\"492\":2}}],[\"cancelled\",{\"1\":{\"489\":1,\"492\":1}}],[\"cap\",{\"1\":{\"363\":1}}],[\"case\",{\"1\":{\"132\":1,\"229\":1,\"415\":14,\"418\":12,\"476\":2,\"483\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"521\":2,\"522\":5,\"524\":2,\"525\":3,\"526\":1,\"527\":1}}],[\"cache\",{\"1\":{\"65\":1,\"66\":1,\"68\":1}}],[\"cached\",{\"1\":{\"22\":1,\"25\":2}}],[\"cat\",{\"1\":{\"17\":1}}],[\"ch2\",{\"1\":{\"418\":7,\"476\":3,\"522\":2,\"524\":4}}],[\"ch1\",{\"1\":{\"418\":6,\"476\":3,\"522\":2,\"524\":4}}],[\"ch\",{\"1\":{\"417\":6,\"455\":6,\"465\":7,\"469\":1,\"470\":2,\"472\":3,\"473\":3,\"474\":2,\"475\":8,\"498\":1,\"499\":2,\"500\":1,\"501\":8,\"525\":3,\"526\":2}}],[\"chdir\",{\"1\":{\"320\":2}}],[\"character\",{\"1\":{\"417\":1}}],[\"char\",{\"1\":{\"417\":2}}],[\"charlie\",{\"1\":{\"162\":1,\"323\":1,\"325\":1,\"444\":1}}],[\"chan<\",{\"1\":{\"479\":1,\"480\":1,\"484\":1}}],[\"changeperson\",{\"1\":{\"446\":4}}],[\"changeslicelength\",{\"1\":{\"363\":4}}],[\"changeslicevalue\",{\"1\":{\"363\":2}}],[\"changes\",{\"1\":{\"17\":1,\"25\":1}}],[\"chan\",{\"1\":{\"132\":1,\"417\":1,\"418\":2,\"450\":1,\"455\":2,\"465\":2,\"469\":1,\"472\":1,\"473\":1,\"475\":2,\"476\":2,\"479\":3,\"480\":6,\"481\":2,\"482\":8,\"483\":2,\"484\":2,\"498\":1,\"500\":1,\"501\":2,\"517\":2,\"524\":2,\"525\":1,\"526\":1,\"532\":2,\"533\":2}}],[\"channels\",{\"0\":{\"517\":1},\"1\":{\"371\":2,\"461\":1,\"480\":2}}],[\"channel\",{\"0\":{\"467\":1},\"1\":{\"132\":9,\"417\":2,\"418\":1,\"450\":2,\"455\":2,\"467\":1,\"483\":2,\"494\":1,\"497\":1}}],[\"channeltype\",{\"1\":{\"132\":1,\"455\":2}}],[\"chans\",{\"1\":{\"132\":2}}],[\"checkout\",{\"1\":{\"7\":1,\"11\":3,\"27\":1}}],[\"cookie\",{\"0\":{\"581\":1,\"582\":1,\"583\":1,\"584\":1,\"589\":1},\"1\":{\"579\":7,\"582\":2,\"583\":11,\"584\":9,\"586\":1,\"587\":2,\"588\":3,\"589\":3,\"590\":5}}],[\"cors\",{\"0\":{\"545\":1},\"1\":{\"545\":5}}],[\"coroutine\",{\"0\":{\"506\":1}}],[\"collection\",{\"1\":{\"416\":1}}],[\"count++\",{\"1\":{\"416\":1,\"462\":1,\"463\":1,\"514\":1,\"515\":1,\"530\":1}}],[\"count\",{\"1\":{\"416\":6,\"462\":4,\"463\":4,\"464\":4,\"465\":4,\"514\":3,\"515\":4,\"516\":4,\"530\":3,\"535\":4}}],[\"could\",{\"1\":{\"132\":1}}],[\"coder\",{\"1\":{\"445\":4,\"446\":3}}],[\"codermast1\",{\"1\":{\"54\":2}}],[\"codermast\",{\"1\":{\"8\":6,\"54\":1,\"55\":1,\"56\":6,\"62\":1,\"85\":4,\"87\":4,\"88\":4,\"90\":2,\"92\":1,\"95\":6,\"98\":2,\"100\":2,\"116\":3,\"430\":1,\"455\":1,\"456\":2,\"457\":1}}],[\"code\",{\"1\":{\"319\":1,\"377\":1,\"540\":1,\"572\":12,\"598\":4}}],[\"cos\",{\"1\":{\"303\":3}}],[\"copy\",{\"1\":{\"59\":2,\"62\":2,\"67\":1,\"132\":1,\"139\":1,\"265\":1,\"273\":1,\"275\":1,\"278\":1,\"280\":1}}],[\"complex128\",{\"1\":{\"454\":1}}],[\"complex64\",{\"1\":{\"454\":1}}],[\"comparable\",{\"1\":{\"402\":4,\"403\":1}}],[\"compose可以作为一个简单的部署工具\",{\"1\":{\"52\":1}}],[\"compose主要用于开发环境\",{\"1\":{\"52\":1}}],[\"compose进行部署\",{\"1\":{\"52\":1}}],[\"compose会在运行时使用该值\",{\"1\":{\"52\":1}}],[\"compose允许您通过环境变量或\",{\"1\":{\"52\":1}}],[\"compose允许您定义和使用自己的网络\",{\"1\":{\"51\":1}}],[\"compose中\",{\"1\":{\"52\":2}}],[\"compose高级应用\",{\"0\":{\"52\":1}}],[\"compose项目的核心\",{\"1\":{\"51\":1}}],[\"compose文件结构\",{\"0\":{\"51\":1}}],[\"compose的常见命令包括\",{\"1\":{\"50\":1}}],[\"compose基本命令\",{\"0\":{\"50\":1}}],[\"compose样例\",{\"0\":{\"49\":1}}],[\"compose安装\",{\"0\":{\"48\":1}}],[\"compose简介\",{\"0\":{\"47\":1}}],[\"compose\",{\"0\":{\"46\":1,\"112\":1},\"1\":{\"43\":1,\"47\":6,\"48\":7,\"49\":1,\"50\":5,\"51\":4,\"56\":1,\"112\":1}}],[\"communication\",{\"1\":{\"418\":1}}],[\"communicationcase2\",{\"1\":{\"418\":1}}],[\"communicationcase1\",{\"1\":{\"418\":2}}],[\"community\",{\"1\":{\"70\":1}}],[\"comma\",{\"1\":{\"194\":1}}],[\"command\",{\"1\":{\"49\":1}}],[\"committed\",{\"1\":{\"17\":1}}],[\"commit\",{\"1\":{\"16\":1,\"18\":1,\"20\":2,\"22\":1,\"23\":2,\"24\":1,\"25\":1,\"39\":1,\"85\":1}}],[\"commits\",{\"1\":{\"9\":1}}],[\"com\",{\"1\":{\"29\":1,\"33\":2,\"44\":6,\"48\":1,\"62\":2,\"66\":1,\"75\":3,\"82\":1,\"249\":1,\"250\":1,\"252\":1,\"308\":2,\"313\":2,\"315\":1,\"377\":1,\"378\":1,\"384\":1,\"457\":1,\"539\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":3,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"580\":2,\"584\":1,\"588\":4,\"590\":5,\"591\":1,\"597\":2,\"598\":2,\"602\":1,\"603\":1}}],[\"cond\",{\"1\":{\"531\":3}}],[\"condition2\",{\"1\":{\"414\":3}}],[\"condition1\",{\"1\":{\"414\":3}}],[\"condition\",{\"0\":{\"462\":1,\"531\":1},\"1\":{\"414\":5,\"416\":4,\"459\":1,\"531\":1}}],[\"consumer\",{\"0\":{\"484\":1},\"1\":{\"484\":3}}],[\"const\",{\"1\":{\"457\":4,\"458\":2,\"479\":2,\"532\":1}}],[\"concurrency\",{\"0\":{\"460\":1},\"1\":{\"459\":1}}],[\"converted\",{\"1\":{\"327\":4,\"328\":4,\"329\":2}}],[\"conn\",{\"1\":{\"132\":5,\"309\":10,\"310\":7,\"314\":3,\"315\":2}}],[\"connection\",{\"1\":{\"132\":3}}],[\"config\",{\"1\":{\"131\":2,\"132\":5,\"540\":1}}],[\"conflicts\",{\"1\":{\"16\":1}}],[\"conflict\",{\"1\":{\"16\":2}}],[\"contrib\",{\"1\":{\"545\":2,\"580\":1,\"588\":3,\"590\":4}}],[\"control\",{\"1\":{\"529\":1}}],[\"context\",{\"0\":{\"485\":1},\"1\":{\"138\":1,\"485\":2,\"487\":3,\"488\":3,\"489\":6,\"490\":6,\"491\":6,\"492\":14,\"493\":2,\"540\":1,\"543\":3,\"544\":3,\"545\":1,\"550\":4,\"551\":4,\"552\":4,\"553\":3,\"555\":1,\"556\":1,\"557\":1,\"559\":1,\"560\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":2,\"570\":2,\"571\":2,\"574\":4,\"575\":6,\"576\":4,\"584\":2,\"588\":2,\"590\":2,\"598\":3,\"603\":1}}],[\"contenttype\",{\"1\":{\"572\":1}}],[\"contents\",{\"1\":{\"160\":1,\"162\":2,\"164\":1}}],[\"content\",{\"1\":{\"16\":1}}],[\"continue\",{\"1\":{\"132\":2,\"198\":1}}],[\"container\",{\"0\":{\"158\":1},\"1\":{\"97\":1,\"137\":1,\"158\":2,\"159\":1,\"160\":2,\"161\":2,\"162\":3,\"163\":1,\"164\":3,\"165\":1}}],[\"cd\",{\"1\":{\"8\":1,\"71\":1,\"540\":1}}],[\"如用户身份验证\",{\"1\":{\"596\":1}}],[\"如对\",{\"1\":{\"574\":1}}],[\"如验证用户身份\",{\"1\":{\"542\":1}}],[\"如互斥锁\",{\"1\":{\"509\":1}}],[\"如何与内存进行交互\",{\"1\":{\"508\":1}}],[\"如爬虫\",{\"1\":{\"506\":1}}],[\"如高并发网络服务器\",{\"1\":{\"506\":1}}],[\"如多线程服务器\",{\"1\":{\"505\":1}}],[\"如管道\",{\"1\":{\"504\":1}}],[\"如参数变量\",{\"1\":{\"453\":1}}],[\"如布尔型\",{\"1\":{\"421\":1}}],[\"如下所示\",{\"1\":{\"362\":1,\"445\":1}}],[\"如快速排序\",{\"1\":{\"321\":1}}],[\"如创建\",{\"1\":{\"105\":1}}],[\"如未能成功运行\",{\"1\":{\"101\":1}}],[\"如拉取\",{\"1\":{\"83\":1}}],[\"如安装依赖\",{\"1\":{\"67\":1}}],[\"如开发\",{\"1\":{\"52\":1}}],[\"如时间戳和文件大小\",{\"1\":{\"29\":1}}],[\"如果验证成功\",{\"1\":{\"593\":1}}],[\"如果还不了解\",{\"1\":{\"591\":1}}],[\"如果不设置有效期\",{\"1\":{\"583\":1}}],[\"如果不存在则返回空字符串数组\",{\"1\":{\"551\":1}}],[\"如果不存在则返回\",{\"1\":{\"550\":1}}],[\"如果不存在则插入\",{\"1\":{\"421\":1}}],[\"如果不存在\",{\"1\":{\"45\":1}}],[\"如果客户端发送的是表单数据\",{\"1\":{\"556\":1}}],[\"如果客户端发送的是\",{\"1\":{\"555\":1}}],[\"如果参数不存在\",{\"1\":{\"552\":1}}],[\"如果一秒内没有接收到数据\",{\"1\":{\"525\":1}}],[\"如果一秒内没有任何通道操作成功\",{\"1\":{\"522\":1}}],[\"如果一个通道关闭且仍有数据在缓冲区中\",{\"1\":{\"527\":1}}],[\"如果一个操作\",{\"1\":{\"511\":1}}],[\"如果一个镜像创建了多个容器\",{\"1\":{\"84\":1}}],[\"如果操作\",{\"1\":{\"509\":1}}],[\"如果主程序退出\",{\"1\":{\"502\":1}}],[\"如果这个函数有返回值\",{\"1\":{\"494\":1}}],[\"如果省略了值则表示和上面一行的值相同\",{\"1\":{\"457\":1}}],[\"如果省略字段名\",{\"1\":{\"444\":1}}],[\"如果它们支持比较操作\",{\"1\":{\"423\":1}}],[\"如果它们的所有字段都是可比较的类型\",{\"1\":{\"423\":1}}],[\"如果在多个\",{\"1\":{\"422\":1}}],[\"如果在切换分支之前对当前分支的工作目录做了一些修改\",{\"1\":{\"11\":1}}],[\"如果将一个\",{\"1\":{\"421\":1}}],[\"如果键不存在\",{\"1\":{\"421\":1}}],[\"如果多个\",{\"1\":{\"418\":1}}],[\"如果类型断言失败\",{\"1\":{\"411\":1}}],[\"如果想访问其内部的数据\",{\"1\":{\"397\":1}}],[\"如果要是通过指针调用会如何呢\",{\"1\":{\"396\":1}}],[\"如果要是想拉取指定版本时可以进行如下执行\",{\"1\":{\"83\":1}}],[\"如果没有数据接收\",{\"1\":{\"526\":1}}],[\"如果没有任何通道操作成功\",{\"1\":{\"522\":1}}],[\"如果没有任何\",{\"1\":{\"418\":1}}],[\"如果没有错误\",{\"1\":{\"383\":1}}],[\"如果没有更改\",{\"1\":{\"68\":1}}],[\"如果错误值为\",{\"1\":{\"381\":1}}],[\"如果完全按照如上步骤进行操作\",{\"1\":{\"375\":1}}],[\"如果您已经配好环境\",{\"1\":{\"374\":1}}],[\"如果您对\",{\"1\":{\"73\":1}}],[\"如果有多个\",{\"1\":{\"527\":1}}],[\"如果有多个容器之间需要互相连接\",{\"1\":{\"56\":1}}],[\"如果有相同类型的字段\",{\"1\":{\"443\":1}}],[\"如果有问题\",{\"1\":{\"381\":1}}],[\"如果有足够的容量\",{\"1\":{\"362\":1}}],[\"如果切片的容量不足\",{\"1\":{\"362\":1}}],[\"如果所添加的数据超过该容量\",{\"1\":{\"361\":1}}],[\"如果数组长度不确定\",{\"1\":{\"356\":1}}],[\"如果转换失败会返回一个错误\",{\"1\":{\"329\":1}}],[\"如果需要处理文件上传或其他类型的多部分表单数据\",{\"1\":{\"558\":1}}],[\"如果需要获取数组的子数组\",{\"1\":{\"357\":1}}],[\"如果需要更详细的信息\",{\"1\":{\"134\":1}}],[\"如果需要对开发者限制各种权限的建议使用svn\",{\"1\":{\"29\":1}}],[\"如果出现这种情况\",{\"1\":{\"84\":1}}],[\"如果\",{\"1\":{\"66\":1,\"415\":1}}],[\"如果未安装\",{\"1\":{\"56\":1}}],[\"如果文件不存在请新建该文件\",{\"1\":{\"44\":1}}],[\"如果本地分支和远程分支内容有差异\",{\"1\":{\"38\":1}}],[\"如果本地分支名与远程分支名相同\",{\"1\":{\"38\":1}}],[\"如果是远程分支和当前分支进行合并\",{\"1\":{\"37\":1}}],[\"如果中央代码库损坏或丢失\",{\"1\":{\"29\":1}}],[\"如果新文件名已经存在\",{\"1\":{\"26\":1}}],[\"如果删除之前修改过并且已经放到暂存区域的话\",{\"1\":{\"25\":1}}],[\"如果只是简单地从工作目录中手工删除文件\",{\"1\":{\"25\":1}}],[\"如果你还没有安装go\",{\"1\":{\"539\":1}}],[\"如果你确实需要进行类似于\",{\"1\":{\"437\":1}}],[\"如果你有一个包含\",{\"1\":{\"423\":1}}],[\"如果你定义的数组长度大于你给定的数据列表\",{\"1\":{\"356\":1}}],[\"如果你想要定义自己的错误类型\",{\"1\":{\"380\":1}}],[\"如果你想要一个不一样的名字\",{\"1\":{\"7\":1}}],[\"如果你想将文件\",{\"1\":{\"27\":1}}],[\"如果你已经使用\",{\"1\":{\"27\":1}}],[\"如果你使用的是较早版本的\",{\"1\":{\"27\":1}}],[\"如果你使用\",{\"1\":{\"8\":1}}],[\"如\",{\"1\":{\"7\":1,\"101\":1,\"136\":1,\"138\":2,\"139\":3,\"141\":2,\"258\":1,\"372\":1,\"411\":1,\"445\":1,\"450\":1,\"453\":1,\"496\":1,\"506\":1,\"545\":1,\"580\":2}}],[\"在模板文件中\",{\"1\":{\"605\":1}}],[\"在处理函数中使用\",{\"1\":{\"605\":1}}],[\"在处理表单提交时解析表单数据\",{\"1\":{\"254\":1}}],[\"在某些情况下\",{\"1\":{\"579\":1}}],[\"在某些应用场景下非常实用\",{\"1\":{\"432\":1}}],[\"在后续的请求中\",{\"1\":{\"579\":1}}],[\"在后续的章节中会一一解决这些问题\",{\"1\":{\"101\":1}}],[\"在后续的章节中会进行详细说明\",{\"1\":{\"56\":1}}],[\"在路由定义中\",{\"1\":{\"575\":1}}],[\"在路由章节也有提及\",{\"1\":{\"557\":1}}],[\"在gin框架中\",{\"1\":{\"575\":1}}],[\"在go中创建自定义错误通常很简单\",{\"1\":{\"382\":1}}],[\"在go中\",{\"1\":{\"380\":1,\"383\":1}}],[\"在go语言中是合法的\",{\"1\":{\"431\":1}}],[\"在go语言中\",{\"1\":{\"230\":1,\"316\":1,\"379\":1,\"410\":1,\"417\":1,\"467\":1}}],[\"在go语言标准库中\",{\"1\":{\"158\":1}}],[\"在绑定失败时自动返回\",{\"1\":{\"553\":1}}],[\"在项目目录中\",{\"1\":{\"540\":3}}],[\"在项目目录下创建一个\",{\"1\":{\"258\":1}}],[\"在开始使用gin之前\",{\"1\":{\"539\":1}}],[\"在实际的请求发送中\",{\"1\":{\"575\":1}}],[\"在实际的开发中\",{\"1\":{\"397\":1}}],[\"在实际使用中\",{\"1\":{\"535\":1}}],[\"在操作\",{\"1\":{\"509\":2}}],[\"在单个\",{\"1\":{\"509\":1}}],[\"在函数调用前加上\",{\"1\":{\"494\":1}}],[\"在函数内部对切片的修改会影响外部的原始切片\",{\"1\":{\"366\":1}}],[\"在并发任务之间进行协调\",{\"1\":{\"477\":1}}],[\"在并发编程中\",{\"1\":{\"459\":1,\"508\":1}}],[\"在第一次使用\",{\"1\":{\"458\":1}}],[\"在计算机中\",{\"1\":{\"456\":1}}],[\"在编译后会自动进行解引用\",{\"1\":{\"445\":1}}],[\"在编写需要处理用户输入\",{\"1\":{\"330\":1}}],[\"在获取\",{\"1\":{\"421\":1}}],[\"在所有这些情况下\",{\"1\":{\"417\":1}}],[\"在正式了解泛型之前先看一个经常在开发中遇到的问题\",{\"1\":{\"399\":1}}],[\"在前面\",{\"1\":{\"396\":1}}],[\"在方法内修改形参的值\",{\"1\":{\"396\":1}}],[\"在方法被调用时\",{\"1\":{\"396\":1}}],[\"在错误链上包装更多信息\",{\"1\":{\"384\":1}}],[\"在调用这个函数后\",{\"1\":{\"381\":1}}],[\"在多个领域得到了广泛应用\",{\"1\":{\"372\":1}}],[\"在声明结构体内部的字段时\",{\"1\":{\"443\":1}}],[\"在声明数组后\",{\"1\":{\"356\":1}}],[\"在声明阶段就需要指定数组长度和数组的数据类型\",{\"1\":{\"355\":1}}],[\"在年\",{\"1\":{\"340\":1}}],[\"在已排序的集合中搜索元素\",{\"1\":{\"325\":1}}],[\"在读取和写入过程中处理错误\",{\"1\":{\"198\":1}}],[\"在示例中\",{\"1\":{\"165\":1}}],[\"在环形链表中轮转一次\",{\"1\":{\"164\":1}}],[\"在链表头部添加元素\",{\"1\":{\"162\":1}}],[\"在链表尾部添加元素\",{\"1\":{\"162\":1}}],[\"在堆中的索引\",{\"1\":{\"161\":1}}],[\"在端口后面加上\",{\"1\":{\"120\":1}}],[\"在之前的章节中\",{\"1\":{\"117\":1}}],[\"在需要使用\",{\"1\":{\"115\":1}}],[\"在运行容器时\",{\"1\":{\"108\":1}}],[\"在本章节中的所有关于\",{\"1\":{\"101\":1}}],[\"在本地工作区上进行二次创作\",{\"1\":{\"39\":1}}],[\"在本地仓库进行操作\",{\"1\":{\"7\":1}}],[\"在容器停止运行后\",{\"1\":{\"97\":1}}],[\"在退出容器终端后\",{\"1\":{\"94\":2}}],[\"在新容器内指定一个伪终端或终端\",{\"1\":{\"90\":1}}],[\"在镜像导入之前\",{\"1\":{\"88\":1}}],[\"在该容器内运行\",{\"1\":{\"85\":1}}],[\"在该样例中我们定义了\",{\"1\":{\"49\":1}}],[\"在学习本小节之前\",{\"1\":{\"101\":1}}],[\"在学习\",{\"1\":{\"73\":1}}],[\"在性能上大大高于普通虚拟机\",{\"1\":{\"72\":1}}],[\"在宿主机的基础上\",{\"1\":{\"72\":1}}],[\"在上下文中添加值\",{\"1\":{\"492\":1}}],[\"在上述例子中\",{\"1\":{\"231\":1}}],[\"在上述示例中\",{\"1\":{\"163\":1}}],[\"在上面的例子中\",{\"1\":{\"120\":1}}],[\"在上面的\",{\"1\":{\"89\":1}}],[\"在上面的示例中\",{\"1\":{\"59\":1}}],[\"在上一个章节中我们学习了\",{\"1\":{\"53\":1}}],[\"在空目录下\",{\"1\":{\"59\":1}}],[\"在执行之前请确保安装了该指令工具\",{\"1\":{\"56\":1}}],[\"在创建一个容器的时候\",{\"1\":{\"54\":1}}],[\"在这个函数中\",{\"1\":{\"599\":1}}],[\"在这个例子中\",{\"1\":{\"52\":1,\"415\":1,\"445\":1,\"475\":1,\"501\":1}}],[\"在这个配置中\",{\"1\":{\"52\":1}}],[\"在这个示例中\",{\"1\":{\"51\":1,\"325\":1,\"418\":1,\"462\":1,\"465\":1,\"518\":1,\"525\":1,\"526\":1,\"544\":1,\"576\":1,\"590\":1}}],[\"在docker\",{\"1\":{\"51\":1,\"52\":2}}],[\"在部署应用时\",{\"1\":{\"46\":1}}],[\"在启动的容器里执行的命令以上命令\",{\"1\":{\"45\":1}}],[\"在设置中的\",{\"1\":{\"44\":1}}],[\"在国内访问不稳定\",{\"1\":{\"44\":1}}],[\"在使用上\",{\"1\":{\"353\":1}}],[\"在使用\",{\"1\":{\"79\":1,\"94\":1,\"232\":1,\"329\":1,\"450\":1}}],[\"在使用时我们需要拉取\",{\"1\":{\"44\":1}}],[\"在使用添加指令向暂存区添加文件后\",{\"1\":{\"21\":1}}],[\"在同一系统上运行\",{\"1\":{\"43\":1}}],[\"在分支管理方面比\",{\"1\":{\"29\":1}}],[\"在下次\",{\"1\":{\"20\":1}}],[\"在未加任何参数的时候\",{\"1\":{\"13\":1}}],[\"在当前执行目录下初始化仓库\",{\"1\":{\"8\":1}}],[\"在\",{\"0\":{\"584\":1,\"588\":1},\"1\":{\"6\":1,\"9\":1,\"29\":1,\"66\":1,\"82\":1,\"103\":1,\"112\":1,\"143\":1,\"166\":1,\"186\":1,\"201\":1,\"215\":1,\"236\":1,\"238\":1,\"244\":1,\"261\":1,\"281\":1,\"300\":1,\"321\":1,\"326\":1,\"331\":1,\"353\":1,\"361\":1,\"362\":1,\"364\":1,\"385\":1,\"396\":2,\"406\":1,\"408\":1,\"418\":1,\"419\":1,\"423\":1,\"432\":1,\"433\":1,\"437\":2,\"442\":1,\"447\":1,\"450\":1,\"451\":1,\"455\":4,\"456\":1,\"477\":1,\"485\":1,\"493\":1,\"497\":1,\"502\":1,\"521\":1,\"554\":1,\"557\":1,\"561\":1,\"575\":3,\"578\":1,\"580\":1,\"590\":2,\"591\":1,\"601\":1,\"604\":1}}],[\"given\",{\"1\":{\"551\":4,\"552\":3}}],[\"ginjwtmiddleware\",{\"1\":{\"598\":1,\"599\":1}}],[\"gin支持中间件机制\",{\"1\":{\"538\":1}}],[\"gin提供了简洁的api\",{\"1\":{\"538\":1}}],[\"gin的性能非常出色\",{\"1\":{\"538\":1}}],[\"gin是一个用go语言编写的轻量级\",{\"1\":{\"538\":1}}],[\"gin\",{\"0\":{\"537\":1,\"547\":1,\"580\":1,\"584\":1,\"588\":1,\"591\":1},\"1\":{\"372\":1,\"539\":2,\"540\":16,\"541\":2,\"542\":2,\"543\":9,\"544\":11,\"545\":7,\"546\":3,\"550\":3,\"551\":6,\"552\":3,\"553\":7,\"554\":1,\"555\":2,\"556\":2,\"557\":3,\"559\":3,\"560\":2,\"561\":1,\"562\":5,\"563\":5,\"564\":5,\"565\":4,\"566\":4,\"567\":5,\"568\":1,\"569\":5,\"570\":5,\"571\":7,\"572\":4,\"574\":8,\"575\":13,\"576\":11,\"577\":3,\"580\":5,\"584\":6,\"588\":8,\"590\":13,\"591\":3,\"597\":2,\"598\":9,\"601\":1,\"602\":3,\"603\":5,\"605\":1,\"606\":4}}],[\"github\",{\"1\":{\"48\":1,\"66\":1,\"82\":1,\"100\":2,\"114\":1,\"134\":1,\"384\":1,\"539\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":3,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"580\":2,\"584\":1,\"588\":4,\"590\":5,\"591\":1,\"597\":2,\"598\":2,\"602\":1,\"603\":1}}],[\"git安装\",{\"0\":{\"30\":1}}],[\"git特点\",{\"1\":{\"29\":1}}],[\"git是一个开源的分布式版本控制系统\",{\"1\":{\"29\":1}}],[\"git是一款免费\",{\"1\":{\"29\":1}}],[\"git介绍\",{\"0\":{\"29\":1}}],[\"git\",{\"0\":{\"6\":1,\"9\":1,\"19\":1,\"28\":1,\"34\":1,\"39\":1,\"40\":1},\"1\":{\"6\":2,\"7\":7,\"8\":12,\"9\":2,\"10\":2,\"11\":5,\"12\":1,\"13\":2,\"14\":2,\"15\":2,\"17\":1,\"18\":6,\"20\":4,\"21\":3,\"22\":4,\"23\":3,\"24\":3,\"25\":5,\"26\":2,\"27\":13,\"29\":10,\"31\":3,\"32\":2,\"33\":3,\"35\":11,\"36\":2,\"37\":7,\"38\":6,\"39\":2,\"66\":1}}],[\"groups\",{\"1\":{\"576\":1}}],[\"group\",{\"0\":{\"576\":1},\"1\":{\"544\":1,\"575\":1,\"576\":2,\"598\":1}}],[\"griesemer\",{\"1\":{\"370\":1}}],[\"grep\",{\"1\":{\"99\":1}}],[\"guest\",{\"1\":{\"231\":1,\"232\":2,\"234\":1}}],[\"generator\",{\"1\":{\"480\":4,\"482\":2,\"483\":3}}],[\"generated\",{\"1\":{\"179\":1,\"184\":1}}],[\"generatekey\",{\"1\":{\"179\":1,\"184\":1}}],[\"generating\",{\"1\":{\"179\":1,\"184\":1}}],[\"getsession\",{\"1\":{\"590\":1}}],[\"getquerymap\",{\"1\":{\"552\":6}}],[\"getqueryarray\",{\"1\":{\"550\":1,\"551\":6}}],[\"getquery\",{\"1\":{\"550\":9}}],[\"getheader\",{\"1\":{\"544\":1}}],[\"getvalue\",{\"1\":{\"415\":1}}],[\"getwd\",{\"1\":{\"320\":2}}],[\"getppid\",{\"1\":{\"319\":2}}],[\"getpid\",{\"1\":{\"319\":2}}],[\"getenv\",{\"1\":{\"136\":1,\"318\":2}}],[\"get\",{\"0\":{\"249\":1,\"549\":1},\"1\":{\"32\":1,\"56\":1,\"59\":2,\"62\":2,\"85\":2,\"129\":2,\"139\":1,\"249\":3,\"252\":1,\"309\":1,\"314\":1,\"397\":1,\"401\":3,\"539\":1,\"540\":2,\"543\":1,\"544\":2,\"545\":1,\"549\":3,\"550\":6,\"551\":2,\"552\":3,\"553\":4,\"557\":2,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":2,\"570\":2,\"571\":2,\"574\":3,\"575\":5,\"576\":4,\"584\":3,\"588\":4,\"590\":4,\"597\":1,\"598\":2,\"603\":1}}],[\"go的文件\",{\"1\":{\"540\":1}}],[\"gonic\",{\"1\":{\"539\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"571\":1,\"576\":1,\"584\":1,\"588\":1,\"590\":1,\"598\":1,\"602\":1,\"603\":1}}],[\"gorm\",{\"1\":{\"449\":3}}],[\"goroot\",{\"1\":{\"378\":1}}],[\"goroutine可能会暂时阻塞在发送或接收操作上\",{\"1\":{\"468\":1}}],[\"goroutines\",{\"0\":{\"502\":1},\"1\":{\"371\":2,\"475\":1,\"477\":2,\"502\":4}}],[\"goroutine\",{\"0\":{\"494\":1,\"495\":1,\"496\":1},\"1\":{\"138\":1,\"273\":1,\"344\":1,\"418\":1,\"422\":1,\"450\":2,\"455\":2,\"460\":1,\"461\":3,\"462\":4,\"463\":1,\"465\":2,\"466\":2,\"467\":1,\"476\":1,\"479\":3,\"480\":1,\"481\":2,\"482\":2,\"484\":2,\"485\":1,\"493\":1,\"494\":4,\"495\":2,\"496\":4,\"500\":1,\"501\":1,\"502\":1,\"508\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":5,\"519\":1,\"521\":1,\"524\":1,\"530\":4,\"531\":3,\"532\":2,\"533\":1,\"534\":4,\"535\":3}}],[\"go语言可以更灵活地处理各种数据类型\",{\"1\":{\"405\":1}}],[\"go语言在1\",{\"1\":{\"398\":1}}],[\"go语言的错误处理机制非常简单且灵活\",{\"1\":{\"384\":1}}],[\"go语言通过\",{\"1\":{\"384\":1}}],[\"go语言通过内置的\",{\"1\":{\"379\":1}}],[\"go语言中\",{\"1\":{\"431\":1}}],[\"go语言中最基本的输出函数是\",{\"1\":{\"237\":1}}],[\"go语言中的切片是一个动态数组\",{\"1\":{\"159\":1}}],[\"gomoduls\",{\"1\":{\"378\":1}}],[\"gopath\",{\"1\":{\"378\":1}}],[\"goland\",{\"0\":{\"378\":1},\"1\":{\"376\":1,\"378\":6}}],[\"golangnotes\",{\"1\":{\"456\":1,\"457\":1}}],[\"golang环境\",{\"0\":{\"375\":1}}],[\"golang\",{\"0\":{\"1\":1,\"127\":1,\"369\":1},\"1\":{\"66\":3,\"128\":1,\"129\":2,\"131\":1,\"132\":1,\"134\":1,\"159\":1,\"309\":1,\"314\":1,\"353\":2,\"356\":1,\"370\":2,\"371\":6,\"372\":5,\"373\":3,\"374\":2,\"375\":2,\"377\":1,\"378\":3,\"385\":3,\"396\":5,\"397\":3,\"406\":2,\"408\":1,\"416\":2,\"420\":1,\"432\":3,\"433\":1,\"437\":1,\"442\":2,\"443\":1,\"444\":4,\"445\":6,\"446\":6,\"447\":1,\"450\":2,\"451\":1,\"453\":1,\"455\":1,\"456\":3,\"457\":1,\"458\":2,\"575\":1}}],[\"google\",{\"1\":{\"370\":1,\"375\":2}}],[\"go\",{\"0\":{\"509\":1},\"1\":{\"70\":1,\"128\":1,\"129\":2,\"132\":4,\"135\":3,\"142\":2,\"143\":1,\"146\":1,\"147\":1,\"148\":1,\"154\":1,\"155\":1,\"157\":1,\"166\":1,\"185\":1,\"186\":1,\"200\":1,\"201\":1,\"203\":1,\"204\":1,\"206\":1,\"214\":1,\"215\":1,\"217\":1,\"218\":1,\"220\":1,\"229\":1,\"231\":2,\"236\":1,\"238\":1,\"244\":1,\"261\":1,\"273\":1,\"281\":1,\"299\":1,\"300\":1,\"306\":2,\"309\":1,\"315\":1,\"321\":1,\"324\":1,\"325\":1,\"326\":1,\"331\":1,\"335\":1,\"346\":1,\"352\":1,\"362\":1,\"364\":1,\"370\":1,\"375\":1,\"378\":2,\"397\":1,\"415\":1,\"416\":4,\"417\":1,\"418\":6,\"419\":1,\"422\":1,\"423\":1,\"437\":1,\"450\":1,\"451\":2,\"454\":1,\"455\":1,\"456\":1,\"461\":1,\"462\":1,\"463\":1,\"464\":1,\"465\":3,\"472\":1,\"475\":1,\"476\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":4,\"481\":1,\"482\":3,\"483\":1,\"484\":2,\"485\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"493\":1,\"494\":5,\"495\":2,\"496\":1,\"497\":2,\"501\":1,\"502\":1,\"508\":1,\"509\":1,\"512\":1,\"513\":1,\"514\":1,\"515\":2,\"516\":1,\"517\":2,\"518\":3,\"519\":1,\"521\":1,\"524\":2,\"525\":1,\"528\":1,\"530\":2,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"535\":2,\"539\":1,\"540\":3,\"597\":1,\"606\":2}}],[\"g\",{\"1\":{\"62\":1}}],[\"gz\",{\"1\":{\"62\":1}}],[\"框架本身没有提供官方的会话管理模块\",{\"1\":{\"580\":1}}],[\"框架开发\",{\"1\":{\"577\":1}}],[\"框架内置的响应方法\",{\"1\":{\"572\":1}}],[\"框架提供了一些内置的方法来简化响应的生成\",{\"1\":{\"572\":1}}],[\"框架中生成各种格式的响应变得非常简单和直接\",{\"1\":{\"572\":1}}],[\"框架中\",{\"1\":{\"554\":1,\"557\":1,\"561\":1,\"580\":1,\"590\":1,\"601\":1}}],[\"框架中的中间件是理解和使用\",{\"1\":{\"546\":1}}],[\"框架中非常重要的部分\",{\"1\":{\"542\":1}}],[\"框架允许你全局应用中间件\",{\"1\":{\"542\":1}}],[\"框架\",{\"0\":{\"5\":1,\"547\":1},\"1\":{\"541\":1,\"580\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
