import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-Csyz1R7U.js";const l="/assets/2024-01-21-23-58-53-DWce77u2.png",t={},h=a(`<h1 id="docker-dockerfile" tabindex="-1"><a class="header-anchor" href="#docker-dockerfile"><span>Docker - Dockerfile</span></a></h1><h2 id="什么是dockerfile" tabindex="-1"><a class="header-anchor" href="#什么是dockerfile"><span>什么是Dockerfile？</span></a></h2><p>DockerFile 是用于构建 Docker 镜像的文本文件。Docker 是一种容器化平台，允许开发者将应用程序及其依赖项打包到一个可移植的容器中，以确保在不同环境中的一致性和可移植性。</p><p>DockerFile 包含一系列指令，这些指令描述了如何构建 Docker 镜像。每个指令都对应一个操作，例如安装软件包、设置环境变量、复制文件等。当 Docker 引擎读取 DockerFile 时，它会逐行执行其中的指令，以最终创建一个镜像。</p><h2 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明"><span>示例说明</span></a></h2><p>在空目录下，新建一个名为 Dockerfile 的文件，并在其中添加如下内容。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 使用官方的基础镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 复制当前目录下的所有文件到工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> apt-get update &amp;&amp; apt-get install -y \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    python3 \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    python3-pip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 安装应用程序依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pip3 install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 暴露应用程序的端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 5000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 定义启动命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;python3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中：</p><ul><li>FROM 指定了基础镜像，即用作构建的起点的操作系统和环境。</li><li>WORKDIR 设置了工作目录，即后续指令执行时的当前工作目录。</li><li>COPY 将当前目录下的所有文件复制到容器的工作目录。</li><li>RUN 执行命令，例如更新包列表、安装软件等。</li><li>EXPOSE 声明应用程序将监听的端口。</li><li>CMD 定义了容器启动时要执行的默认命令。</li></ul><p>通过编写 DockerFile，开发者可以将应用程序的构建过程和运行时环境的配置以代码的方式进行描述，实现了可重复、可移植和可自动化的容器化部署。</p><h2 id="镜像结构" tabindex="-1"><a class="header-anchor" href="#镜像结构"><span>镜像结构</span></a></h2><p>Docker File 文件中的每条指令都会创建一个新的镜像层，当本地环境中已经下载好了某些镜像，那么会直接使用这些镜像，不会重复下载，提高了效率。</p><p>但是过多的层也会导致镜像过大，可以适当进行简化，仅在关键部分进行分层。</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="编写规则" tabindex="-1"><a class="header-anchor" href="#编写规则"><span>编写规则</span></a></h2><ul><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令顺序执行，遵循从上到下原则</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ul><h2 id="指令汇总" tabindex="-1"><a class="header-anchor" href="#指令汇总"><span>指令汇总</span></a></h2><ul><li>FROM： 指定基础镜像，作为构建的起点。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span></code></pre></div><ul><li>WORKDIR： 设置工作目录，后续指令将在该目录下执行。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span></code></pre></div><ul><li>COPY： 复制文件或目录到容器中。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> . .</span></span></code></pre></div><ul><li>ADD： 类似于COPY，还支持URL解压缩和tar文件自动解压。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> https://example.com/file.tar.gz/app/</span></span></code></pre></div><ul><li>RUN： 执行命令，通常用于安装软件包、更新系统等。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> apt-get update &amp;&amp; apt-get install -y python3</span></span></code></pre></div><ul><li>ENV： 设置环境变量。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> MY_VAR=value</span></span></code></pre></div><ul><li>EXPOSE： 声明容器将监听的端口，但并不映射到主机。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 80</span></span></code></pre></div><ul><li>CMD： 定义容器启动时要执行的默认命令。可以被覆盖。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><ul><li>ENTRYPOINT： 定义容器启动时要执行的默认命令。不可被覆盖，但可以追加参数。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;nginx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;daemon off;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><ul><li>VOLUME： 创建挂载点，用于持久化数据。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">VOLUME</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /data</span></span></code></pre></div><ul><li>USER： 设置执行后续命令的用户或 UID。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">USER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> appuser</span></span></code></pre></div><ul><li>ARG： 定义构建时的变量，可通过构建命令传递。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> version=latest</span></span></code></pre></div><ul><li>LABEL： 添加元数据，通常用于描述镜像。</li></ul><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">LABEL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> version=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> description=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;My custom image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> author=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;codermast&quot;</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">Docker File 指令官方文档</p><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/builder/</a></p></div><h2 id="docker-build" tabindex="-1"><a class="header-anchor" href="#docker-build"><span>Docker build</span></a></h2><p><code>docker build</code> 命令用于基于 Dockerfile 创建 Docker 镜像。通过此命令，你可以自动化地构建一个新的 Docker 镜像。下面是 <code>docker build</code> 命令的详细解释，包括常见选项和示例。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [OPTIONS] PATH </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>OPTIONS</code>：构建过程的各种选项。</li><li><code>PATH</code>：Dockerfile 所在目录路径，Docker 会将此路径及其子目录作为构建的上下文。</li><li><code>URL</code>：远程 Dockerfile 所在的 URL。</li><li><code>-</code>：表示从标准输入读取 Dockerfile。</li></ul><h3 id="常用选项" tabindex="-1"><a class="header-anchor" href="#常用选项"><span>常用选项</span></a></h3><ul><li><code>-t, --tag</code>：为生成的镜像指定名称和标签。例如 <code>myimage:latest</code>。</li><li><code>-f, --file</code>：指定 Dockerfile 的路径（默认是当前目录下的 <code>Dockerfile</code>）。</li><li><code>--build-arg</code>：设置构建时的变量。</li><li><code>--no-cache</code>：不使用缓存，强制重新构建所有层。</li><li><code>--pull</code>：尝试从注册表中拉取最新版本的基础镜像。</li><li><code>--rm</code>：成功后移除中间容器（默认开启）。</li><li><code>--force-rm</code>：始终移除中间容器。</li><li><code>-q, --quiet</code>：仅在构建时输出镜像 ID。</li><li><code>--network</code>：设置构建时的网络模式。</li><li><code>--target</code>：设置构建的目标阶段（适用于多阶段构建）。</li></ul><h3 id="示例用法" tabindex="-1"><a class="header-anchor" href="#示例用法"><span>示例用法</span></a></h3><ol><li><p><strong>基本构建</strong>：</p><p>在 Dockerfile 所在目录下执行构建操作。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my-golang-app</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>-t my-golang-app</code>：指定生成的镜像名称为 <code>my-golang-app</code>。</li><li><code>.</code> 表示当前目录。</li></ul></li><li><p><strong>指定 Dockerfile 路径</strong>：</p><p>如果 Dockerfile 不在当前目录下，可以使用 <code>--file</code> 或 <code>-f</code> 参数指定路径。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my-node-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> path/to/Dockerfile</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>使用构建参数</strong>：</p><p>可以在构建过程中传递构建参数。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --build-arg</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> VERSION=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Dockerfile 中可以使用 <code>ARG</code> 指令定义构建参数：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> VERSION</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> echo $VERSION</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>不使用缓存重新构建</strong>：</p><p>强制重新构建镜像，不使用缓存。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --no-cache</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my-python-app</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>从 URL 拉取 Dockerfile</strong>：</p><p>从远程存储库中的 URL 拉取 Dockerfile 并构建镜像。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my-nginx-app</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> https://github.com/username/repo.git#branch:path/to/dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>使用标准输入流构建</strong>：</p><p>从标准输入流中读取 Dockerfile 的内容进行构建。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="构建步骤详解" tabindex="-1"><a class="header-anchor" href="#构建步骤详解"><span>构建步骤详解</span></a></h3><ol><li><strong>FROM</strong>：指定基础镜像。</li><li><strong>WORKDIR</strong>：设置工作目录。</li><li><strong>COPY</strong>：将本地文件复制到镜像中。</li><li><strong>RUN</strong>：运行命令（如安装依赖、编译代码）。</li><li><strong>EXPOSE</strong>：声明容器要开放的端口。</li><li><strong>CMD</strong>：指定容器启动时执行的命令。</li></ol><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>构建上下文：Dockerfile 所在目录及其子目录会作为构建上下文传递给 Docker 引擎。</li><li>缓存机制：每个构建步骤都会生成一个缓存层，如果没有更改，Docker 会重用这些缓存层以加快构建速度。使用 <code>--no-cache</code> 参数可以禁用缓存。</li><li>多阶段构建：通过多阶段构建，可以在一个 Dockerfile 中使用多个 <code>FROM</code> 指令，分阶段构建和优化镜像。</li></ul><p>通过熟练掌握 <code>docker build</code> 命令和 Dockerfile 的编写，可以高效地构建和管理 Docker 镜像，满足不同应用和环境的需求。</p>`,58),n=[h];function k(d,r){return e(),s("div",null,n)}const o=i(t,[["render",k],["__file","docker-dockerfile.html.vue"]]),g=JSON.parse('{"path":"/backend-tech/cloud-native/docker/docker-dockerfile.html","title":"Docker - Dockerfile","lang":"zh-CN","frontmatter":{"order":9,"description":"Docker - Dockerfile 什么是Dockerfile？ DockerFile 是用于构建 Docker 镜像的文本文件。Docker 是一种容器化平台，允许开发者将应用程序及其依赖项打包到一个可移植的容器中，以确保在不同环境中的一致性和可移植性。 DockerFile 包含一系列指令，这些指令描述了如何构建 Docker 镜像。每个指令都...","head":[["meta",{"property":"og:url","content":"https://www.golangnotes.com/backend-tech/cloud-native/docker/docker-dockerfile.html"}],["meta",{"property":"og:site_name","content":"Golang全栈开发指南"}],["meta",{"property":"og:title","content":"Docker - Dockerfile"}],["meta",{"property":"og:description","content":"Docker - Dockerfile 什么是Dockerfile？ DockerFile 是用于构建 Docker 镜像的文本文件。Docker 是一种容器化平台，允许开发者将应用程序及其依赖项打包到一个可移植的容器中，以确保在不同环境中的一致性和可移植性。 DockerFile 包含一系列指令，这些指令描述了如何构建 Docker 镜像。每个指令都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T09:08:38.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-07-08T09:08:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker - Dockerfile\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-08T09:08:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是Dockerfile？","slug":"什么是dockerfile","link":"#什么是dockerfile","children":[]},{"level":2,"title":"示例说明","slug":"示例说明","link":"#示例说明","children":[]},{"level":2,"title":"镜像结构","slug":"镜像结构","link":"#镜像结构","children":[]},{"level":2,"title":"编写规则","slug":"编写规则","link":"#编写规则","children":[]},{"level":2,"title":"指令汇总","slug":"指令汇总","link":"#指令汇总","children":[]},{"level":2,"title":"Docker build","slug":"docker-build","link":"#docker-build","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"常用选项","slug":"常用选项","link":"#常用选项","children":[]},{"level":3,"title":"示例用法","slug":"示例用法","link":"#示例用法","children":[]},{"level":3,"title":"构建步骤详解","slug":"构建步骤详解","link":"#构建步骤详解","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]}],"git":{"createdTime":1720429718000,"updatedTime":1720429718000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":5.73,"words":1719},"filePathRelative":"backend-tech/cloud-native/docker/docker-dockerfile.md","localizedDate":"2024年7月8日","autoDesc":true,"excerpt":"\\n<h2>什么是Dockerfile？</h2>\\n<p>DockerFile 是用于构建 Docker 镜像的文本文件。Docker 是一种容器化平台，允许开发者将应用程序及其依赖项打包到一个可移植的容器中，以确保在不同环境中的一致性和可移植性。</p>\\n<p>DockerFile 包含一系列指令，这些指令描述了如何构建 Docker 镜像。每个指令都对应一个操作，例如安装软件包、设置环境变量、复制文件等。当 Docker 引擎读取 DockerFile 时，它会逐行执行其中的指令，以最终创建一个镜像。</p>\\n<h2>示例说明</h2>\\n<p>在空目录下，新建一个名为 Dockerfile 的文件，并在其中添加如下内容。</p>"}');export{o as comp,g as data};
