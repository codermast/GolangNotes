import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,d as a}from"./app-Csyz1R7U.js";const e="/assets/2024-07-08-111647-DHh8nV6x.png",l={},t=a(`<h1 id="_1-gin-简介与环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-gin-简介与环境搭建"><span>1. Gin 简介与环境搭建</span></a></h1><h2 id="_1-什么是gin框架" tabindex="-1"><a class="header-anchor" href="#_1-什么是gin框架"><span>1. 什么是Gin框架？</span></a></h2><p>Gin是一个用Go语言编写的轻量级、高性能的Web框架。它具有以下特点：</p><ul><li><strong>速度快</strong>：Gin的性能非常出色，适合高并发场景。</li><li><strong>API友好</strong>：Gin提供了简洁的API，易于使用。</li><li><strong>中间件支持</strong>：Gin支持中间件机制，方便扩展功能。</li><li><strong>错误处理</strong>：内置错误处理机制，简化了开发工作。</li></ul><h2 id="_2-安装gin框架" tabindex="-1"><a class="header-anchor" href="#_2-安装gin框架"><span>2. 安装Gin框架</span></a></h2><p>在开始使用Gin之前，你需要安装Go语言环境。如果你还没有安装Go，可以在<a href="https://golang.org/dl/" target="_blank" rel="noopener noreferrer">Go官网</a>下载并安装最新版本。</p><p>安装好Go后，可以使用以下命令安装Gin：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> github.com/gin-gonic/gin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令会从GitHub上下载Gin框架，并将其添加到你的Go工作区中。</p><h2 id="_3-创建第一个gin项目" tabindex="-1"><a class="header-anchor" href="#_3-创建第一个gin项目"><span>3. 创建第一个Gin项目</span></a></h2><p>现在我们可以创建一个简单的Gin项目。我们将编写一个Hello World应用来演示Gin的基本用法。</p><p><strong>步骤1：创建项目目录</strong></p><p>首先，创建一个新的目录用于存放我们的项目代码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gin-hello-world</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gin-hello-world</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤2：创建Go模块</strong></p><p>在项目目录中，初始化一个新的Go模块：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gin-hello-world</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将创建一个<code>go.mod</code>文件，用于管理项目的依赖关系。</p><p><strong>步骤3：编写代码</strong></p><p>在项目目录中，创建一个名为<code>main.go</code>的文件，并在其中编写以下代码：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">github.com/gin-gonic/gin</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 创建一个默认的Gin路由器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 定义一个GET请求的路由和处理函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">            &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 启动Gin服务器，默认监听8080端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 监听并在0.0.0.0:8080上启动服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤4：运行代码</strong></p><p>在项目目录中，运行以下命令来启动应用：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你应该会看到输出如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[GIN-debug] GET    /hello                    --</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> main.main.func1 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> handlers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value to Config.TrustedProxies.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[GIN-debug] [WARNING] Running in </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mode. Switch to </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mode in production.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> using</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> env:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GIN_MODE=release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> using</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> code:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gin.SetMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">gin.ReleaseMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[GIN-debug] Listening and serving HTTP on :8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开浏览器，访问<code>http://localhost:8080/hello</code>，你应该会看到以下JSON响应：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>到这里，你已经成功地安装了 Gin 框架，并创建了一个简单的 Hello World 应用。你学到了如何创建一个Gin路由器，定义一个路由和处理函数，以及如何启动 Gin 服务器。接下来，可以深入学习Gin的更多功能，例如路由参数、中间件、请求处理和响应处理等。</p>',31),h=[t];function p(r,k){return n(),s("div",null,h)}const o=i(l,[["render",p],["__file","introduce.html.vue"]]),c=JSON.parse('{"path":"/golang/web/gin/introduce.html","title":"1. Gin 简介与环境搭建","lang":"zh-CN","frontmatter":{"order":1,"description":"1. Gin 简介与环境搭建 1. 什么是Gin框架？ Gin是一个用Go语言编写的轻量级、高性能的Web框架。它具有以下特点： 速度快：Gin的性能非常出色，适合高并发场景。 API友好：Gin提供了简洁的API，易于使用。 中间件支持：Gin支持中间件机制，方便扩展功能。 错误处理：内置错误处理机制，简化了开发工作。 2. 安装Gin框架 在开始使...","head":[["meta",{"property":"og:url","content":"https://www.golangnotes.com/golang/web/gin/introduce.html"}],["meta",{"property":"og:site_name","content":"Golang全栈开发指南"}],["meta",{"property":"og:title","content":"1. Gin 简介与环境搭建"}],["meta",{"property":"og:description","content":"1. Gin 简介与环境搭建 1. 什么是Gin框架？ Gin是一个用Go语言编写的轻量级、高性能的Web框架。它具有以下特点： 速度快：Gin的性能非常出色，适合高并发场景。 API友好：Gin提供了简洁的API，易于使用。 中间件支持：Gin支持中间件机制，方便扩展功能。 错误处理：内置错误处理机制，简化了开发工作。 2. 安装Gin框架 在开始使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T08:07:27.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-07-08T08:07:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. Gin 简介与环境搭建\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-08T08:07:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是Gin框架？","slug":"_1-什么是gin框架","link":"#_1-什么是gin框架","children":[]},{"level":2,"title":"2. 安装Gin框架","slug":"_2-安装gin框架","link":"#_2-安装gin框架","children":[]},{"level":2,"title":"3. 创建第一个Gin项目","slug":"_3-创建第一个gin项目","link":"#_3-创建第一个gin项目","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1720426047000,"updatedTime":1720426047000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"golang/web/gin/introduce.md","localizedDate":"2024年7月8日","autoDesc":true,"excerpt":"\\n<h2>1. 什么是Gin框架？</h2>\\n<p>Gin是一个用Go语言编写的轻量级、高性能的Web框架。它具有以下特点：</p>\\n<ul>\\n<li><strong>速度快</strong>：Gin的性能非常出色，适合高并发场景。</li>\\n<li><strong>API友好</strong>：Gin提供了简洁的API，易于使用。</li>\\n<li><strong>中间件支持</strong>：Gin支持中间件机制，方便扩展功能。</li>\\n<li><strong>错误处理</strong>：内置错误处理机制，简化了开发工作。</li>\\n</ul>\\n<h2>2. 安装Gin框架</h2>\\n<p>在开始使用Gin之前，你需要安装Go语言环境。如果你还没有安装Go，可以在<a href=\\"https://golang.org/dl/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Go官网</a>下载并安装最新版本。</p>"}');export{o as comp,c as data};
