import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,d as a}from"./app-Csyz1R7U.js";const n={},t=a(`<h1 id="docker-数据卷" tabindex="-1"><a class="header-anchor" href="#docker-数据卷"><span>Docker - 数据卷</span></a></h1><p>Docker 数据卷（Docker Volumes）是用于持久化存储数据的一种机制，与容器的生命周期分离，可以在容器之间共享和重用。使用数据卷可以在容器删除后保留数据，也方便在多个容器之间共享文件或目录。</p><div class="hint-container important"><p class="hint-container-title">Docker 数据卷 Volumes 可以看做是将 Docker 容器和数据进行分离。</p></div><h2 id="docker-数据卷的特点和优势" tabindex="-1"><a class="header-anchor" href="#docker-数据卷的特点和优势"><span>Docker 数据卷的特点和优势：</span></a></h2><ol><li><p><strong>持久性</strong>：数据卷可以在容器删除后持久化保存数据，不受容器生命周期影响。</p></li><li><p><strong>共享和重用</strong>：可以将数据卷挂载到多个容器中，实现数据的共享和重用。</p></li><li><p><strong>性能</strong>：与容器内部文件系统相比，数据卷通常具有更高的性能，特别是在处理大量数据时。</p></li><li><p><strong>数据管理</strong>：可以通过 Docker 命令管理数据卷，如创建、删除、备份等。</p></li></ol><h2 id="创建和使用数据卷" tabindex="-1"><a class="header-anchor" href="#创建和使用数据卷"><span>创建和使用数据卷</span></a></h2><h3 id="_1-创建数据卷" tabindex="-1"><a class="header-anchor" href="#_1-创建数据卷"><span>1. 创建数据卷</span></a></h3><p>可以使用 <code>docker volume create</code> 命令创建一个数据卷：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mydata</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将创建一个名为 <code>mydata</code> 的数据卷。你也可以通过在容器运行时自动创建数据卷来使用 <code>-v</code> 参数。</p><h3 id="_2-挂载数据卷到容器" tabindex="-1"><a class="header-anchor" href="#_2-挂载数据卷到容器"><span>2. 挂载数据卷到容器</span></a></h3><p>在运行容器时，可以使用 <code>-v</code> 或 <code>--mount</code> 参数将数据卷挂载到容器的指定路径上：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mycontainer</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mydata:/data</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>mydata:/data</code>：将名为 <code>mydata</code> 的数据卷挂载到容器内的 <code>/data</code> 目录。</li></ul><h3 id="_3-查看数据卷" tabindex="-1"><a class="header-anchor" href="#_3-查看数据卷"><span>3. 查看数据卷</span></a></h3><p>可以使用 <code>docker volume ls</code> 命令列出所有的数据卷：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-删除数据卷" tabindex="-1"><a class="header-anchor" href="#_4-删除数据卷"><span>4. 删除数据卷</span></a></h3><p>使用 <code>docker volume rm</code> 命令删除不再需要的数据卷：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mydata</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="数据卷的常见应用场景" tabindex="-1"><a class="header-anchor" href="#数据卷的常见应用场景"><span>数据卷的常见应用场景：</span></a></h2><ul><li><p><strong>持久化存储</strong>：将数据库文件、配置文件等持久化存储在数据卷中，确保在容器重启或删除后数据不丢失。</p></li><li><p><strong>共享数据</strong>：多个容器需要共享数据时，可以使用同一个数据卷来实现数据共享。</p></li><li><p><strong>备份和恢复</strong>：通过备份和还原数据卷，可以轻松地管理和迁移数据。</p></li></ul><h2 id="使用-docker-compose-管理数据卷" tabindex="-1"><a class="header-anchor" href="#使用-docker-compose-管理数据卷"><span>使用 Docker Compose 管理数据卷</span></a></h2><p>在 Docker Compose 文件中，可以使用 <code>volumes</code> 关键字定义和管理数据卷：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;3.8&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">mydata:/data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  mydata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例定义了一个名为 <code>mydata</code> 的数据卷，并将其挂载到 <code>web</code> 服务的 <code>/data</code> 目录上。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Docker 数据卷提供了一种方便和灵活的方式来处理容器中的持久化数据需求。通过使用数据卷，可以实现数据的持久化存储、共享和管理，增强了 Docker 容器在生产环境中的适用性和可靠性。</p>`,28),l=[t];function r(d,h){return s(),i("div",null,l)}const p=e(n,[["render",r],["__file","docker-volumes.html.vue"]]),k=JSON.parse('{"path":"/backend-tech/cloud-native/docker/docker-volumes.html","title":"Docker - 数据卷","lang":"zh-CN","frontmatter":{"order":8,"description":"Docker - 数据卷 Docker 数据卷（Docker Volumes）是用于持久化存储数据的一种机制，与容器的生命周期分离，可以在容器之间共享和重用。使用数据卷可以在容器删除后保留数据，也方便在多个容器之间共享文件或目录。 Docker 数据卷 Volumes 可以看做是将 Docker 容器和数据进行分离。 Docker 数据卷的特点和优势：...","head":[["meta",{"property":"og:url","content":"https://www.golangnotes.com/backend-tech/cloud-native/docker/docker-volumes.html"}],["meta",{"property":"og:site_name","content":"Golang全栈开发指南"}],["meta",{"property":"og:title","content":"Docker - 数据卷"}],["meta",{"property":"og:description","content":"Docker - 数据卷 Docker 数据卷（Docker Volumes）是用于持久化存储数据的一种机制，与容器的生命周期分离，可以在容器之间共享和重用。使用数据卷可以在容器删除后保留数据，也方便在多个容器之间共享文件或目录。 Docker 数据卷 Volumes 可以看做是将 Docker 容器和数据进行分离。 Docker 数据卷的特点和优势：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T09:08:38.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-07-08T09:08:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker - 数据卷\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-08T09:08:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker 数据卷的特点和优势：","slug":"docker-数据卷的特点和优势","link":"#docker-数据卷的特点和优势","children":[]},{"level":2,"title":"创建和使用数据卷","slug":"创建和使用数据卷","link":"#创建和使用数据卷","children":[{"level":3,"title":"1. 创建数据卷","slug":"_1-创建数据卷","link":"#_1-创建数据卷","children":[]},{"level":3,"title":"2. 挂载数据卷到容器","slug":"_2-挂载数据卷到容器","link":"#_2-挂载数据卷到容器","children":[]},{"level":3,"title":"3. 查看数据卷","slug":"_3-查看数据卷","link":"#_3-查看数据卷","children":[]},{"level":3,"title":"4. 删除数据卷","slug":"_4-删除数据卷","link":"#_4-删除数据卷","children":[]}]},{"level":2,"title":"数据卷的常见应用场景：","slug":"数据卷的常见应用场景","link":"#数据卷的常见应用场景","children":[]},{"level":2,"title":"使用 Docker Compose 管理数据卷","slug":"使用-docker-compose-管理数据卷","link":"#使用-docker-compose-管理数据卷","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1720429718000,"updatedTime":1720429718000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":2.32,"words":697},"filePathRelative":"backend-tech/cloud-native/docker/docker-volumes.md","localizedDate":"2024年7月8日","autoDesc":true,"excerpt":"\\n<p>Docker 数据卷（Docker Volumes）是用于持久化存储数据的一种机制，与容器的生命周期分离，可以在容器之间共享和重用。使用数据卷可以在容器删除后保留数据，也方便在多个容器之间共享文件或目录。</p>\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">Docker 数据卷 Volumes 可以看做是将 Docker 容器和数据进行分离。</p>\\n</div>\\n<h2>Docker 数据卷的特点和优势：</h2>\\n<ol>\\n<li>\\n<p><strong>持久性</strong>：数据卷可以在容器删除后持久化保存数据，不受容器生命周期影响。</p>\\n</li>\\n<li>\\n<p><strong>共享和重用</strong>：可以将数据卷挂载到多个容器中，实现数据的共享和重用。</p>\\n</li>\\n<li>\\n<p><strong>性能</strong>：与容器内部文件系统相比，数据卷通常具有更高的性能，特别是在处理大量数据时。</p>\\n</li>\\n<li>\\n<p><strong>数据管理</strong>：可以通过 Docker 命令管理数据卷，如创建、删除、备份等。</p>\\n</li>\\n</ol>"}');export{p as comp,k as data};
